/**
 * Generates a NotesList component
 *
 * @param spec
 * @returns {*}
 * @constructor
 * @mixes AutoShouldUpdateMixin
 */
const NotesListFactory = (spec) => {
    /**************************************************************************
     *
     * Imports
     *
     *************************************************************************/

    const React = require('react');
    const createClass = require('create-react-class');
		const PropTypes = require('prop-types');

    // Redux
    const {connect} = require('react-redux');

    const MessageModel = require('../../stores/models/MessageModel').default;

    // Material UI
    const {List, ListItem} = require('material-ui/List');
    const Divider = require('material-ui/Divider').default;
    const Toggle = require('material-ui/Toggle').default;

    // Actions
    const {
        TranslateActionsFactory
    } = require('../../actions');

    // Components
    const {MessageCardFactory, NoteCardFactory} = require('../cards');
    const {SectionHeaderFactory} = require('../SectionHeader');

    // Mixins
    const {AutoShouldUpdateMixinFactory} = require('../../mixins');

    /**************************************************************************
     *
     * Private Members
     *
     *************************************************************************/

    /**********************************
     * Actions
     *********************************/

    const {getText} = TranslateActionsFactory({});

    /**********************************
     * Components
     *********************************/

    const MessageCard = MessageCardFactory({});
    const NoteCard = NoteCardFactory({});
    const SectionHeader = SectionHeaderFactory({});

    /**********************************
     * Methods
     *********************************/

    let _generateNoteListData;
    let _isSystemNote;

    /**
     *
     * @param inst
     * @returns {Array}
     * @private
     */
    _generateNoteListData = (inst) => {
        const {
            event
        } = inst.props;
        const {
            showSystemNotes,
            toggledNoteId,
            expandAllNotes,
        } = inst.state;

        const modifiedEvent = event.get('modifiedEvent');
        const notesList = modifiedEvent.get('Note');

        let fullNotesList = null;

        let id = 0;
        let data = [];

        if (notesList && notesList.size) {
            if (showSystemNotes) {
                fullNotesList = notesList;
            }
            else {
                fullNotesList = notesList.filter((note) => {
                    return !_isSystemNote(note);
                });
            }

            fullNotesList = fullNotesList.sortBy((note) => {
                return note.get('datetime');
            }, (a, b) => {
                if (a && !b) {
                    return -1;
                }
                else if (b && !a) {
                    return 1;
                }
                else if (!a && !b) {
                    return 0;
                }
                else if (a.getDate() < b.getDate()) {
                    return 1;
                }
                else if (b.getDate() > a.getDate()) {
                    return -1;
                }

                return 0;
            });
        }

        return fullNotesList;
    };

    /**
     * Determines if a note was generated by the system
     *
     * @param {Map|Record} note
     * @returns {boolean}
     * @private
     */
    _isSystemNote = (note) => {
        return (/^\*/.test(note.get('enteredby')) || /^Event created as a/.test(note.get('content')));
    };

    /**********************************
     * Mixins
     *********************************/

    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({
        propTypes: {
            event: PropTypes.object.isRequired
        },
        compareState: true
    });

    /**************************************************************************
     *
     * Public Interface / React Component
     *
     *************************************************************************/

    let component = createClass({
        /**
         * Used in debug messaging
         */
        displayName: 'NotesList',

        /**
         * Allows you to use mixins to share behavior among multiple components.
         */
        mixins: [AutoShouldUpdateMixin],

        getInitialState() {
            return {
                showSystemNotes: false
            };
        },

        /**
         * Generates the virtual DOM/HTML
         *
         * @returns {*}
         */
        render() {
            const {showSystemNotes} = this.state;
            const filteredNotesList = _generateNoteListData(this);

            const showNotesHelp = (!filteredNotesList || !filteredNotesList.size);

            return <List>
                <SectionHeader>{getText('Notes')}</SectionHeader>

                <ListItem>
                    <Toggle
                        label={getText("Show System Notes")}
                        toggled={showSystemNotes}
                        onToggle={(e, val) => {
                            this.setState({
                                showSystemNotes: val
                            });
                        }}/>
                </ListItem>

                {(showNotesHelp) ? <MessageCard message={MessageModel({
                    type: 'info',
                    text: getText('Tap the Add button below to create a new %1$s.', {
                        params: [getText('Note')]
                    })
                })}/> : null}

                {filteredNotesList ? filteredNotesList.map((item, i) => {
                    return <div key={`notes-${i}`}>
                        <NoteCard
                            note={item}
                            isSystem={_isSystemNote(item)}/>

                        <Divider/>
                    </div>;
                }) : null}
            </List>;
        }
    });

    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);
}

export { NotesListFactory }