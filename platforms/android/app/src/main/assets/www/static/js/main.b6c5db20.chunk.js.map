{"version":3,"sources":["mixins/CardMixin.js","mixins/EventMixin.js","mixins/FormHelperMixin.js","mixins/MessagesMixin.js","mixins/SubViewMixin.js","mixins/VenueMixin.js","actions/AuthActions.js","actions/CalendarActions.js","actions/CompanyDataActions.js","actions/ContactActions.js","actions/DashboardActions.js","actions/DialogActions.js","actions/DisplayDataActions.js","actions/JobBoardActions.js","actions/MessageActions.js","actions/NavActions.js","actions/NoteActions.js","actions/OverlayActions.js","actions/ProductActions.js","actions/PushActions.js","actions/SearchActions.js","actions/ServiceActions.js","actions/SpeakerInfoActions.js","actions/StageTimeActions.js","actions/StoreActions.js","actions/TodoActions.js","actions/VenueActions.js","actions/ViewActions.js","util/DevTools.js","enums/RADIOS.js","util/DateTools.js","stores/models/NavItemModel.js","enums/VIEWS.js","theme/mainTheme.js","util/Platform.js","theme/IconMap.js","components/cards/ActivityCard.js","components/cards/ContactCard.js","components/cards/EventHeaderCard.js","components/cards/JobCard.js","components/cards/LeadOfferCard.js","components/cards/LibraryFileCard.js","components/cards/MainHeaderCard.js","components/cards/MessageCard.js","components/cards/NoteCard.js","components/cards/PipelineCard.js","components/cards/ProductCard.js","components/cards/SearchResultCard.js","components/cards/ServiceCard.js","components/cards/SpeakerCard.js","components/cards/StageTimeCard.js","components/cards/StoryCard.js","components/cards/SubHeaderCard.js","components/cards/TipCard.js","components/cards/TodoCard.js","components/cards/TotalCard.js","components/cards/TravelCard.js","components/cards/UpcomingConfirmedCard.js","components/SectionHeader.js","components/FooterNav.js","components/Header.js","components/LinkCollapseArea.js","enums/BTN.js","components/cards/ListCard.js","mixins/ValidationMixin.js","components/FormLoading.js","enums/DELIVERY_METHOD_ICONS.js","stores/models/MessageModel.js","components/cards/EventInfoCard.js","mixins/AutoShouldUpdateMixin.js","components/ViewHeader.js","components/DisplayField.js","components/list/ActivityList.js","components/list/CalendarEventList.js","components/list/JobList.js","components/list/LeadOfferList.js","components/list/MessageList.js","components/list/NotesList.js","components/list/PipelineList.js","components/list/ProductList.js","components/list/SearchList.js","components/list/ServiceList.js","components/list/StageTimeList.js","components/list/TravelList.js","components/list/UpcomingConfirmedList.js","forms/ContactForm.js","forms/TravelForm.js","forms/AddNoteForm.js","forms/EmailCoworkersForm.js","forms/ProductForm.js","forms/ServiceForm.js","forms/StageTimeForm.js","forms/TodoForm.js","forms/index.js","enums/OFFER_STATUS.js","actions/EventActions.js","components/messages/MessageContainer.js","forms/inputs/MUIIconInput.js","components/dialogs/ContinueCancelDialog.js","services/SharedParams.js","components/AddButton.js","components/CSSTransistor.js","enums/STORAGE.js","enums/GENERAL.js","views/jobViews/PayoutDetailView.js","services/LocalStorageService.js","stores/models/DialogItemModel.js","actions/LoadingActions.js","components/cards/BaseHeaderCard.js","components/IconLabel.js","components/cards/JobInfoCard.js","actions/TranslateActions.js","views/LoginView.js","forms/ForgotPasswordForm.js","forms/LoginForm.js","views/eventViews/ContactsView.js","forms/ContactsForm.js","views/eventViews/CustomView.js","forms/CustomForm.js","views/eventViews/DetailsView.js","forms/DetailsForm.js","views/eventViews/JobEventView.js","views/eventViews/LibraryView.js","views/eventViews/MiscView.js","forms/MiscForm.js","views/eventViews/ServicesView.js","forms/ServicesForm.js","views/eventViews/TodoListView.js","forms/TodoListForm.js","views/eventViews/TravelView.js","forms/NewEventForm.js","enums/EVENT_STATUSES.js","views/jobViews/ConfirmedEventsView.js","views/jobViews/JobApplyView.js","views/jobViews/JobApplyConfirmationView.js","views/jobViews/JobBoardView.js","views/jobViews/JobDetailView.js","views/jobViews/JobMessagesView.js","views/jobViews/LeadOfferDetailView.js","views/jobViews/LeadsOffersView.js","forms/inputs/MUIStatic.js","stores/models/AuthModel.js","stores/models/PushModel.js","stores/models/CalendarModel.js","stores/models/CompanyDataModel.js","stores/models/DashboardModel.js","stores/models/DisplayDataModel.js","stores/models/EventModel.js","stores/models/OfferStatusModel.js","stores/models/JobBoardModel.js","stores/models/LoadingModel.js","stores/models/NavModel.js","stores/models/OverlayModel.js","stores/models/SearchModel.js","stores/models/SpeakerInfoModel.js","stores/models/ViewModel.js","stores/models/TodoViewModel.js","services/JobBoardService.js","components/LoadingScreen.js","mixins/AddressMixin.js","mixins/ViewMixin.js","components/FooterNavItem.js","components/cards/MultiLineSecondaryText.js","components/cards/DrawerHeaderCard.js","components/cards/TravelFlightCard.js","components/cards/TravelGroundCard.js","components/cards/TravelHotelCard.js","components/Link.js","components/Panel.js","components/SplashScreen.js","forms/MUIButtonGroup.js","components/list/ContactList.js","stores/models/ServiceFlagsModel.js","components/list/LibraryList.js","components/list/StoryList.js","components/list/TodoList.js","components/dialogs/ConfirmedEventsDialog.js","components/dialogs/DeleteConfirmationDialog.js","components/dialogs/ExitDirtyConfirmationDialog.js","components/dialogs/UndoConfirmationDialog.js","stores/models/JobModel.js","components/ResponsiveLog.js","services/LoginService.js","components/mui/MUIDrawer.js","components/JobOfferSection.js","components/list/SpeakerList.js","enums/index.js","components/MeetingNotes.js","views/DashboardView.js","views/CalendarView.js","views/NewEventView.js","views/SearchView.js","views/SettingsView.js","views/index.js","components/messages/ListMessages.js","components/messages/MessageSnacks.js","enums/VERSIONS.js","util/AuthedUserSession.js","stores/models/DialogModel.js","locale/index.js","stores/ContactStore.js","stores/NoteStore.js","stores/ProductStore.js","stores/ServiceStore.js","stores/StageTimeStore.js","stores/TodoStore.js","stores/VenueStore.js","mixins/ArrayDispatchMiddleware.js","views/MainView.js","theme/mui/ThemeOverride.js","forms/layouts/MUIFields.js","forms/layouts/MUIField.js","components/FooterMessageInput.js","views/NavWrapperView.js","layouts/LayoutManager.js","components/DrawerItem.js","components/cards/LegendCard.js","components/eventCalendar/EventCalendar.js","components/eventCalendar/CalendarDay.js","components/eventCalendar/CalendarHeader.js","components/eventCalendar/MonthSelector.js","forms/SearchForm.js","forms/JobApplyForm.js","components/Chipper.js","components/cards/JobMessageCard.js","components/ActionDescription.js","components/JobButton.js","components/dialogs/DialogGroup.js","components/dialogs/CopyEventConfirmationDialog.js","components/dialogs/SpeakerSelectorDialog.js","views/eventViews/index.js","views/jobViews/index.js","components/PushManager.js","services/index.js","services/AuthenticateService.js","services/CalendarService.js","services/EventService.js","services/SearchService.js","stores/AuthStore.js","stores/CompanyDataStore.js","stores/DashboardStore.js","stores/DisplayDataStore.js","stores/EventStore.js","stores/LoadingStore.js","stores/MessageStore.js","stores/OverlayStore.js","stores/PushStore.js","stores/SearchStore.js","stores/SpeakerInfoStore.js","stores/ViewStore.js","stores/AppStore.js","stores/CalendarStore.js","stores/DialogStore.js","stores/JobBoardStore.js","stores/NavStore.js","forms/inputs/MUICheckbox.js","forms/inputs/MUIDate.js","forms/inputs/MUIText.js","forms/inputs/MUIRadioGroup.js","forms/inputs/MUISelect.js","forms/inputs/MUITime.js","forms/inputs/MUIToggle.js","forms/inputs/MUIAutoComplete.js","forms/inputs/MUIFilteredSelect.js","forms/MUIInputs.js","views/subViews/AddNoteView.js","views/subViews/CalendarEventsView.js","views/subViews/ContactView.js","views/subViews/EmailCoworkersView.js","views/subViews/ProductView.js","views/subViews/ServiceView.js","views/subViews/StageTimeView.js","views/subViews/TodoView.js","layouts/EventMobileLayout.js","layouts/EventTabletLayout.js","layouts/MainMobileLayout.js","layouts/MainTabletLayout.js","stores/models/FlagModel.js","stores/models/StageTimeModel.js","index.js","app.less","components/dialogs/CalendarLegendDialog.js"],"names":["CardMixinFactory","spec","_buildMenuItem","_","require","DateToolsFactory","default","log","EventActionsFactory","TranslateActionsFactory","stopProp","getText","DateTools","_fields","fields","_additionalMapFunc","additionalMapFunc","item","props","inst","state","showDetails","label","leftIcon","onClick","e","setState","isFunction","onCollapse","onExpand","onEdit","onDelete","buildDataItems","dataType","dataItems","dataTags","isArray","each","data","assign","buildHeadingMap","value","record","map","field","get","key","emptyFunc","isNumber","isString","length","isDate","isEmpty","convertFromBalboaToDateString","subHeading","labelFunc","iconClass","extractHeadings","prioritizedFields","limit","count","headings","has","push","getMenuItems","items","menuItem","menuItems","getInitialState","getDefaultProps","EventMixinFactory","_actionCopyEvent","_actionEmailCoworkers","_buildFormDirtyActions","_buildHeaderActions","_confirmHandler","_discardHandler","_submitHandler","_updateHeaderActions","radio","is","IconMap","fromJS","mainTheme","Avatar","BTN","RADIOS","VIEWS","ViewMixinFactory","isSolutionTree","DialogActionsFactory","JobBoardActionsFactory","NavActionsFactory","ViewActionsFactory","showCopyEventConfirmation","showDeleteConfirmation","showUndoConfirmation","copyEvent","deleteEvent","discardEventChanges","isMarketPlaceEvent","mergeModifiedEvent","toggleEventDirty","getMyInfo","addSubView","getCurrentSubView","setHeaderActions","toggleViewDirty","prepareFormDataOverride","_prepareFormData","dispatch","onContinue","copyLists","event","speakerInfo","selectedEvent","selectedSpeaker","eid","targetSid","subViews","EMAIL_COWORKERS_VIEW","isDirty","type","SAVE","DISCARD","messagesAction","jobBoard","nav","modifiedEvent","myInfo","n_unread","node","style","display","getButton","jobSubViews","JOB_MESSAGES_VIEW","paddingRight","color","headerIconColor","marginTop","marginLeft","marginRight","size","backgroundColor","errorBackgroundColor","actions","concat","Form_reset","prepareFormData","clone","Form_onSubmit","ViewMixin","updateHeaderActions","this","Radio_setup","radios","ui","OPEN_EVENT_NAV","componentWillReceiveProps","nextProps","currentEvent","nextEvent","currentNav","nextNav","currentView","view","nextView","isEventDirty","componentWillUnmount","getFormData","onDiscard","overrides","FormHelperMixinFactory","_startDateRequired","_startTimeRequired","_stopDateRequired","_stopDateEnabled","_stopTimeEnabled","_stopTimeValidator","moment","MUIFieldsFactory","v","InputTypes","_prevDateDiff","startTime","stopDate","stopTime","startDate","startMoment","startDateTime","stopDateTime","validationResults","date","mergeDate","isSameOrBefore","MUIFields","getDefaultFormProps","errors","buildInput","Form_buildInput","generateFields","buildStartStopDateTimeSchema","name","minDate","getSystemMinDate","maxDate","getMaxStartDate","validate","validateIf","disabled","getMinStopDate","getSystemMaxDate","emptyOr","generateGroupCodeOptions","codesField","codeList","options","code","text","determineMode","id","mode","onFormChangedStartStopDateTime","newStopDate","dateDiff","newData","toMoment","diff","subtract","Math","abs","add","format","masks","DATE_STRING","toDate","hours","input","getInputByType","component","onChange","Form_onChange","MessagesMixin","determineIcon","message","SubViewMixinFactory","determineSaveAction","VenueMixinFactory","_findSelectedVenue","_generateTimezoneOptions","_generateVenueData","AddressMixinFactory","VenueActionsFactory","extractSelectedVenue","jed","venueId","timezones","displayData","timezone","venue","building","city","st","country","address","phone","fax","zip","pick","toJS","AddressMixin","buildVenueSchema","buildAddressSchema","placeholder","getInitialVenueValues","selectedVenue","onFormChangedVenue","updatedData","AuthActionsFactory","forgotPassword","services","FORGOT_PASSWORD","broadcast","renewToken","RENEW_TOKEN","username","token","timestamp","updateAuthStore","stores","AUTH_STORE_UPDATE","payload","logout","LOGOUT","CalendarActionsFactory","extractMonthData","calendar","selectedMonth","selectedYear","monthData","year","month","monthCalendar","toString","details","loadCalendarData","LOAD_CALENDAR","sids","mergeCalendarData","CALENDAR_STORE_MERGE_CALENDAR_DATA","nextMonth","CALENDAR_STORE_NEXT_MONTH","prevMonth","CALENDAR_STORE_PREV_MONTH","selectDay","CALENDAR_STORE_SELECT_DAY","NAV_ADD_SUB_VIEW","CALENDAR_EVENTS_VIEW","updateCalendarPeriod","CALENDAR_STORE_UPDATE_CALENDAR_PERIOD","updateSelectedMonthYear","CALENDAR_STORE_UPDATE","updateSelectorYear","CompanyDataActionsFactory","_getCompanyLists","updateLoadingStore","LoadingActionsFactory","updateCompanyDataStore","COMPANY_DATA_STORE_UPDATE","refreshCompanyData","silent","silentRefresh","REFRESH_DATA","getCompanyLists","GET_COMPANY_LISTS","verifyCompanyLists","VERIFY_COMPANY_LISTS","ContactActionsFactory","extractSelectedItem","deleteContact","EVENT_STORE_DELETE_CONTACT","extractSelectedContact","groupcodes","saveContact","EVENT_STORE_SAVE_CONTACT","selectContact","EVENT_STORE_SELECT_CONTACT","CONTACT_VIEW","DashboardActionsFactory","updateDashboardStore","DASHBOARD_STORE_UPDATE","loadDashboard","LOAD_DASHBOARD","closeDialog","DIALOG_STORE_CLOSE_DIALOG","showConfirmedEventsDialog","DIALOG_STORE_UPDATE","confirmedEventsDialog","show","copyEventConfirmation","deleteConfirmation","showExitDirtyConfirmation","exitDirtyConfirmation","showLegend","showSpeakerSelector","undoConfirmation","updatedDialogStore","DisplayDataActionsFactory","_getDisplayLists","updateDisplayDataStore","DISPLAY_DATA_STORE_UPDATE","refreshDisplayData","getDisplayLists","GET_DISPLAY_LISTS","verifyDisplayLists","VERIFY_DISPLAY_LISTS","List","Map","OFFER_STATUS","OfferStatusModel","SpeakerInfoActionsFactory","esUtils","getSpeakersFromDisplayLists","OFFER_STATUS_LIST","UNREAD_MESSAGE","WAITING_CLIENT","status","areaTitle","nowItems","nextItems","WAITING_YOU","nowType","WARNING","OFFER_ACCEPTED","SUCCESS","DEPOSIT_PAID","PAID_IN_FULL","EVENT_COMPLETED","getCommission","undefined","getLedgerData","getOfferEventStatus","getOfferStatus","getOfferStatusDisplay","getOfferStatusIndexByJob","getOfferStatusIndexByStatus","isJobLead","isJobOffer","Displaylists","mp_agreement","fee_main","fee_travel","fee_materials","close_date","acceptance_date","commission","commission_desc","bname","bureauID","fees","f","flags_as_map","speaking_fee","is_set","fee","travel","due","description","grand_total","reduce","sum","fee_speaking","index","sid","eventObj","statusIndex","MPJobStatus","max","tomorrow","Date","setDate","getDate","params","my_info","is_on_shortlist","is_accepted","getBudget","job","jobObj","price_range","prices","uniq","sortBy","filter","price","Infinity","parseInt","format_currency","join","getBuyerName","jobEvent","buyer_names","Buyers","Buyer","firstname","getCompanyName","company","lastname","r","displayLists","jobDetail","retVal","is_mp_event","includes","flags_as_array","whitelabel","whitelabel_name","espeakers_commission","mp_espeakers_commission","thebureau_commission","mp_bureau_commission","getEventDate","convertFromBalboaTrunkTimestamp","formattedDate","format_date","mediumDate","getMessageSpeakerName","spkr","head","name_full","event_id","jobSummary","getNotes","pJob","notes","details_note","first","note","test","content","detailsInNotes","trim","result","split","line","line_parts","signed_b","signed_s","offerStatus","getPayments","payments","payment","getShortListDescription","shortlist_sids","my_auted_speakers_on_this_shortlist","perspeaker","speaker","flag_mp_job_board","flag_bookmenow","n_on_shortlist","n_other_speakers","getTopics","topics","topicList","isNull","flattenDeep","topic","getTotalUnread","perSid","per_sid","totalUnread","loadJobBoard","LOAD_JOB_BOARD","loadJobAgreement","LOAD_JOB_AGREEMENT","loadJobEvent","LOAD_JOB_EVENT","loadJobMessages","LOAD_JOB_MESSAGES","markMessagesRead","READ_JOB_MESSAGES","selectJob","pView","JOB_BOARD_SELECT_JOB","NAV_SET_SUB_VIEW","JOB_DETAIL_VIEW","sendJobMessage","SEND_JOB_MESSAGE","sendJobApplication","SEND_JOB_APPLICATION","sortJobs","jobList","sort","j1","j2","date1","date2","a","b","a_ag","b_ag","a_signed","buyer_signed","speaker_signed","b_signed","isBefore","updateJobBoardStore","JOB_BOARD_STORE_UPDATE","updateJobAgreement","JOB_BOARD_UPDATE_AGREEMENT","updateJobDetail","JOB_BOARD_UPDATE_JOB_DETAIL","updateJobMessages","JOB_BOARD_UPDATE_JOB_MESSAGES","MessageActionsFactory","_addMessage","_clearMessages","_setMessage","msg","addMessage","MESSAGE_STORE_ADD","clearMessages","MESSAGE_STORE_CLEAR","setMessage","clearEvent","doSubmitForm","changeEventView","forceRefresh","newView","eventViews","navItem","NAV_STORE_UPDATE","eventView","changeStamp","getTime","changeMainView","mainViews","CLEAR_EVENT_DATA","NAV_CHANGE_MAIN_VIEW","checkForDirty","changeViewCallback","viewDirty","eventDirty","onCancel","callback","clearSubView","NAV_CLEAR_SUB_VIEW","subView","popSubView","NAV_POP_SUB_VIEW","nextEventView","NAV_NEXT_EVENT_VIEW","prevEventView","NAV_PREV_EVENT_VIEW","resetNavigation","NAV_STORE_RESET","setSubView","viewList","toggleDrawer","NAV_TOGGLE_DRAWER","updateNavStore","NoteActionsFactory","saveNote","EVENT_STORE_SAVE_NOTE","selectNote","EVENT_STORE_SELECT_NOTE","NOTE_VIEW","OverlayActionsFactory","updateOverlayStore","OVERLAY_STORE_UPDATE","clearOverlay","OVERLAY_STORE_CLEAR","ProductActionsFactory","deleteProduct","EVENT_STORE_DELETE_PRODUCT","extractSelectedProduct","saveProduct","product","EVENT_STORE_SAVE_PRODUCT","selectProduct","EVENT_STORE_SELECT_PRODUCT","PRODUCT_VIEW","PushActionsFactory","clearNotification","PUSH_STORE_UPDATE","notification","notify","PUSH_STORE_NOTIFY","parseBody","additionalData","hasOwnProperty","register","PUSH_STORE_REGISTER","updatePushStore","SearchActionsFactory","autoSearch","searchTerm","SEARCH_STORE_AUTO_SEARCH","clearSearch","SEARCH_STORE_CLEAR","updateSearchStore","SEARCH_STORE_UPDATE","searchEvents","SEARCH_EVENTS","ServiceActionsFactory","deleteService","EVENT_STORE_DELETE_SERVICE","extractSelectedService","saveService","service","EVENT_STORE_SAVE_SERVICE","selectService","EVENT_STORE_SELECT_SERVICE","SERVICE_VIEW","_extractGroupCodeItem","GENERAL","groupCode","listField","itemList","retItem","clearSpeakerData","CLEAR_SPEAKER_DATA","determineMsm","speakerMode","speakerList","MULTIPLE_SPEAKER_MODE","extractSpeakerProduct","extractSpeakerService","getFeeRange","profile","compact","fee_low","fee_high","isNaN","loadShortProfile","GET_SHORT_PROFILE","selectSpeaker","SPEAKER_INFO_STORE_SELECT_SPEAKER","selectSpeakerBySid","auth","SPEAKER_INFO_STORE_SELECT_SPEAKER_BY_SID","updateShortProfile","SPEAKER_INFO_STORE_UPDATE_SHORT_PROFILE","updateSpeakerInfoStore","SPEAKER_INFO_STORE_UPDATE","StageTimeActionsFactory","deleteStageTime","EVENT_STORE_DELETE_STAGETIME","extractSelectedStageTime","saveStageTime","stageTime","EVENT_STORE_SAVE_STAGETIME","selectStageTime","EVENT_STORE_SELECT_STAGETIME","STAGE_TIME_VIEW","StoreActionsFactory","generateAddId","multiUpdateStart","MULTI_UPDATE_START","multiUpdateStop","MULTI_UPDATE_STOP","TodoActionsFactory","deleteTodo","EVENT_STORE_DELETE_TODO","extractSelectedTodo","getUndo","todo","todoView","saveTodo","EVENT_STORE_SAVE_TODO","selectTodo","EVENT_STORE_SELECT_TODO","TODO_VIEW","setUndo","VIEW_STORE_TODO_SET_UNDO","venueList","saveVenue","EVENT_STORE_SAVE_VENUE","clearSubmitForm","VIEW_STORE_CLEAR_SUBMIT_FORM","VIEW_STORE_DO_SUBMIT_FORM","updateViewStore","VIEW_STORE_UPDATE","toggleKeyboardActive","VIEW_STORE_TOGGLE_KEYBOARD_ACTIVE","VIEW_STORE_TOGGLE_DIRTY","setHeaderText","headerText","Iterable","_toPrintable","obj","isIterable","console","warn","CLEAR_EVENT_ASSOCIATED_DATA","EVENT_STORE_DISCARD_EVENT_CHANGES","EVENT_STORE_MERGE_EVENT_DATA","EVENT_STORE_MERGE_MODIFIED_EVENT","EVENT_STORE_SELECT_EVENT","EVENT_STORE_TOGGLE_DIRTY","EVENT_STORE_UPDATE","LOADING_STORE_HIDE","LOADING_STORE_SHOW","LOADING_STORE_UPDATE","LOGIN_SUCCESS","NAV_CHANGE_EVENT_VIEW","COPY_EVENT","DELETE_EVENT","EMAIL_COWORKERS","GET_SITE_LISTS","LOAD_EVENT","SAVE_EVENT","NAVIGATE_AND_SEARCH","TOGGLE_SWIPE_NAV","TIME_STRING","DATE_TIME_STRING","stamp","getFullYear","convertToBalboaTrunkTimestamp","convertFromBalboaToDate","convertFromBalboaToTime","getHours","convertFromBalboaToTimeString","dateStr","timeStr","dateTimeStr","retMoment","isValid","dateObj","timeObj","dateTimeObj","momentObj","currentMoment","getMinStopTime","stopMoment","isBalboaDate","parseNum","Immutable","Record","order","CALENDAR_VIEW","NavItemModel","DASHBOARD_VIEW","LOGIN_VIEW","NEW_EVENT_VIEW","SEARCH_VIEW","SETTINGS_VIEW","JOBS_VIEW","CONTACTS_VIEW","CUSTOM_VIEW","DETAILS_VIEW","LIBRARY_VIEW","MISC_VIEW","SERVICES_VIEW","TODO_LIST_VIEW","TRAVEL_VIEW","JOB_VIEW","FORGOT_PASSWORD_VIEW","jobViews","JOB_BOARD_VIEW","LEADS_OFFERS_VIEW","CONFIRMED_EVENTS_VIEW","JOB_APPLY_CONFIRMATION_VIEW","JOB_APPLY_VIEW","LEAD_OFFER_DETAIL_VIEW","PAYOUT_DETAIL_VIEW","getFooterNavItems","includeSearch","views","Platform","omit","getSolutionTreeEventViews","set","getEspeakersMainViews","getSolutionTreeMainViews","getJobBoardViews","blueOne","whiteOne","blackTwo","appBackgroundColor","primaryColor","accentColor","fontColor","mutedFontColor","calendarFontColor","foregroundColor","darkBackgroundColor","callColor","coachingColor","confirmedColor","confirmedFontColor","dailyColor","leadColor","leadFontColor","heldColor","heldFontColor","heldPersonalFontColor","closedColor","closedFontColor","postponedColor","postponedFontColor","travelColor","overdueColor","errorBackgroundColorLighter","errorFontColor","warningBackgroundColor","warningFontColor","infoBackgroundColor","infoFontColor","successBackgroundColor","successFontColor","todoCompleteColor","todoOverdueColor","footerIconColor","footerSelectedIconColr","offerChipColor","offerChipFontColor","getStatusColor","getBalboaUrl","getBuildName","getVersionNumber","hasPush","isAndroid","isEspeakers","isIos","isIpadPro","isMobile","isPhoneGap","isProduction","isMobileLib","VERSIONS","isPhone","isTablet","process","toLower","main","PushNotification","browser","tablet","isIphone","navigator","userAgent","width","height","greaterThan","small","device","lessThan","platform","createElement","IconButton","AddIcon","AirplaneModeActiveIcon","ArrowBackIcon","ArrowDropDownCircleIcon","ArrowDropDownIcon","ArrowForwardIcon","AssignmentIcon","AttachMoneyIcon","BusinessIcon","CardTravelIcon","CheckIcon","ChevronLeftIcon","ChevronRightIcon","ContactsIcon","ContentCopyIcon","CreateIcon","DashboardIcon","DateRangeIcon","DeleteIcon","DetailsIcon","DirectionsCarIcon","EditIcon","EmailIcon","ErrorIcon","EventNoteIcon","ExpandLessIcon","ExpandMoreIcon","FlightIcon","getIcon","getElement","icon","btnProps","elProps","getFormIcon","top","padding","margin","ActivityCardFactory","_generateAvatar","_generateSecondaryText","_goToEvent","createClass","PropTypes","connect","ListItem","AutoShouldUpdateMixinFactory","selectEvent","activity","AutoShouldUpdateMixin","propTypes","object","isRequired","displayName","mixins","render","leftAvatar","primaryText","secondaryText","mapStateToProps","ContactCardFactory","_buildHeadingMap","_deleteHandler","_editHandler","ListCardFactory","contact","addressString","buildLocationString","ListCard","bool","propsPriority","compareState","subHeadingCollection","headingMap","groupCodes","leftAvatarText","flatMap","s","EventHeaderCardFactory","BaseHeaderCardFactory","BaseHeaderCard","heading","stageTimes","venues","firstStartTime","slice","JobCardFactory","_generateLocationText","_goToJob","Chip","DELIVERY_METHOD_ICONS","avIcon","deliveryMethod","allowNewApplicants","dmIcon","fontSize","allowNewApplications","chipStyles","lineHeight","paddingLeft","opacity","flexWrap","i","labelStyle","secondaryTextLines","LeadOfferCardFactory","_generateStatusChip","avatar","labelColor","LibraryFileCardFactory","_buildAvatar","_buildUserAndDate","_fileDownloadHandler","_getFileTypeIcon","file_type_icon_map","pdf","ps","txt","doc","docx","odt","rtf","eml","ppt","pptx","odp","xls","xlsx","ods","mp3","wma","wav","png","gif","jpg","bmp","mp4","mpg","mpeg","wmv","mov","avi","vob","tgz","tar","rar","file","className","uploadedby","postdate","url","window","open","file_name","parts","exec","extension","replace","toLowerCase","MainHeaderCardFactory","mainView","MessageCardFactory","NoteCardFactory","isSystem","stageDate","appliedStyle","maxWidth","WebkitLineClamp","WebkitBoxOrient","overflow","paddingTop","whiteSpace","textOverflow","PipelineCardFactory","_determineBackgroundColor","_searchHandler","pipelineData","string","ProductCardFactory","shift","SearchResultCardFactory","_actionEventDetail","_buildLocation","MultiLineSecondaryTextFactory","MultiLineSecondaryText","bgColor","fill","textItems","organization","dataEid","ServiceCardFactory","flagList","dueDate","formattedDueDate","flag","SpeakerCardFactory","_selectHandler","leftAvatarIcon","StageTimeCardFactory","isPersonal","avchecktime","avDate","formattedAvChecktime","StoryCardFactory","_completeHandler","_generateCheckbox","Checkbox","story","storiesToldList","toldId","matchedId","checked","onCheck","leftCheckbox","SubHeaderCardFactory","headingStyle","TipCardFactory","_actionTipOfTheDay","SectionHeaderFactory","SectionHeader","tip","TodoCardFactory","_generateStyle","_goToActions","sessionData","selectedTodo","newStatus","updateObj","statusdate","assignedto","toUpperCase","canComplete","today","todoDate","TotalCardFactory","total","oneOfType","number","TravelCardFactory","TravelFlightCardFactory","TravelGroundCardFactory","TravelHotelCardFactory","TravelFlightCard","TravelGroundCard","TravelHotelCard","UpcomingConfirmedCardFactory","Subheader","children","borderBottom","FooterNavFactory","_determineSelected","_onMainNavChange","BottomNavigation","Paper","FooterNavItemFactory","FooterMessageInputFactory","FooterNavItem","FooterMessageInput","indexOf","keyboardActive","currentSubView","footerItems","zDepth","selectedIndex","viewItem","childNavItem","currentNavItem","marketplaceOnly","futureOnly","HeaderFactory","_backHandler","_determineActionIcon","_determineActionLabel","_determineActions","_determineLabel","_determineNavAction","CSSTransistorFactory","Toolbar","ToolbarGroup","IconMenu","MenuItem","MainHeaderCard","SubHeaderCard","action","SUBMIT","MORE_VERTICAL","DELETE","primaryActions","overflowActions","totalActions","maxActions","onRequestChange","iconButtonElement","targetOrigin","horizontal","vertical","anchorOrigin","includeDrawer","onReturn","justifyContent","firstChild","flexGrow","flexShrink","flexBasis","lastChild","minWidth","LinkCollapseAreaFactory","_advancedClickHandler","LinkFactory","_advancedOptionsShowing","refs","cssTransistor","performLeave","performEnter","CSSTransistor","Link","hide","linkTitle","ref","transitionName","transitionEnterTimeout","transitionLeaveTimeout","overflowY","overflowX","CANCEL","EXCHANGE","RAISED","FLAT","ICON","ACTION","_buildMenu","_buildSecondaryText","leftAvatarElement","leftAvatarBackgroundColor","styleOverride","touch","tooltip","tooltipPosition","rightIconButton","leftIconElement","secondaryTextElement","arrayOf","shape","element","func","array","additionalComparison","nextState","avatarObj","secondaryTextObj","menuObj","builtProps","omitList","k","extraProps","innerDivStyle","ValidationMixin","phonePlus","time","condition","validator","shouldValidate","call","blankOr","FormLoadingFactory","showStatic","componentDidMount","setTimeout","fontWeight","position","textAlign","icons","EventInfoCardFactory","_determineStatusColor","IconLabelFactory","IconLabel","mapKeys","minHeight","flexDirection","marginBottom","_compareObjectAndPriorities","_comparePropsAndPriorities","_compareStateAndPriorities","_determineEquals","deepEqual","statePriority","priorities","equals","shouldComponentUpdate","shouldUpdate","prop","nextBrowser","currentBrowser","inject","val","ViewHeaderFactory","textTransform","DisplayFieldFactory","displayText","displayTextStyle","ActivityListFactory","Divider","ActivityCard","dashboard","filteredList","activityList","CalendarEventListFactory","_generateListDataSortedResults","SearchResultCard","calData","calDetails","dayData","selectedDay","uniqBy","reject","detail_ids","detail_id","detail","desc","sortedResults","results","dailyMap","resultA","resultB","stampA","stampB","convertFromISO8601","card","header","title","JobListFactory","JobCard","jobs","sortedList","LeadOfferListFactory","_buildEmptyMessage","MessageModel","LeadOfferCard","MessageCard","MessageListFactory","messages","NotesListFactory","_generateNoteListData","_isSystemNote","Toggle","NoteCard","showSystemNotes","notesList","toggledNoteId","expandAllNotes","fullNotesList","filteredNotesList","showNotesHelp","toggled","onToggle","PipelineListFactory","_generatePipelineData","pipeline","PipelineCard","ProductListFactory","ProductCard","TotalCard","productList","productTotal","qtyFloat","priceFloat","qty","parseFloat","SearchListFactory","search","dayCount","get_n_days_in_month","range","day","noResults","lastDate","formattedLastDate","dateChanged","ServiceListFactory","ViewHeader","ServiceCard","serviceList","serviceTotal","StageTimeListFactory","StageTimeCard","stageTimeList","TravelListFactory","_buildSortedTravelList","flightList","groundList","hotelList","travelList","flight","leg","ground","hotel","subItem","TravelCard","UpcomingConfirmedListFactory","UpcomingConfirmedCard","upcomingList","u","ContactFormFactory","_actionDeleteContact","_buildContactSchema","FormMixin","PanelFactory","selectedContact","email","mobile","cname","iconTel","iconMailTo","contnotes","currentProps","Panel","FormHelperMixin","FinalFormMixin","onSubmit","SubViewMixin","buildSchema","getInitialValues","initialValues","isBoolean","onFormChanged","Form_areChangesMade","headingText","headingIconClass","TravelFormFactory","_buildNotesSchema","nearestAirport","travelAgent","travelNotes","EventMixin","AddNoteFormFactory","showIcon","required","selectedNote","values","EmailCoworkersFormFactory","_generateCoworkerCheckboxes","schema","worker","subject","ProductFormFactory","_actionDeleteProduct","_buildProductSchema","selectedProduct","groupcode","qtysold","integer","qtyshipped","priceeach","currency","updatedState","ServiceFormFactory","_actionDeleteService","_buildServiceSchema","selectedService","amount","amountType","LinkCollapseArea","amountFree","amountActual","StageTimeFormFactory","_actionDeleteStageTime","_avCheckDateRequired","_generateVenueOptions","selectedStageTime","venue_to_string","VenueMixin","avcheckdate","room","venueid","formStageTime","venueValues","TodoFormFactory","_actionDeleteTodo","_buildTodoSchema","_generateAssignedToOptions","coworkerList","coworker","eventForms","ContactsFormFactory","CustomFormFactory","DetailsFormFactory","MiscFormFactory","ServicesFormFactory","TodoListFormFactory","subForms","mainForms","ForgotPasswordFormFactory","LoginFormFactory","NewEventFormFactory","REVIEWED","clearEventAssociatedData","emailCoworkers","selectedField","identifier","defaultValue","selectedItem","extractSelectedFile","fileId","fileList","selectedFile","fixCustomFields","Customfields","contents","isObject","sidMap","mergeEventData","prepareContactsFormData","form","formData","ccDate","ccTime","ccDateTime","prepareCustomFormData","prepareDetailsFormData","startsWith","prepareMiscFormData","nonCSP","saveEvent","preventDefault","stopImmediatePropagation","err","updateEventStore","MessageContainerFactory","boxStyle","textStyle","getBackgroundColor","getType","baseBoxStyle","borderLeft","MUIIconInputFactory","_buildIcon","href","iconLink","paddingBottom","ContinueCancelDialogFactory","_continueHandler","_cancelHandler","Dialog","FlatButton","dialogItem","widgetId","continueText","cancelText","displayMode","animate","primary","client","AddButtonFactory","_singleAction","_hideActions","_toggleActions","_actionsVisible","addButtonTransistor","_determineClassName","React","currentClassSuffix","newChildren","Children","cloneElement","SESSION_DATA","SELECTED_SPEAKER","PUSH_REG_ID","SINGLE_SPEAKER_MODE","PayoutDetailViewFactory","Table","TableBody","TableRow","TableRowColumn","TableFooter","getCurrency","DisplayField","selectedJob","mpAgreement","feeRows","footerRowStyle","borderTop","verticalAlign","dollarStyle","currencyStyle","tableStyle","borderSpacing","rowStyle","columnStyle","displayRowCheckbox","selectable","format_number","groupBy","group","adjustForCheckbox","selected","LocalStorageServiceFactory","_localStorage","_hasLocalStorage","localStorage","fetchItem","parser","retval","getItem","fetchItems","fetchedItems","storeItem","JSON","stringify","setItem","storeItems","removeItem","removeItems","clear","showLoading","hideLoading","_generateLeftAvatar","avatarElement","float","subHeadingStyle","baseHeadingStyle","baseSubHeadingStyle","baseHeaderCardStyle","JobInfoCardFactory","Jed","locale","lang","translations","i18n","opts","context","translate","fetch","gettext","LoginViewFactory","_forgotHandler","_loginHandler","_debugHandler","RadioServiceMixin","MessageSnacksFactory","ResponsiveLogFactory","login","success","response","failure","error","ForgotPasswordForm","LoginForm","MessageSnacks","RadioService_setup","on","waiting","succeeded","failed","forgotPasswordSelected","_cancelTouchHandler","MUIButtonGroupFactory","ButtonGroup","autoFocus","buttons","password","ContactsViewFactory","_addContactHandler","ContactListFactory","AddButton","ContactList","ContactsForm","EventInfoCard","FormLoading","mergedEvent","merge","expandAllContacts","toggledContactId","_buildClientCallSchema","ccTimezone","ccInitiator","ccNotes","CustomViewFactory","newContents","CustomForm","_buildLongSchema","_buildShortSchema","foundField","longList","find","shortList","contentMap","DetailsViewFactory","_addNoteHandler","_addStageTimeHandler","DetailsForm","NotesList","StageTimeList","toggledStageTimeId","expandAllStageTimes","_buildRepSchema","_buildZoomSchema","_buildBureauSchema","_buildEventDetailsSchema","_generateBureauOptions","_generateStatusOptions","_generatePdRepOptions","_generateSalesRepOptions","_generateProjectManagerOptions","companyData","pd_rep_id","sales_rep_id","project_manager_id","zoomUrl","bureauMap","optionMap","optionBuilder","bureauNotes","meetingname","authedUserSession","has_pro","toInt","arrivalNotes","coaching","pd_reps","pd_rep","sales_reps","sales_rep","pms","pm","bureaus","bureau","eventStatuses","Form_onSubmt","JobEventViewFactory","JobOfferSectionFactory","JobOfferSection","LibraryViewFactory","LibraryListFactory","LibraryList","MiscViewFactory","MiscForm","_buildCSPSchema","_buildMiscSchema","_generateSourceOptions","_generateSpeechTitleOptions","StoryListFactory","getIn","StoryList","cspDivision","speechTitle","dress","audienceSize","source","publicInvited","offerPending","sourceList","presentationList","presentation","ServicesViewFactory","ServicesForm","_addProductHandler","_addServiceHandler","_buildPackagesSchema","_buildServicesSchema","_determinePayoutView","_generateLink","ProductList","ServiceList","PayoutDetailView","MessageContainer","depositPercent","productQtyBoxes","productShipper","shipper","productTrackingNumbers","numbers","toggledServiceId","toggledProductId","expandAllServices","expandAllProducts","TodoListViewFactory","_addTodoHandler","TodoListFactory","TodoList","TodoListForm","_buildTodoListSchema","_generateTodoOptions","selectTodoList","todoList","TravelViewFactory","TravelForm","TravelList","expandAllTravel","toggledTravelId","formId","_generateTodoListOptions","todoLists","isList","buildEventDetailsSchema","personal","initValues","todolists","EVENT_STATUSES","held","confirmed","canceled","lead","zimbra","postponed","closed","EVENT_STATUSES_by_num","fromPairs","toPairs","pair","reverse","EVENT_STATUS_PRIORITY","ConfirmedEventsViewFactory","currentSelectedSpeaker","JobApplyViewFactory","JobApplyFormFactory","JobApplyForm","agreement","JobApplyConfirmationViewFactory","fontStyle","src","JobBoardViewFactory","JobList","JobDetailViewFactory","RaisedButton","ChipperFactory","MeetingNotesFactory","getEventPresenterTypeText","JobInfoCard","MeetingNotes","Chipper","applyClickHandler","_getEventType","_getFormat","dm","location","dmObj","language","DisplayList","formatStr","universal","languages","speaker_id","commissionDetails","chipLabels","fullWidth","JobMessagesViewFactory","JobMessageCardFactory","JobMessageCard","getHeaderText","buyerName","componentDidUpdate","prevProps","prevState","prevJobDetail","nextJobDetail","updateHeaderText","messageA","messageB","createdA","createdB","is_you","sender_speaker_id","senderName","isYou","lastItem","LeadOfferDetailViewFactory","ActionDescriptionFactory","JobButtonFactory","JobButton","ActionDescription","buildStepContent","sharedDisplayText","styles","chip","wrapper","buildChip","nowItem","nextItem","updateHeaderActionsOverride","btnList","clickHandler","btnLabel","secondary","LeadsOffersViewFactory","LeadOfferList","MUIStaticFactory","MUIIconInput","PushModel","registrationId","selectorYear","calendarData","calendarDetails","companyLists","upcoming","lastUpdated","dirty","showMessages","JobModel","sids_connected_to_stripe","counter","showDrawer","onBack","deepSearch","includeCanceled","onlyDatelessEvents","TodoViewModel","doSubmitFormCallback","todoUndo","Balboa","RadioService","SharedParams","calls","api","successResponse","failureResponse","init","message_ids","list","receiver_opened","ids","speaker_ids","LoadingScreenFactory","CircularProgress","left","_generateCountryOptions","_generateStateOptions","countryList","filteredStateList","_updateHeaderText","noHeader","BottomNavigationItem","manualStyle","alignItems","iconStyle","useLayerForClickAway","DrawerHeaderCardFactory","theme","oneOf","appliedTextStyle","shortTime","deets","formattedTime","unshift","expandCollapseEnabled","expanded","actionIconClass","actionClick","bodyClass","SplashScreenFactory","_processButton","button","_determineText","ContactCard","contactList","intval","LibraryFileCard","_generateStoriesTold","storyList","specificContentAreas","toArray","StoryCard","TodoCard","t","ConfirmedEventsDialogFactory","ContinueCancelDialog","DeleteConfirmationDialogFactory","ExitDirtyConfirmationDialogFactory","UndoConfirmationDialogFactory","stringifyObject","Ajax","crypto","LoginServiceFactory","_sha512","baseOptions","method","shasum","createHash","update","digest","body","deviceType","plaintext_password","pushdevicetype","pushdevicetoken","post","responseText","xhr","responseData","parse","MUIDrawerFactory","Drawer","DrawerItemFactory","DrawerHeaderCard","_changeView","_determineLeftIcon","_determineLeftAvatar","staticLayout","docked","containerStyle","isOpen","buildLocation","_determineEventId","deliverymethod","Venue","deliverymethods","offerAcceptedPlus","terms","SpeakerListFactory","SpeakerCard","STORAGE","text_content","DashboardViewFactory","ActivityList","PipelineList","TipCard","UpcomingConfirmedList","company_id","CalendarViewFactory","_legendClickHandler","_loadCalendarData","_todayClickHandler","CalendarLegendDialogFactory","EventCalendarFactory","CalendarLegendDialog","EventCalendar","dialog","speakerSelected","speakerMismatch","missingCalendarData","showWidget","onClose","NewEventViewFactory","Stagetime","starttime","stoptime","newEvent","companyId","todolistids","listid","todolist","NewEventForm","SearchViewFactory","SearchFormFactory","MessageList","SearchForm","SearchList","excludeEventTypes","hasResults","zIndex","bottom","SettingsViewFactory","_logoutTouchHandler","_refreshDataTouchHandler","ResponsiveLog","versionNumber","PACKAGE_JSON_VERSION","SpeakerList","ListMessagesFactory","_determineStyle","Snackbar","maxHeight","boxShadow","contentStyle","bodyStyle","autoHideDuration","onRequestClose","onActionTouchTap","AuthedUserSessionFactory","packages","STARTER","PLUS","PROFESSIONAL","PRO","balboa","getSIDsAtAccessLevels","getSIDsNotAtAccessLevels","getSIDsAtPackageLevel","getEventSIDsNotAtAccessLevel","levels","permissions","access","level","level_num","mapValues","sids_at_level","MY_USERNAME","balboa2_ical_token","is_logged_in","getSIDsCanViewDashboard","eventOnlyHasAccessLevels","DialogItemModel","module","exports","ContactStoreFactory","_deleteContact","_saveContact","_selectContact","deleteListItem","updateList","NoteStoreFactory","_saveNote","_selectNote","ProductStoreFactory","_deleteProduct","_saveProduct","_selectProduct","ServiceStoreFactory","_deleteService","_saveService","_selectService","StageTimeStoreFactory","_deleteStageTime","_saveStageTime","_selectStageTime","TodoStoreFactory","_deleteTodo","_saveTodo","_selectTodo","VenueStoreFactory","_saveVenue","ArrayDispatchMiddleware","next","MainViewFactory","MuiThemeProvider","ThemeOverride","JobBoardService","NavigatorFactory","PushManagerFactory","convertBalboa3EventToJSEvent","install","_authHandler","_determineSpeaker","_determineView","_failToLogin","_initializeBalboa","_storeLoadedEvent","_verifyCompanyListsHandler","_verifyDisplayListsHandler","_verifyJobBoardHandler","LoadingScreen","LoginView","Navigator","PushManager","SplashScreen","collection","determinedSpeaker","updatedSpeakerInfo","balboa_prefix","extend_with_params","displayMessage","convertedEvent","loading","overlay","defaultView","shortProfile","RadioService_Radio_setup","splashscreen","prevEvent","currentEid","prevEid","muiTheme","darkBlack","fade","lightBaseTheme","getMuiTheme","palette","disabledColor","appBar","textColor","toolbar","bottomNavigation","selectedColor","selectedFontSize","unselectedFontSize","flatButton","primaryTextColor","floatingActionButton","raisedButton","checkbox","checkedColor","subheader","textField","focusColor","disabledTextColor","stepper","iconColor","MUIFieldFactory","MUIField","layout","row","TextField","focus","multiLine","_determineNextView","_determinePrevView","_determineScroll","_getCurrentViewData","_shelfChangeHandler","_shouldShowMessages","LayoutManagerFactory","DialogGroupFactory","RadioMixin","AddNoteViewFactory","CalendarEventsViewFactory","ContactViewFactory","EmailCoworkersViewFactory","ProductViewFactory","ServiceViewFactory","StageTimeViewFactory","TodoViewFactory","TodoListView","CalendarView","ContactsView","CustomView","DashboardView","DetailsView","JobEventView","LibraryView","MiscView","NewEventView","SearchView","ServicesView","SettingsView","TravelView","AddNoteView","CalendarEventsView","ContactView","EmailCoworkersView","ProductView","ServiceView","StageTimeView","TodoView","ConfirmedEventsView","JobApplyView","JobApplyConfirmationView","JobBoardView","JobDetailView","JobMessagesView","LeadOfferDetailView","LeadsOffersView","LayoutManager","DialogGroup","mainViewCycle","eventViewCycle","viewCycle","currentMainView","currentEventView","enabled","prevNav","document","scrollTop","shelfChangeHandler","_determineLayout","EventMobileLayoutFactory","EventTabletLayoutFactory","MainMobileLayoutFactory","MainTabletLayoutFactory","EventMobileLayout","EventTabletLayout","MainMobileLayout","MainTabletLayout","hide_search","LegendCardFactory","avatarSize","avatarStyle","_selectorToggleHandler","_weeksHaveMoreThanOneSID","CalendarDayFactory","CalendarHeaderFactory","MonthSelectorFactory","showSelector","cal_details","cal_data","weeks","da_one_sid","some","week","day_data","CalendarHeader","CalendarDay","MonthSelector","showEvents","currentData","build_calendar_weeks","isMultiSidMode","onSelectorClose","onSelectorOpen","d","get_day_of_week","_showDayEvents","out_of_month","dayStatus","baseDecoratorStyle","borderRadius","tdAppliedStyle","spanAppliedStyle","appliedCallStyle","background","right","appliedDailyStyle","appliedTravelStyle","appliedCoachingStyle","sta","psnl","personalFontColor","fader","border","decorators","decorator","_nextMonthHandler","_prevMonthHandler","colSpan","get_month_name","_generateMonths","_monthChangeHandler","_nextYearHandler","_prevYearHandler","_yearChangeHandler","DropDownMenu","rows","monthCount","colCount","maxYear","nextYear","minYear","prevYear","minMonth","getMonth","maxMonth","ddValue","appliedMonthStyle","orderCount","_autoSearch","_buildAdvancedSearchFormSchema","_buildSearchFormSchema","_clearSearchFocus","_hasExistingSearch","_searchClickHandler","_toggleAutoFocus","focusObj","optional","noIcon","searchAdvancedOptions","isFocused","focusStamp","rounded","feeRange","floatingLabelFixed","floatingLabelStyle","est_fee","hintText","helperText","will_do","need_info","chipStyle","chipLabelStyle","chipLabel","scrollToBottom","el","scrollIntoView","behaviour","is_unread","created","metaStyle","borderColor","fromNow","initiated_by_speaker","CopyEventConfirmationDialogFactory","SpeakerSelectorDialogFactory","ConfirmedEventsDialog","CopyEventConfirmationDialog","DeleteConfirmationDialog","ExitDirtyConfirmationDialog","SpeakerSelectorDialog","UndoConfirmationDialog","Provider","ReactReduxContext","Consumer","ctx","modal","store","_determineRequestedView","_errorHandler","_goHandler","_isJobEvent","_notificationHandler","_registrationHandler","_speakerSelected","requestedView","requestedSpeaker","requestedEvent","jobView","subViewList","flags","bodyData","app","currentPush","nextPush","showAction","AuthenticateService","CalendarService","EventService","SearchService","formatdates","onlysections","include_details","exclude_event_types","convertJSEventToBalboa3Event","event_json","confirm","target_sid","copylists","searchterm","deepsearch","marketplaceonly","futureonly","datelessonly","AuthModel","CompanyDataModel","DashboardModel","DisplayDataModel","EventModel","LoadingModel","OverlayModel","SearchModel","SpeakerInfoModel","ViewModel","combineReducers","responsiveStateReducer","_logout","_updateStore","_loadSessionFromStorage","updatedAuth","AuthStoreFactory","_clearData","_mergeCalendarData","_nextMonth","_prevMonth","_selectDay","_updatePeriod","CalendarModel","_initialState","newMonth","newYear","updatedModel","CalendarStoreFactory","CompanyDataStoreFactory","actionlist","DashboardStoreFactory","_closeDialog","DialogModel","DialogStoreFactory","DisplayDataStoreFactory","_discardEventChanges","_isCustomFieldsEmpty","_mergeEventData","_mergeModifiedEvent","_selectEvent","_toggleDirty","customFields","updatedEvent","subStoreSpec","listName","listIdentifier","updatedList","updateIndex","mergedItem","subStoreList","EventStoreFactory","JobBoardModel","_selectJob","_updateJobAgreement","_updateJobDetail","_updateJobMessages","updateModel","mergeDeep","JobBoardStoreFactory","_hideLoading","_showLoading","MessageStoreFactory","_addSubView","_changeEventView","_changeMainView","_clearSubView","_navigateToEvent","_nextEventView","_popSubView","_prevEventView","_reset","_setSubView","_toggleDrawer","NavModel","keys","pop","NavStoreFactory","_clearStore","OverlayStoreFactory","_notify","_register","PushStoreFactory","_clearResults","SearchStoreFactory","_selectSpeaker","_selectSpeakerBySid","_updateShortProfile","_loadSpeakerFromStorage","per","session_speaker","SpeakerInfoStoreFactory","_clearDoSubmitForm","_setDoSubmitForm","_setUndo","_toggleKeyboardActive","updatedTodoUndo","ViewStoreFactory","MUICheckboxFactory","_onChange","isChecked","getValue","labelPosition","DatePicker","MUIDateFactory","_dateFormatter","firstDayOfWeek","formatDate","autoOk","floatingLabelText","errorText","nil","dialogContainerStyle","MUITextFactory","hasFocus","currentField","nextField","isSame","p","blur","MUIRadioGroupFactory","_showDescription","RadioButton","RadioButtonGroup","option","valueSelected","MUISelectFactory","SelectField","rInst","allowClear","MUITimeFactory","TimePicker","dialogBodyStyle","dialogStyle","MUIToggleFactory","isToggled","AutoComplete","MUIAutoCompleteFactory","searchText","opt","read_only","openOnFocus","maxSearchResults","dataSource","onNewRequest","MUIFilteredSelectFactory","_buildFilteredOptions","_closeHandler","_filterChangeHandler","_getValueFromOptions","_showDialog","dialogShown","filterTerm","storedOptions","found","filteredOptions","onFocus","autoScrollBodyContent","types","hidden","radioGroup","select","textarea","toggle","autocomplete","filteredSelect","Object","forEach","setInputType","existingNote","datetime","enteredby","AddNoteForm","CalendarEventList","ContactForm","coworkers","EmailCoworkersForm","ProductForm","ServiceFlagsModel","flagsAsMap","updatedFlagMap","updateFlagMapIterator","currentFlag","done","due_ISO8601","returnISO8601","ServiceForm","StageTimeForm","TodoForm","_determineShowDrawer","Header","FooterNav","MUIDrawer","drawerNav","close","_swipeHandler","Hammer","deltaX","borderRight","onSwipe","ReactDOM","createResponsiveStoreEnhancer","applyMiddleware","compose","createStore","AppStore","createLogger","hasDevTools","__REDUX_DEVTOOLS_EXTENSION__","responsiveStoreEnhancer","performanceMode","middlewares","logger","collapsed","getState","logEntry","duration","colors","stateTransformer","newState","MainView","getElementById","LegendCard"],"mappings":"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","file":"static/js/main.b6c5db20.chunk.js","sourcesContent":["/**\n * Generates a CardMixin component.  For shared functionality between Card\n * components.\n *\n * @param {object} spec - Container for named parameters\n * @property {array} spec.fields - (optional) Collection of field objects you want to be auto-mapped\n * @property {function} spec.additionalMapFunc - (optional) Custom function for additional mapping\n * @returns {object}\n * @constructor\n * @mixin\n */\nconst CardMixinFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateToolsFactory = require('../util/DateTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    let _fields = spec.fields;\n    let _additionalMapFunc = spec.additionalMapFunc;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildDataItems;\n    let _buildHeadingMap;\n    let _buildMenuItem;\n    let _buildMenuItems;\n    let _extractHeadings;\n\n    /**\n     * Generates the dynamic data-* attributes based on provided props\n     *\n     * @param {object} props\n     * @returns {object}\n     * @private\n     */\n    _buildDataItems = (props) => {\n        const {\n            dataType,\n            dataItems\n        } = props;\n\n        let dataTags = {};\n\n        if (dataType) {\n            dataTags['data-type'] = dataType;\n        }\n\n        if (dataItems && _.isArray(dataItems)) {\n            _.each(dataItems, (data) => {\n                dataTags = _.assign(dataTags, data);\n            });\n        }\n\n        return dataTags;\n    };\n\n    /**\n     *\n     * @param {Record} record\n     * @param {array} fields\n     * @property {string} field.key\n     * @property {string} field.iconClass\n     * @property {boolean} field.isDate\n     * @property {function} field.labelFunc - (optional) Function to return a custom label string\n     * @property {function} field.emptyFunc - (optional) Function to do a custom empty check\n     * @param {object} inst\n     * @param {function} additionalMapFunc\n     * @returns {object}\n     * @private\n     */\n    _buildHeadingMap = (spec) => {\n        let {\n            record,\n            fields,\n            inst,\n            additionalMapFunc\n        } = spec;\n        let map = {};\n        let value;\n\n        fields = fields || _fields;\n        additionalMapFunc = additionalMapFunc || _additionalMapFunc;\n\n        if (!fields) {\n            return null;\n        }\n\n        _.map(fields, (field) => {\n            value = record.get(field.key);\n\n            let notEmpty = false;\n\n            if (_.isFunction(field.emptyFunc)) {\n                notEmpty = field.emptyFunc(value);\n            }\n            else {\n                if (_.isNumber(value) && value > 0) {\n                    notEmpty = true;\n                }\n                else if (_.isString(value) && value.length > 0) {\n                    notEmpty = true;\n                }\n                else if (_.isDate(value)) {\n                    notEmpty = true;\n                }\n                else {\n                    notEmpty = !_.isEmpty(value);\n                }\n            }\n\n            if (notEmpty) {\n\n                if (field.isDate) {\n                    value = DateTools.convertFromBalboaToDateString(value);\n                }\n\n                map[field.key] = {\n                    subHeading: (field.labelFunc ? field.labelFunc(value) : value),\n                    iconClass: field.iconClass\n                };\n            }\n        });\n\n        if (_.isFunction(additionalMapFunc)) {\n            map = _.assign(map, additionalMapFunc({\n                record: record,\n                inst: inst,\n                map: map\n            }));\n        }\n\n        return map;\n    };\n\n    /**\n     *\n     * @param item\n     * @param props\n     * @returns {*}\n     * @private\n     */\n    _buildMenuItem = (item, props, inst) => {\n        if (item === 'expand') {\n            if (inst.state.showDetails || inst.props.showDetails) {\n                return {\n                    label: getText('Collapse'),\n                    leftIcon: 'expand-less',\n                    onClick: (e) => {\n                        stopProp(e);\n\n                        inst.setState({\n                            showDetails: false\n                        });\n\n                        if (_.isFunction(props.onCollapse)) {\n                            props.onCollapse();\n                        }\n                    }\n                };\n            } else {\n                return {\n                    label: getText('Expand'),\n                    leftIcon: 'expand-more',\n                    onClick: (e) => {\n                        stopProp(e);\n\n                        inst.setState({\n                            showDetails: true\n                        });\n\n                        if (_.isFunction(props.onExpand)) {\n                            props.onExpand();\n                        }\n                    }\n                };\n            }\n        } else if (item === 'edit') {\n            return {\n                label: getText('Edit'),\n                leftIcon: 'edit',\n                onClick: (e) => {\n                    stopProp(e);\n\n                    if (_.isFunction(props.onEdit)) {\n                        props.onEdit();\n                    }\n                }\n            };\n        } else if (item === 'delete') {\n            return {\n                label: getText('Delete'),\n                leftIcon: 'delete',\n                onClick: (e) => {\n                    stopProp(e);\n\n                    if (_.isFunction(props.onDelete)) {\n                        props.onDelete();\n                    }\n                }\n            };\n        }\n    };\n\n    /**\n     *\n     * @param items\n     * @param props\n     * @returns {Array}\n     * @private\n     */\n    _buildMenuItems = (items, props, inst) => {\n        let menuItems = [];\n        let menuItem;\n\n        _.each(items, (item) => {\n            menuItem = _buildMenuItem(item, props, inst);\n\n            if (menuItem) {\n                menuItems.push(menuItem);\n            }\n        });\n\n        return menuItems;\n    };\n\n    /**\n     *\n     * @param map\n     * @param prioritizedFields\n     * @param limit\n     * @returns {Array}\n     * @private\n     */\n    _extractHeadings = (map, prioritizedFields, limit) => {\n        let count = 0;\n        let headings = [];\n        limit = limit || prioritizedFields.length;\n\n        _.map(prioritizedFields, (field) => {\n            if (_.has(map, field) && count < limit) {\n                headings.push(map[field]);\n                count += 1;\n            }\n        });\n\n        return headings;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        buildDataItems: _buildDataItems,\n        buildHeadingMap: _buildHeadingMap,\n        extractHeadings: _extractHeadings,\n        getMenuItems: _buildMenuItems,\n\n        getInitialState() {\n            return {\n                showDetails: false\n            };\n        },\n\n        /**\n         * Invoked once and cached when the class is created. Values in\n         * the mapping will be set on this.props if that prop is not\n         * specified by the parent component\n         *\n         * @returns {object}\n         */\n        getDefaultProps() {\n            return {\n                showDetails: false\n            };\n        }\n    };\n}\n\nexport default CardMixinFactory;","/**\n * Generates a EventMixin component.  For shared functionality between Event view\n * components.\n *\n * @param {object} spec - Container for named parameters\n * @returns {object}\n * @constructor\n * @mixin\n * @mixes ViewMixin\n */\nconst EventMixinFactory = (spec = {}) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const {\n        radio\n    } = require('react-pubsub-via-radio.js');\n    const {\n        is,\n        fromJS\n    } = require('immutable');\n\n    const IconMap = require('../theme/IconMap');\n    const mainTheme = require('../theme/mainTheme').default;\n    const Avatar = require('material-ui/Avatar').default;\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Mixins\n    const ViewMixinFactory = require('./ViewMixin').default;\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Platforms\n    const {isSolutionTree} = require('../util/Platform').default;\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        showCopyEventConfirmation,\n        showDeleteConfirmation,\n        showUndoConfirmation\n    } = DialogActionsFactory({});\n    const {\n        copyEvent,\n        deleteEvent,\n        discardEventChanges,\n        isMarketPlaceEvent,\n        mergeModifiedEvent,\n        stopProp,\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        getMyInfo\n    } = JobBoardActionsFactory();\n    const {\n        addSubView,\n        getCurrentSubView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const {\n        prepareFormDataOverride\n    } = spec;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _actionCopyEvent;\n    let _actionDeleteEvent;\n    let _actionEmailCoworkers;\n    let _buildFormDirtyActions;\n    let _buildHeaderActions;\n    let _confirmHandler;\n    let _discardHandler;\n    let _prepareFormData = prepareFormDataOverride;\n    let _submitHandler;\n    let _updateHeaderActions;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _actionCopyEvent = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showCopyEventConfirmation({\n            onContinue: (copyLists) => {\n                const {\n                    event,\n                    speakerInfo\n                } = inst.props;\n\n                const selectedEvent = event.get('selectedEvent');\n                const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n                copyEvent({\n                    eid: selectedEvent.get('eid'),\n                    targetSid: selectedSpeaker.get('sid'),\n                    copyLists: copyLists\n                });\n            }\n        }));\n    };\n\n    /**\n     * Handles the Delete button.  Sends delete request to service\n     *\n     * @param {object} inst\n     * @private\n     */\n    _actionDeleteEvent = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showDeleteConfirmation({\n            onContinue: () => {\n                const {\n                    event\n                } = inst.props;\n                const selectedEvent = event.get('selectedEvent');\n\n                deleteEvent({\n                    eid: selectedEvent.get('eid')\n                });\n            },\n            text: getText('Are you sure you want to delete this Event?')\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _actionEmailCoworkers = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(mergeModifiedEvent(_prepareFormData(inst)));\n\n        dispatch(addSubView(VIEWS.subViews.EMAIL_COWORKERS_VIEW));\n    };\n\n    /**\n     * Returns form actions when dirty.  This happens here so it can have reference to the FormMixin\n     * @returns {*[]}\n     */\n    _buildFormDirtyActions = (spec) => {\n        const {\n            inst,\n            isDirty\n        } = spec;\n\n        if(!isDirty){\n            return [];\n        }\n\n        return [{\n            type: BTN.SAVE,\n            onClick: (event) => {\n                stopProp(event);\n\n                _submitHandler(inst);\n            }\n        }, {\n            type: BTN.DISCARD,\n            onClick: (event) => {\n                stopProp(event);\n\n                _discardHandler(inst);\n            }\n        }];\n    };\n\n    /**\n     * Determines what should be in the header.\n     *\n     * @param {object} spec - Container for named parameters\n     * @param {object} spec.props\n     * @param {boolean} spec.isDirty\n     * @param {object} spec.inst - Reference to React Component\n     * @returns {*[]}\n     * @private\n     */\n    _buildHeaderActions = (spec) => {\n        const {\n            props,\n            inst\n        } = spec;\n\n        const {\n            event,\n            jobBoard,\n            nav,\n            speakerInfo,\n            dispatch\n        } = props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const isPersonal = modifiedEvent.get('isPersonal');\n        let myInfo = {};\n        let messagesAction;\n\n        if(isMarketPlaceEvent(modifiedEvent)) {\n            myInfo = getMyInfo({\n                jobBoard,\n                speakerInfo,\n                eid: modifiedEvent.get('eid')\n            });\n\n            if (myInfo.n_unread) {\n                messagesAction = {\n                    type: 'custom',\n                    node: (\n                        <div style={{\n                            display: 'flex'\n                        }}>\n                            {IconMap.getButton('message',\n                                {\n                                    onClick: (event) => {\n                                        stopProp(event);\n\n                                        dispatch(addSubView(VIEWS.jobSubViews.JOB_MESSAGES_VIEW));\n                                    },\n                                    style: {\n                                        paddingRight: 0\n                                    }\n                                },\n                                {\n                                    color: mainTheme.headerIconColor\n                                })}\n\n                            <div style={{\n                                marginTop: 20,\n                                marginLeft: -15,\n                                marginRight: 15\n                            }}>\n                                <Avatar size={20}\n                                        backgroundColor={mainTheme.errorBackgroundColor}>{myInfo.n_unread}</Avatar>\n                            </div>\n\n                        </div>\n                    )\n                };\n            } else {\n                messagesAction = {\n                    onClick: (event) => {\n                        stopProp(event);\n\n                        dispatch(addSubView(VIEWS.jobSubViews.JOB_MESSAGES_VIEW));\n                    },\n                    label: getText('Messages'),\n                    iconClass: 'message'\n                };\n            }\n        }\n\n        let actions = _buildFormDirtyActions(spec);\n\n        if (!isSolutionTree()) {\n\n            if(isMarketPlaceEvent(modifiedEvent)) {\n                actions = actions.concat([messagesAction]);\n            }\n\n            actions = actions.concat([\n                {\n                    onClick: (event) => {\n                        stopProp(event);\n\n                        _actionEmailCoworkers(inst);\n                    },\n                    label: getText('Email Co-Workers'),\n                    iconClass: 'email'\n                },\n                {\n                    onClick: (event) => {\n                        stopProp(event);\n\n                        _actionCopyEvent(inst);\n                    },\n                    label: getText('Copy Event'),\n                    iconClass: 'content-copy'\n                // }, {\n                //     onClick: (event) => {\n                //         stopProp(event);\n                //\n                //         _actionDeleteEvent(inst);\n                //     },\n                //     iconClass: 'delete',\n                //     label: getText('Delete Event')\n                }\n            ]);\n        }\n\n        return actions;\n    };\n\n    /**\n     * Confirms Undo\n     *\n     * @param {object} inst\n     * @private\n     */\n    _confirmHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        inst.Form_reset();\n        dispatch(discardEventChanges());\n        dispatch(toggleEventDirty(false));\n        dispatch(toggleViewDirty(false));\n    };\n\n    /**\n     * Resets the form when changes are discarded\n     *\n     * @param {object} inst\n     * @returns {object}\n     * @private\n     */\n    _discardHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showUndoConfirmation({\n            onContinue: () => {\n                _confirmHandler(inst);\n            }\n        }));\n    };\n\n    if (!_prepareFormData) {\n        _prepareFormData = (inst) => {\n            if (_.isFunction(inst.prepareFormData)) {\n                return inst.prepareFormData();\n            }\n\n            return _.clone(inst.state.data);\n        };\n    }\n\n    /**\n     * Submits the form when changes are saved.\n     *\n     * @param {object} inst\n     * @private\n     */\n    _submitHandler = (inst) => {\n        inst.Form_onSubmit();\n    };\n\n    /**\n     * Updates the header actions for the most common shared actions\n     *\n     * @param {object} spec - Container for named parameters\n     * @param {object} spec.props\n     * @param {boolean} spec.isDirty\n     * @param {object} spec.inst - Reference to React Component\n     * @private\n     */\n    _updateHeaderActions = (spec) => {\n        const {props} = spec;\n\n        const {\n            dispatch\n        } = props;\n\n        dispatch(setHeaderActions(_buildHeaderActions(spec)));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const ViewMixin = ViewMixinFactory({});\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return _.assign({}, ViewMixin, {\n        updateHeaderActions() {\n            const {\n                event\n            } = this.props;\n\n            // This is called inside ViewMixin, so 'this' references the react component\n            _updateHeaderActions({\n                props: this.props,\n                isDirty: event.get('dirty'),\n                inst: this\n            });\n        },\n        Radio_setup() {\n            const {\n                dispatch\n            } = this.props;\n\n            let radios = {};\n\n            radios[RADIOS.ui.OPEN_EVENT_NAV] = () => {\n                dispatch(mergeModifiedEvent(_prepareFormData(this)));\n            };\n\n            return radios;\n        },\n        /**\n         * Invoked when a component is receiving new props. This method is not\n         * called for the initial render.\n         *\n         * @param {object} nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            // if our view dirty state has changed, update our headers\n            const currentEvent = this.props.event;\n            const nextEvent = nextProps.event;\n\n            const currentNav = this.props.nav;\n            const nextNav = nextProps.nav;\n\n            const currentView = this.props.view;\n            const nextView = nextProps.view;\n\n            const selectedEvent = nextEvent.get('selectedEvent');\n            const modifiedEvent = nextEvent.get('modifiedEvent');\n\n            const currentModifiedEvent = currentEvent.get('modifiedEvent');\n\n            const {\n                dispatch\n            } = nextProps;\n\n            // we only want to trigger multiUpdate if an update will occur\n\n            let isEventDirty = !is(selectedEvent, modifiedEvent) || nextEvent.get('dirty');\n\n            if (isEventDirty !== currentEvent.get('dirty')) {\n                dispatch(toggleEventDirty(isEventDirty));\n\n                _updateHeaderActions({\n                    props: nextProps,\n                    isDirty: isEventDirty,\n                    inst: this\n                });\n            }\n\n            if(!is(currentEvent.modifiedEvent, nextEvent.modifiedEvent)) {\n                _updateHeaderActions({\n                    props: nextProps,\n                    isDirty: isEventDirty,\n                    inst: this\n                });\n            }\n\n            // check to see if we need to merge event data\n            // If navigation has changed or the drawer has opened, then merge data\n            if ((nextNav.get('showDrawer') && !is(nextNav.get('showDrawer'), currentNav.get('showDrawer')))\n                || !is(nextNav.get('eventView'), currentNav.get('eventView'))\n                || !is(getCurrentSubView(nextNav), getCurrentSubView(currentNav))\n                && !nextNav.get('mainView')) {\n\n                dispatch(mergeModifiedEvent(_prepareFormData(this)));\n            }\n\n            if (!is(nextView.get('doSubmitForm'), currentView.get('doSubmitForm')) && nextView.get('doSubmitForm') === true) {\n                _submitHandler(this);\n            }\n\n        },\n        componentWillUnmount() {\n            const {dispatch, nav} = this.props;\n\n            if(nav.get('eventView')) {\n                dispatch(mergeModifiedEvent(_prepareFormData(this)));\n            }\n        },\n        getFormData() {\n            return _.clone(this.state.data);\n        },\n        onDiscard(e) {\n            stopProp(e);\n\n            _discardHandler(this);\n        }\n    }, (spec ? spec.overrides : null));\n}\n\nexport default EventMixinFactory;","/**\n * Provides methods to help build out React Forms\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixin\n */\nconst FormHelperMixinFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const _ = require('lodash');\n    const is = require('is');\n    const moment = require('moment');\n\n    // Factories\n    const MUIFieldsFactory = require('../forms/layouts/MUIFields').default;\n\n    // Mixins\n    const DateToolsFactory = require('../util/DateTools').default;\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    const InputTypes = require(\"react-loose-forms/InputTypes\");\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    let _prevDateDiff = 0;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _startDateRequired;\n    let _startTimeRequired;\n    let _stopDateRequired;\n    let _stopTimeRequired;\n    let _stopDateEnabled;\n    let _stopTimeEnabled;\n    let _stopTimeValidator;\n\n    /**\n     * Determines if StartDate should be a required field\n     *\n     * @param {object} data - State.data\n     * @returns {boolean}\n     * @private\n     */\n    _startDateRequired = (data) => {\n        const {\n            startTime,\n            stopDate,\n            stopTime\n        } = data;\n\n        if (_.isDate(startTime)) {\n            return true;\n        }\n\n        if (_.isDate(stopDate)) {\n            return true;\n        }\n\n        if (_.isDate(stopTime)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Determines if StartTime should be a required field\n     *\n     * @param data\n     * @returns {boolean}\n     * @private\n     */\n    _startTimeRequired = (data) => {\n        const {\n            stopTime\n        } = data;\n\n        if (_.isDate(stopTime)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     *\n     * @param data\n     * @returns {boolean}\n     * @private\n     */\n    _stopDateEnabled = (data) => {\n        const {\n            startDate\n        } = data;\n\n        if (_.isDate(startDate)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Determines if StopDate should be a required field.\n     *\n     * @param data\n     * @returns {*}\n     * @private\n     */\n    _stopDateRequired = (data) => {\n        return _startTimeRequired(data);\n    };\n\n    /**\n     *\n     * @param data\n     * @returns {boolean}\n     * @private\n     */\n    _stopTimeEnabled = (data) => {\n        const {\n            startTime\n        } = data;\n\n        if (_.isDate(startTime)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     *\n     * @param value\n     * @param data\n     * @returns {boolean|String}\n     * @private\n     */\n    _stopTimeValidator = (value, data) => {\n        const {\n            startDate,\n            startTime,\n            stopDate\n        } = data;\n\n        let stopMoment;\n        let startMoment;\n        let startDateTime;\n        let stopDateTime;\n        let validationResults = v.date(value);\n\n        if (validationResults !== true) {\n            return validationResults;\n        }\n\n        startDateTime = DateTools.mergeDate(startDate, startTime);\n        stopDateTime = DateTools.mergeDate(stopDate, value);\n\n        startMoment = moment(startDateTime);\n        stopMoment = moment(stopDateTime);\n\n        if (stopMoment.isSameOrBefore(startMoment)) {\n            return getText('End Time must be after Start Time');\n        }\n\n        return true;\n    };\n\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const MUIFields = MUIFieldsFactory({});\n\n    /**************************************************************************\n     *\n     * Public Members\n     *\n     *************************************************************************/\n\n    return _.assign(DateTools, {\n        /**\n         * Returns some commonly used Form props\n         *\n         * @return {object}\n         */\n        getDefaultFormProps() {\n            return {\n                errors: this.state.errors,\n                buildInput: this.Form_buildInput\n            };\n        },\n        /**\n         * Builds the Form layout based on a provided form schema.\n         *\n         * @param {object} spec - Collection of named parameters\n         * @property {object} spec\n         * @property {object} spec.fields - JSON schema for the Form to be built against\n         */\n        generateFields(spec) {\n            return <MUIFields {..._.assign({}, this.getDefaultFormProps(), spec)} />;\n        },\n        /**\n         * Create a common schema for Start and End Dates and Times\n         * @returns {object}\n         */\n        buildStartStopDateTimeSchema(data) {\n            return {\n                startDate: {\n                    name: 'startDate',\n                    type: 'date',\n                    iconClass: 'date-range',\n                    label: getText('Start Date'),\n                    minDate: this.getSystemMinDate(),\n                    maxDate: this.getMaxStartDate(data),\n                    validate: v.validateIf(_startDateRequired(data), v.date)\n                },\n                startTime: {\n                    name: 'startTime',\n                    type: 'time',\n                    iconClass: '',\n                    label: getText('Start Time'),\n                    validate: v.validateIf(_startTimeRequired(data), v.date)\n                },\n                stopDate: {\n                    name: 'stopDate',\n                    type: 'date',\n                    iconClass: 'date-range',\n                    label: getText('End Date'),\n                    disabled: !_stopDateEnabled(data),\n                    minDate: this.getMinStopDate(data),\n                    maxDate: this.getSystemMaxDate(),\n                    validate: v.validateIf(_stopDateRequired(data), v.date)\n                },\n                stopTime: {\n                    name: 'stopTime',\n                    type: 'time',\n                    iconClass: '',\n                    label: getText('End Time'),\n                    disabled: !_stopTimeEnabled(data),\n                    validate: v.emptyOr((value) => {\n                        return _stopTimeValidator(value, data);\n                    })\n                }\n            };\n        },\n        /**\n         *\n         * @param inst\n         * @returns {Array}\n         * @private\n         */\n        generateGroupCodeOptions(codesField) {\n            const {\n                speakerInfo\n            } = this.props;\n\n            if (!speakerInfo) {\n                return [];\n            }\n\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n            const codeList = selectedSpeaker.get(codesField);\n\n            let options = [];\n\n            if (codeList) {\n                codeList.map((code) => {\n                    if (typeof code === 'string') {\n                        options.push({\n                            text: code,\n                            value: code\n                        });\n                    }\n                    else {\n                        options.push({\n                            text: code.get('groupcode'),\n                            value: code.get('groupcode')\n                        });\n                    }\n                });\n            }\n\n            return options;\n        },\n        /**\n         * @param {string} id\n         * @return {string}\n         */\n        determineMode(id) {\n            let mode = getText('Add');\n\n            if (id !== \"0\") {\n                mode = getText('Edit');\n            }\n\n            return mode;\n        },\n        /**\n         *\n         * @param {string} name\n         * @param {*} value\n         * @returns {object}\n         */\n        onFormChangedStartStopDateTime(name, value) {\n            const data = _.assign({}, this.state.data);\n\n            let stopDateTime = null;\n            let startDateTime = null;\n            let newStopDate = null;\n            let dateDiff = 0;\n            let newData = null;\n\n            if (name === 'stopDate' || name === 'stopTime' && _.isDate(value)) {\n                if (name === 'stopDate') {\n                    stopDateTime = this.toMoment(value, data.stopTime);\n                }\n                else if (name === 'stopTime') {\n                    stopDateTime = this.toMoment(data.stopDate, value);\n                }\n\n                if (stopDateTime) {\n                    startDateTime = this.toMoment(data.startDate, data.startTime);\n\n                    if (startDateTime) {\n                        _prevDateDiff = startDateTime.diff(stopDateTime, 'seconds');\n                    }\n                }\n                else {\n                    _prevDateDiff = 0;\n                }\n            }\n\n            if (name === 'startDate' || name === 'startTime' && _.isDate(value)) {\n                if (name === 'startDate') {\n                    startDateTime = this.toMoment(value, data.startTime);\n                }\n                else if (name === 'startTime') {\n                    startDateTime = this.toMoment(data.startDate, value);\n                }\n\n                if (startDateTime) {\n                    if (!_.isDate(data.stopDate) || !_.isDate(data.stopTime)) {\n                        newStopDate = startDateTime.add(1, 'hours');\n\n                        startDateTime = this.toMoment(data.startDate, data.startTime);\n\n                        if (startDateTime) {\n                            _prevDateDiff = startDateTime.diff(newStopDate, 'seconds');\n                        }\n                    }\n                    else if (_.isDate(data.stopDate) && _prevDateDiff !== 0) {\n                        stopDateTime = this.toMoment(data.stopDate, data.stopTime);\n\n                        dateDiff = startDateTime.diff(stopDateTime, 'seconds');\n\n                        if (dateDiff < _prevDateDiff) {\n                            newStopDate = stopDateTime.subtract(Math.abs(_prevDateDiff - dateDiff), 'seconds');\n                        }\n                        else if (dateDiff > _prevDateDiff) {\n                            newStopDate = stopDateTime.add(Math.abs(dateDiff - _prevDateDiff), 'seconds');\n                        }\n                    }\n                }\n            }\n\n            if (newStopDate) {\n                newData = data;\n                newData.stopDate = moment(newStopDate.format(DateTools.masks.DATE_STRING), DateTools.masks.DATE_STRING).toDate();\n\n                if (((!_.isDate(data.stopTime)) && (_.isDate(data.startTime))) ||\n                    (_.isDate(data.stopTime) &&\n                        newStopDate.hours() !== 0)) {\n                    newData.stopTime = newStopDate.toDate();\n                }\n            }\n\n            return newData;\n        },\n        Form_buildInput(field) {\n            let input = InputTypes.getInputByType(field.type);\n\n            return <input.component\n            field = {\n                field\n            }\n            value = {\n                this.state.data[field.name]\n            }\n            onChange = {\n                (value) => {\n                    this.Form_onChange(field.name, value);\n                }\n            }\n            />;\n        },\n        // /**\n        //  *\n        //  * @param {object|Event} e\n        //  * @constructor\n        //  */\n        // Form_onSubmit(e){\n        //     let data = {};\n        //\n        //     _.map(e.currentTarget.elements, (el) => {\n        //         if (!is.empty(el.name))\n        //             data[el.name] = el.value;\n        //     });\n        //\n        //     // need to set the data first so Form_validate has access to it.\n        //     this.setState({\n        //         data: data\n        //     }, () => {\n        //         this.setState({\n        //             submit_attempts: this.state.submit_attempts + 1,\n        //             errors: this.Form_validate()\n        //         }, () => {\n        //             if (is.empty(this.state.errors)) {\n        //                 this.____onSubmit(this.state.data);\n        //             } else {\n        //                 this.____onSubmitFail(this.state.errors);\n        //             }\n        //         });\n        //     });\n        // },\n        // Form_onChange(field_name, new_value) {\n        //     toggleViewDirty(true);\n        //\n        //     this.____onFormChanged(field_name, new_value);\n        // }\n    });\n}\n\nexport default FormHelperMixinFactory;","/**\n * Provides methods to help build out Message Components\n * @mixin\n */\nconst MessagesMixin = {\n    /**\n     * Determines what Icon to display with message.\n     *\n     * @param {object} message\n     * @returns {*}\n     */\n    determineIcon(message) {\n        switch (message.get('type')) {\n            case 'error':\n                return 'error';\n            case 'warning':\n                return 'warning';\n            case 'info':\n                return 'info';\n            case 'success':\n                return 'thumb-up';\n        }\n    }\n};\n\nexport default MessagesMixin;","/***\n *\n * @param spec\n * @returns {*}\n * @constructor\n */\nconst SubViewMixinFactory = (spec) => {\n\n    //-------------------------------------------------------------------------\n    //\n    // Imports\n    //\n    //-------------------------------------------------------------------------\n\n    // Utils\n    const _ = require('lodash');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    //-------------------------------------------------------------------------\n    //\n    // Private Members\n    //\n    //-------------------------------------------------------------------------\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    //-------------------------------------------------------------------------\n    //\n    // Public Interface\n    //\n    //-------------------------------------------------------------------------\n\n    return {\n        /**\n         * Invoked when a component is receiving new props. This method is not\n         * called for the initial render.\n         *\n         * @param {object} nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const nextView = nextProps.view;\n            const currentView = this.props.view;\n\n            if (currentView.get('dirty') !== nextView.get('dirty')) {\n                this.updateHeaderActions(nextProps);\n            }\n        },\n\n        /**\n         *\n         * @param props\n         * @returns {Array}\n         */\n        determineSaveAction(props) {\n            const {\n                view\n            } = props;\n\n            let actions = [];\n\n            if (view.get('dirty')) {\n                actions.push({\n                    type: BTN.SAVE,\n                    onClick: (event) => {\n                        stopProp(event);\n\n                        if (_.isFunction(this.Form_onSubmit)) {\n                            this.Form_onSubmit();\n                        }\n                    }\n                });\n            }\n\n            return actions;\n        }\n    };\n}\n\nexport default SubViewMixinFactory;","/**\n * Provides methods to help build out Venue Forms\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixin\n * @mixes AddressMixin\n */\nconst VenueMixinFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n\n    // Factories\n\n    // Mixins\n    const AddressMixinFactory = require('./AddressMixin').default;\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory,\n        VenueActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText,\n        jed\n    } = TranslateActionsFactory({});\n    const {\n        extractSelectedVenue\n    } = VenueActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _findSelectedVenue;\n    let _generateTimezoneOptions;\n    let _generateVenueData;\n\n    /**\n     *\n     * @param {string} venueId\n     * @param {object} inst\n     * @returns {null|Record|Map}\n     * @private\n     */\n    _findSelectedVenue = (venueId, inst) => {\n        const {\n            event\n        } = inst.props;\n\n        return extractSelectedVenue(event, venueId);\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateTimezoneOptions = (inst) => {\n        const {\n            displayData\n        } = inst.props;\n        const displayLists = displayData.get('displayLists');\n\n        const universal = displayLists.get('universal');\n        const timezones = universal.get('timezones');\n\n        let options = [];\n\n        timezones.map((timezone) => {\n            options.push({\n                text: timezone,\n                value: timezone\n            });\n        });\n\n        return options;\n    };\n\n    /**\n     *\n     * @param {null|Record|Map} venue\n     * @returns {object}\n     * @private\n     */\n    _generateVenueData = (venue) => {\n        let data = {\n            building: '',\n            city: '',\n            st: '',\n            country: 'US',\n            address: '',\n            phone: '',\n            fax: '',\n            zip: '',\n            timezone: ''\n        };\n\n        if (venue) {\n            data = _.pick(venue.toJS(), ['building',\n                'city',\n                'st',\n                'country',\n                'address',\n                'phone',\n                'fax',\n                'zip',\n                'timezone'\n            ]);\n        }\n\n        return data;\n    };\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const AddressMixin = AddressMixinFactory({});\n\n    /**************************************************************************\n     *\n     * Public Members\n     *\n     *************************************************************************/\n\n    return _.assign({}, AddressMixin, {\n        /**\n         * Create a common schema for Venues\n         * @returns {object}\n         */\n        buildVenueSchema(data) {\n            return _.assign({}, this.buildAddressSchema(data), {\n                building: {\n                    name: 'building',\n                    label: getText('Name'),\n                    type: 'text',\n                    iconClass: 'business'\n                },\n                timezone: {\n                    name: 'timezone',\n                    label: getText('Timezone'),\n                    type: 'select',\n                    placeholder: getText('-- local time --'),\n                    options: _generateTimezoneOptions(this),\n                    iconClass: 'language'\n                },\n                phone: {\n                    name: 'phone',\n                    label: getText('Phone'),\n                    type: 'phone',\n                    iconClass: 'phone'\n                },\n                fax: {\n                    name: 'fax',\n                    label: getText('Fax'),\n                    type: 'phone',\n                    iconClass: 'fa-fax'\n                }\n            });\n        },\n        getInitialVenueValues(venueId) {\n            const selectedVenue = _findSelectedVenue(venueId, this);\n\n            return _generateVenueData(selectedVenue);\n        },\n        onFormChangedVenue(name, value) {\n            let updatedData = null;\n\n            // if we change the venue drop down we need to change the form data to match\n            if (name === 'venueid') {\n                const selectedVenue = _findSelectedVenue(value, this);\n\n                updatedData = _generateVenueData(selectedVenue);\n            }\n\n            return updatedData;\n        }\n    });\n}\n\nexport default VenueMixinFactory;","/**\n * Generates a Auth Action\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst AuthActionsFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Radios\n    const {\n        radio\n    } = require('react-pubsub-via-radio.js');\n\n    /**************************************************************************\n     *\n     * Private Memebers\n     *\n     *************************************************************************/\n\n\n    /**********************************\n     * Methods\n     *********************************/\n    let _forgotPassword;\n    let _renewToken;\n    let _updateAuthStore;\n    let _logout;\n\n    /**\n     * Handles the forgotPassword action\n     *\n     * @param data\n     * @private\n     */\n    _forgotPassword = (data) => {\n        radio(RADIOS.services.FORGOT_PASSWORD).broadcast(data);\n    };\n\n    /**\n     * Handles the renewToken action\n     *\n     * @param date\n     * @private\n     */\n    _renewToken = (data) => {\n        radio(RADIOS.services.RENEW_TOKEN).broadcast({\n            username: data.get('username'),\n            token: data.get('token'),\n            timestamp: data.get('timestamp')\n        });\n    };\n\n    /**\n     * Handles the updateAuthStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateAuthStore = (data) => {\n        return {\n            type: RADIOS.stores.AUTH_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the logout action\n     *\n     * @private\n     */\n    _logout = () => {\n        return {\n            type: RADIOS.stores.LOGOUT\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        forgotPassword: _forgotPassword,\n        renewToken: _renewToken,\n        updateAuthStore: _updateAuthStore,\n        logout: _logout\n    };\n}\n\nexport default AuthActionsFactory;","/**\n * Generates the Calendar Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst CalendarActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Radios\n    const {radio} = require('react-pubsub-via-radio.js');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _extractMonthData;\n    let _loadCalendarData;\n    let _mergeCalendarData;\n    let _nextMonth;\n    let _prevMonth;\n    let _selectDay;\n    let _updateCalendarPeriod;\n    let _updateSelectedMonthYear;\n    let _updateSelectorYear;\n\n    /**\n     *\n     * @param calendar\n     * @returns {*}\n     * @private\n     */\n    _extractMonthData = (calendar) => {\n        const selectedMonth = calendar.get('selectedMonth');\n        const selectedYear = calendar.get('selectedYear');\n        const calendarData = calendar.get('calendarData');\n        const monthData = calendarData.get(`${selectedYear}-${selectedMonth}`);\n\n        if (!monthData) {\n            return null;\n        }\n\n        const monthCalendar = monthData.get('calendar');\n        let year;\n        let month;\n        let data = {};\n\n        if (monthCalendar) {\n            year = monthCalendar.get(selectedYear.toString());\n        }\n\n        if (year) {\n            month = year.get(selectedMonth.toString());\n        }\n\n        if (month) {\n            data = month.toJS();\n        }\n\n        return {\n            data,\n            details: monthData.get('details').toJS()\n        };\n    };\n\n    /**\n     * Handles the loadCalendarData action\n     *\n     * @param selectedSpeaker\n     * @param selectedYear\n     * @param selectedMonth\n     * @private\n     */\n    _loadCalendarData = (selectedSpeaker, selectedYear, selectedMonth) => {\n        radio(RADIOS.services.LOAD_CALENDAR).broadcast({\n            sids: [selectedSpeaker.get('sid')],\n            year: selectedYear,\n            month: selectedMonth\n        });\n    };\n\n    /**\n     * Handles the mergeCalendarData actions\n     *\n     * @param payload\n     * @private\n     */\n    _mergeCalendarData = (payload) => {\n        return {\n            type: RADIOS.stores.CALENDAR_STORE_MERGE_CALENDAR_DATA,\n            payload\n        };\n    };\n\n    /**\n     * Sets the calendar's selected month/year to the next month\n     *\n     * @returns {object}\n     * @private\n     */\n    _nextMonth = () => {\n        return {\n            type: RADIOS.stores.CALENDAR_STORE_NEXT_MONTH\n        };\n    };\n\n    /**\n     * Sets the claendar's selected month/year to the previous month\n     *\n     * @returns {object}\n     * @private\n     */\n    _prevMonth = () => {\n        return {\n            type: RADIOS.stores.CALENDAR_STORE_PREV_MONTH\n        };\n    };\n\n    /**\n     *\n     * @param payload\n     * @private\n     */\n    _selectDay = (payload) => {\n        return [\n            {\n                type: RADIOS.stores.CALENDAR_STORE_SELECT_DAY,\n                payload\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: VIEWS.subViews.CALENDAR_EVENTS_VIEW\n            }\n        ];\n    };\n\n    /**\n     * Handles the updateCalendarPeriod action\n     *\n     * @param payload\n     * @private\n     */\n    _updateCalendarPeriod = (payload) => {\n        return {\n            type: RADIOS.stores.CALENDAR_STORE_UPDATE_CALENDAR_PERIOD,\n            payload\n        };\n    };\n\n    /**\n     *\n     * @param payload\n     * @returns {{type: string, payload}}\n     * @private\n     */\n    _updateSelectedMonthYear = (payload) => {\n        return {\n            type: RADIOS.stores.CALENDAR_STORE_UPDATE,\n            payload: _.pick(payload, ['selectedMonth', 'selectedYear'])\n        };\n    };\n\n    /**\n     *\n     * @param payload\n     * @returns {{type: string, payload: *}}\n     * @private\n     */\n    _updateSelectorYear = (payload) => {\n        return {\n            type: RADIOS.stores.CALENDAR_STORE_UPDATE,\n            payload\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        extractMonthData: _extractMonthData,\n        loadCalendarData: _loadCalendarData,\n        mergeCalendarData: _mergeCalendarData,\n        nextMonth: _nextMonth,\n        prevMonth: _prevMonth,\n        selectDay: _selectDay,\n        updateCalendarPeriod: _updateCalendarPeriod,\n        updateSelectedMonthYear: _updateSelectedMonthYear,\n        updateSelectorYear: _updateSelectorYear\n    };\n}\n\nexport default CalendarActionsFactory;","/**\n * Generates a CompanyData action\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst CompanyDataActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Radios\n    const {radio} = require('react-pubsub-via-radio.js');\n\n    // Actions\n    const LoadingActionsFactory = require('./LoadingActions').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {updateLoadingStore} = LoadingActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _updateCompanyDataStore;\n    let _getCompanyLists;\n    let _refreshCompanyData;\n    let _verifyCompanyLists;\n\n    /**\n     *  Handles the updateCompanyDataStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateCompanyDataStore = (data) => {\n        return {\n            type: RADIOS.stores.COMPANY_DATA_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**\n     *  Handles the getCompanyList action\n     *\n     * @private\n     */\n    _getCompanyLists = () => {\n        radio(RADIOS.services.GET_COMPANY_LISTS).broadcast();\n    };\n\n    /**\n     * Handles the refreshCompanyData action\n     *\n     * @private\n     */\n    _refreshCompanyData = (silent) => {\n        // Get company lists\n        _getCompanyLists();\n\n        // Also need to clear out any current data sets: calendar, search, etc.\n        return [\n            updateLoadingStore({\n                silentRefresh: silent || false\n            }),\n            {\n                type: RADIOS.stores.REFRESH_DATA\n            }\n        ];\n    };\n\n    /**\n     * Handles the verifyCompanyLists action\n     *\n     * @private\n     */\n    _verifyCompanyLists = () => {\n        radio(RADIOS.stores.VERIFY_COMPANY_LISTS).broadcast();\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        updateCompanyDataStore: _updateCompanyDataStore,\n        refreshCompanyData: _refreshCompanyData,\n        getCompanyLists: _getCompanyLists,\n        verifyCompanyLists: _verifyCompanyLists\n    };\n}\n\nexport default CompanyDataActionsFactory;\n\n","/**\n * Generates the Contact Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst ContactActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Actions\n    const EventActionsFactory = require('./EventActions').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {extractSelectedItem} = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteContact;\n    let _extractSelectedContact;\n    let _saveContact;\n    let _selectContact;\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _deleteContact = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_DELETE_CONTACT,\n            payload: data\n        };\n    };\n\n    /**\n     *\n     * @param event\n     * @returns {Record|null}\n     * @private\n     */\n    _extractSelectedContact = (event) => {\n        return extractSelectedItem(event, 'selectedContact', 'EventContact', 'id', {groupcodes: []});\n    };\n\n    /**\n     * Adds or Saves a note to the existing collection, unpersisted with server\n     *\n     * @param data\n     * @private\n     */\n    _saveContact = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_SAVE_CONTACT,\n            payload: data\n        };\n    };\n\n    /**\n     * Updates the store with the selected Contact object and navigates to the subview\n     *\n     * @param {object} data\n     * @private\n     */\n    _selectContact = (data) => {\n        return [\n            {\n                type: RADIOS.stores.EVENT_STORE_SELECT_CONTACT,\n                payload: data\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: VIEWS.subViews.CONTACT_VIEW\n            }\n        ];\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        deleteContact: _deleteContact,\n        extractSelectedContact: _extractSelectedContact,\n        saveContact: _saveContact,\n        selectContact: _selectContact\n    };\n}\n\nexport default ContactActionsFactory;","/**************************************************************************\n *\n * Imports\n *\n *************************************************************************/\nimport RADIOS from \"../enums/RADIOS\";\nimport {radio} from \"react-pubsub-via-radio.js\";\n\n/**\n * Generates the Dashboard actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst DashboardActionsFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n    let _updateDashboardStore;\n    let _loadDashboard;\n\n    /**\n     * Handles the updateDashboardStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateDashboardStore = (data) => {\n        return {\n            type: RADIOS.stores.DASHBOARD_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the loadDashboard action\n     *\n     * @param data\n     * @private\n     */\n    _loadDashboard = (data) => {\n        radio(RADIOS.services.LOAD_DASHBOARD).broadcast(data);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        updateDashboardStore: _updateDashboardStore,\n        loadDashboard: _loadDashboard\n    };\n}\nexport default DashboardActionsFactory;","/**\n * Generates the Dialog Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst DialogActionsFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let closeDialog;\n    let showConfirmedEventsDialog;\n    let showCopyEventConfirmation;\n    let showDeleteConfirmation;\n    let showExitDirtyConfirmation;\n    let showLegend;\n    let showSpeakerSelector;\n    let showUndoConfirmation;\n    let updatedDialogStore;\n\n    /**\n     * Handles the closeDialog action\n     *\n     * @private\n     */\n    closeDialog = () => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_CLOSE_DIALOG\n        };\n    };\n\n    showConfirmedEventsDialog = (spec = {}) => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: {\n                confirmedEventsDialog: _.assign({\n                    show: true\n                }, spec)\n            }\n        };\n    };\n\n    /**\n     * Handles the showCopyEventConfirmation Action\n     *\n     * @param {object} spec - Additional, optional settings\n     * @property {function} spec.onContinue\n     * @property {function} spec.onCancel\n     * @property {string} spec.text\n     * @private\n     */\n    showCopyEventConfirmation = (spec) => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: {\n                copyEventConfirmation: _.assign({\n                    show: true\n                }, spec)\n            }\n        };\n    };\n\n    /**\n     * Handles the showDeleteConfirmation Action\n     *\n     * @param {object} spec - Additional, optional settings\n     * @property {function} spec.onContinue\n     * @property {function} spec.onCancel\n     * @property {string} spec.text\n     * @private\n     */\n    showDeleteConfirmation = (spec) => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: {\n                deleteConfirmation: _.assign({\n                    show: true\n                }, spec)\n            }\n        };\n    };\n\n    /**\n     * Handles the showExitDirtyConfirmation Action\n     *\n     * @param {object} spec - Additional, optional settings\n     * @property {function} spec.onContinue\n     * @property {function} spec.onCancel\n     * @property {string} spec.text\n     * @private\n     */\n    showExitDirtyConfirmation = (spec) => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: {\n                exitDirtyConfirmation: _.assign({\n                    show: true\n                }, spec)\n            }\n        };\n    };\n\n    /**\n     * Handles the showLegend action\n     *\n     * @private\n     */\n    showLegend = () => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: {\n                showLegend: true\n            }\n        };\n    };\n\n    /**\n     * Handles the showSpeakerSelector action\n     *\n     * @private\n     */\n    showSpeakerSelector = (spec) => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: {\n                showSpeakerSelector: _.assign({\n                    show: true\n                }, spec)\n            }\n        };\n    };\n\n    /**\n     * Handles the showUndoConfirmation Action\n     *\n     * @param {object} spec - Additional, optional settings\n     * @property {function} spec.onContinue\n     * @property {function} spec.onCancel\n     * @property {string} spec.text\n     * @private\n     */\n    showUndoConfirmation = (spec) => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: {\n                undoConfirmation: _.assign({\n                    show: true\n                }, spec)\n            }\n        };\n    };\n\n    /**\n     * Handles the updatedDialogStore action\n     *\n     * @param data\n     * @private\n     */\n    updatedDialogStore = (data) => {\n        return {\n            type: RADIOS.stores.DIALOG_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        closeDialog,\n        showConfirmedEventsDialog,\n        showCopyEventConfirmation,\n        showDeleteConfirmation,\n        showExitDirtyConfirmation,\n        showLegend,\n        showSpeakerSelector,\n        showUndoConfirmation,\n        updatedDialogStore\n    };\n}\n\nexport default DialogActionsFactory;","/**\n * Generates a DisplayData action\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst DisplayDataActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Radios\n    const {radio} = require('react-pubsub-via-radio.js');\n\n    // Actions\n    const LoadingActionsFactory = require('./LoadingActions').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {updateLoadingStore} = LoadingActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _updateDisplayDataStore;\n    let _getDisplayLists;\n    let _getSiteLists;\n    let _refreshDisplayData;\n    let _verifyDisplayLists;\n\n    /**\n     *  Handles the updateDisplayDataStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateDisplayDataStore = (data) => {\n        return {\n            type: RADIOS.stores.DISPLAY_DATA_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**\n     *  Handles the getDisplayList action\n     *\n     * @private\n     */\n    _getDisplayLists = () => {\n        radio(RADIOS.services.GET_DISPLAY_LISTS).broadcast();\n    };\n\n    /**\n     * Handles the refreshDisplayData action\n     *\n     * @private\n     */\n    _refreshDisplayData = (silent) => {\n        // Get display lists\n        _getDisplayLists();\n\n        // Also need to clear out any current data sets: calendar, search, etc.\n        return [\n            updateLoadingStore({\n                silentRefresh: silent || false\n            }),\n            {\n                type: RADIOS.stores.REFRESH_DATA\n            }\n        ];\n    };\n\n    /**\n     * Handles the verifyDisplayLists action\n     *\n     * @private\n     */\n    _verifyDisplayLists = () => {\n        radio(RADIOS.stores.VERIFY_DISPLAY_LISTS).broadcast();\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        updateDisplayDataStore: _updateDisplayDataStore,\n        refreshDisplayData: _refreshDisplayData,\n        getDisplayLists: _getDisplayLists,\n        verifyDisplayLists: _verifyDisplayLists\n    };\n}\n\nexport default DisplayDataActionsFactory;\n\n","/**\n * Generates the Job Board actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst JobBoardActionsFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // NPM\n    const moment = require('moment');\n    const _ = require('lodash');\n    const {Map, List} = require('immutable');\n\n    // Enums\n    const OFFER_STATUS = require('../enums/OFFER_STATUS').default;\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Radios\n    const {radio} = require('react-pubsub-via-radio.js');\n\n    const OfferStatusModel = require('../stores/models/OfferStatusModel').default;\n\n    // Actions\n    const {\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const DateTools = require('../util/DateTools').default();\n    const esUtils = require('ES/utils/esUtils');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {getSpeakersFromDisplayLists} = SpeakerInfoActionsFactory({});\n    const {getText} = TranslateActionsFactory();\n\n    //---------------------------------\n    // Variables\n    //---------------------------------\n\n    let OFFER_STATUS_LIST= List();\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel());\n\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel({\n        key: OFFER_STATUS.UNREAD_MESSAGE,\n        display: getText('unread message')\n    }));\n\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel({\n        key: OFFER_STATUS.WAITING_CLIENT,\n        display: getText('Waiting on Client'),\n        status: getText('Offer Pending'),\n        areaTitle: getText('You are waiting for the client to accept your offer or propose a different one.'),\n        nowItems: List().push(getText('offer pending')).push(getText('waiting for client')),\n        nextItems: List().push(getText('client accepts offer'))\n    }));\n\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel({\n        key: OFFER_STATUS.WAITING_YOU,\n        display: getText('Waiting on You'),\n        status: getText('Offer Pending'),\n        areaTitle: getText('The client is waiting for you to accept their offer or revise it.'),\n        nowItems: List().push(getText('offer pending')).push(getText('waiting for you')),\n        nextItems: List().push(getText('you accept offer')),\n        nowType: OFFER_STATUS.WARNING\n    }));\n\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel({\n        key: OFFER_STATUS.OFFER_ACCEPTED,\n        display: getText('Hired!'),\n        status: getText('Accepted'),\n        areaTitle: getText('Waiting for the client to pay the deposit.'),\n        nowItems: List().push(getText('offer accepted')),\n        nextItems: List().push(getText('client pays deposit')),\n        nowType: OFFER_STATUS.SUCCESS\n    }));\n\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel({\n        key: OFFER_STATUS.DEPOSIT_PAID,\n        display: getText('deposit paid'),\n        status: getText('Accepted'),\n        areaTitle: getText('On the day of the event, eSpeakers will collect the balance due.'),\n        nowItems: List().push(getText('deposit paid')),\n        nextItems: List().push(getText('event happens')),\n        nowType: OFFER_STATUS.SUCCESS\n    }));\n\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel({\n        key: OFFER_STATUS.PAID_IN_FULL,\n        display: getText('paid in full'),\n        status: getText('Accepted'),\n        areaTitle: getText('The event is paid in full.'),\n        nowItems: List().push(getText('balance paid')),\n        nextItems: List().push(getText('event happens')),\n        nowType: OFFER_STATUS.SUCCESS\n    }));\n\n    OFFER_STATUS_LIST = OFFER_STATUS_LIST.push(OfferStatusModel({\n        key: OFFER_STATUS.EVENT_COMPLETED,\n        display: getText('reviewed'),\n        status: getText('All Done'),\n        areaTitle: getText('The event is completed. Great job!'),\n        nowItems: List().push(getText('review complete')),\n        nowType: OFFER_STATUS.SUCCESS\n    }));\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let getBudget = undefined;\n    let getBuyerName = undefined;\n    let getCompanyName = undefined;\n    let getEventDate = undefined;\n    let getCommission = undefined;\n    let getLedgerData = undefined;\n    let getMessageSpeakerName = undefined;\n    let getMyInfo = undefined;\n    let getNotes = undefined;\n    let getOfferEventStatus = undefined;\n    let getOfferStatus = undefined;\n    let getOfferStatusDisplay = undefined;\n    let getOfferStatusIndexByJob = undefined;\n    let getOfferStatusIndexByStatus = undefined;\n    let getPayments = undefined;\n    let getShortListDescription = undefined;\n    let getTopics = undefined;\n    let getTotalUnread = undefined;\n    let isJobLead = undefined;\n    let isJobOffer = undefined;\n    let loadJobAgreement = undefined;\n    let loadJobBoard = undefined;\n    let loadJobEvent = undefined;\n    let loadJobMessages = undefined;\n    let markMessagesRead = undefined;\n    let selectJob = undefined;\n    let sendJobMessage = undefined;\n    let sendJobApplication = undefined;\n    let sortJobs = undefined;\n    let updateJobBoardStore = undefined;\n    let updateJobAgreement = undefined;\n    let updateJobDetail = undefined;\n    let updateJobMessages = undefined;\n\n    getBudget = (job) => {\n        let jobObj = job;\n\n        if(job.get('jobSummary')) {\n            jobObj = job.get('jobSummary');\n        }\n\n        let price_range = [jobObj.get('budget_min'), jobObj.get('budget_max')];\n\n        let prices = !_.isArray(price_range) ? [] : _.uniq(_.sortBy(_.filter(_.map(price_range, (price) => {\n            return price === Infinity || price === -Infinity ? price : _.parseInt(price);\n        }), (price) => {\n            return price >= -1;\n        })), true);\n\n        if (prices.length === 1 && prices[0] === -1) {\n            return '(to be determined)';\n        }\n        if (prices.length === 1 && prices[0] === 0) {\n            return '(free)';\n        }\n        if (prices.length === 2 && prices[1] === Infinity) {\n            return `More than ${esUtils.format_currency(prices[0], 0)}`;\n        }\n        return _.map(prices, (price) => {\n            return esUtils.format_currency(price, 0);\n        }).join(' - ');\n    };\n\n    getBuyerName = (jobEvent) => {\n        let event = jobEvent.toJS();\n\n        let buyer_names = _.map(event && event.Buyers, (Buyer) => {\n            return Buyer.firstname;\n        });\n        if(_.isEmpty(buyer_names)){\n            buyer_names = [getText('The client')];\n        }\n        return buyer_names.join(', ');\n    };\n\n    getCompanyName = (event) => {\n        let eventObj = event.toJS();\n        let company = null;\n\n        let buyer_names = _.map(_.get(eventObj, \"Buyers\", {}), (Buyer) => {\n            company = _.get(Buyer, \"company\");\n            return [Buyer.firstname, Buyer.lastname].join(\" \");\n        });\n        if (_.isEmpty(buyer_names)) {\n            buyer_names = ['The client'];\n        }\n\n        let r = buyer_names.join(', ');\n\n        if (!_.isEmpty(company)) {\n            r += `, ${company}`;\n        }\n        return r;\n    };\n\n    /**\n     *\n     * @param pJob\n     * @param displayData\n     * @returns {obj}\n     */\n    getCommission = (spec = {}) => {\n        let {\n            jobDetail,\n            displayData,\n            event,\n            Displaylists\n        } = spec;\n        let displayLists;\n\n        if(!jobDetail && !event)\n            return;\n\n        if (jobDetail && displayData) {\n            let job = jobDetail.toJS();\n            event = job.event;\n            displayLists = displayData.displayLists.toJS();\n        } else if(event && Displaylists) {\n            displayLists = Displaylists;\n        }\n\n        let retVal = {\n            value: 0,\n            display: '0%',\n            message: ''\n        };\n\n        if(!event.is_mp_event || _.includes(event.flags_as_array, \"bookmenow\")){\n            return retVal;\n        }\n\n        let whitelabel = _.get(displayLists, [\"universal\", \"whitelabels\", event.bureauID]);\n        let whitelabel_name = whitelabel ? whitelabel.bname : getText(\"eSpeakers Marketplace\");\n        let espeakers_commission = whitelabel ? whitelabel.mp_espeakers_commission : 10;\n        let thebureau_commission = whitelabel ? whitelabel.mp_bureau_commission : 0;\n\n        retVal.value = Math.max(0, espeakers_commission + thebureau_commission);\n        retVal.display = `${retVal.value * 100}%`;\n\n        if (_.includes(event.flags_as_array, \"bookmenow\")) {\n            retVal.message = getText(\"This lead came through your Book-Me-Now link, with no finder's fee.\");\n        } else if (retVal.value <= 0) {\n            return retVal;\n        } else {\n            retVal.message = getText(\"The %1$s %2$s finder's fee will be deducted from the buyer's deposit payment.\", {\n                params: [\n                    retVal.display,\n                    whitelabel_name\n                ]\n            });\n        }\n\n        return retVal;\n    };\n\n    getEventDate = (jobEvent) => {\n        let date = DateTools.convertFromBalboaTrunkTimestamp(jobEvent.get('starttime'));\n\n        let formattedDate = undefined;\n\n        if (date) {\n            formattedDate = esUtils.format_date(date, esUtils.format_date.masks.mediumDate);\n        }\n\n        return formattedDate;\n    };\n\n    getLedgerData = (spec = {}) => {\n        let {\n            event,\n            Displaylists,\n            mp_agreement,\n            fee_main,\n            fee_travel,\n            fee_materials\n        } = spec;\n\n        const close_date = \"payout on event date\";\n        const acceptance_date = \"payout on acceptance\";\n\n        let commission = getCommission({Displaylists, event});\n\n        let commission_desc = commission.display;\n        let bname = _.get(Displaylists, [\"universal\", \"whitelabels\", event.bureauID, \"bname\"]);\n        if (bname) {\n            commission_desc += ` ${bname}`;\n        }\n        commission_desc += \" finder's fee\";\n\n        if (mp_agreement) {\n            fee_main = 0;\n            fee_travel = 0;\n            fee_materials = 0;\n            _.each(mp_agreement.fees, (f) => {\n                if (f.flags_as_map.speaking_fee.is_set) {\n                    fee_main += f.fee;\n                } else if (f.flags_as_map.travel.is_set) {\n                    fee_travel += f.fee;\n                } else {\n                    fee_materials += f.fee;\n                }\n            });\n        }\n\n        let fees = [\n            {\n                due: acceptance_date,\n                fee: fee_main * .5,\n                description: \"client pays deposit\"\n            },\n            {\n                due: acceptance_date,\n                fee: -fee_main * commission.value,\n                description: commission_desc\n            },\n            {\n                due: close_date,\n                fee: fee_main * .5,\n                description: \"client pays balance\"\n            }\n        ];\n        if (fee_travel > 0) {\n            fees.push({\n                due: close_date,\n                fee: fee_travel,\n                description: \"client pays travel\"\n            });\n        }\n        if (fee_materials > 0) {\n            fees.push({\n                due: close_date,\n                fee: fee_materials,\n                description: \"client pays materials\"\n            });\n        }\n\n        let grand_total = _.reduce(fees, (sum, f) => {\n            return sum + f.fee;\n        }, 0);\n\n        return {\n            fees,\n            grand_total,\n            fee_speaking: fee_main, //amount the buyer pays for speaking only (not travel or material)\n            fee_materials,\n            fee_travel\n        };\n    };\n\n    getMessageSpeakerName = (displayData, sid) => {\n        const Displaylists = displayData.displayLists.toJS();\n        let spkr = _.head(getSpeakersFromDisplayLists(Displaylists, sid));\n        return (spkr && spkr.name_full) || (`speaker #${sid}`);\n    };\n\n    /**\n     *\n     * @param spec\n     */\n    getMyInfo = (spec = {}) => {\n        const {\n            jobBoard,\n            speakerInfo,\n            job,\n            eid\n        } = spec;\n\n        let jobSummary = job;\n\n        if(job && job.get('jobSummary')) {\n            jobSummary = job.get('jobSummary');\n        }\n\n        let event_id;\n\n        if(_.has(spec, 'eid')) {\n            event_id = eid;\n        } else if(_.has(jobSummary, 'event_id')) {\n            event_id = jobSummary.event_id;\n        } else {\n            event_id = jobSummary.get('event_id');\n        }\n\n        return _.get(jobBoard.toJS(), [\"per_sid\", speakerInfo.selectedSpeaker.get('sid'), event_id], {});\n    };\n\n    getNotes = (pJob) => {\n        let job = pJob.toJS();\n        let event = job.event;\n        let notes = _.get(event, \"Note\", \"\");\n\n        let details_note = _.first(_.filter(notes, (note) => {\n            return /== Event Details ==/.test(note.content);\n        }));\n\n        let detailsInNotes = details_note ? details_note.content : '';\n\n        if (!_.isString(detailsInNotes) || detailsInNotes.trim().length === 0) {\n            return [];\n        }\n\n        let result = [];\n\n        _.each(detailsInNotes.split(\"\\n\"), (line) => {\n            if (/== Event Details ==/.test(line)) {\n                return;\n            }\n            let line_parts = line.split(': ');\n            if (line_parts.length === 2) {\n                result.push({label: line_parts[0], value: line_parts[1]});\n            } else if (result.length > 0) {\n                result[result.length - 1].value += `\\n${line_parts.join(' ')}`;\n            } else {\n                result.push({value: line_parts.join(': ')});\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Returns the Offer status of a Job record\n     *\n     * @param {Object} myInfo\n     * @returns {Object}\n     */\n    getOfferStatus = (myInfo) => {\n        let n_unread = _.get(myInfo, \"n_unread\", 0);\n        let status = 0;\n\n        if (n_unread > 0) status = 1; //\"unread message\";\n\n        if (_.get(myInfo, \"mp_agreement\", null)) {\n            let signed_b = _.get(myInfo, \"mp_agreement.buyer_signed\", false);\n            let signed_s = _.get(myInfo, \"mp_agreement.speaker_signed\", false);\n            let is_accepted = _.get(myInfo, \"mp_agreement.is_accepted\", false);\n\n            if (is_accepted) {\n                status = _.max([status, 4]); //\"offer accepted\";\n                if (_.get(myInfo, \"mp_agreement.is_deposit_paid\", false)) status = _.max([status, 5]);\n                if (_.get(myInfo, \"mp_agreement.is_balance_paid\", false)) status = _.max([status, 6]);\n            } else if (signed_b && !signed_s) {\n                status = _.max([status, 3]); //\"waiting you\"\n            } else if (!signed_b && signed_s) {\n                status = _.max([status, 2]); //\"waiting client\"\n            }\n        }\n\n        return {index: status, status: OFFER_STATUS_LIST.get(status)};\n    };\n\n    getOfferStatusDisplay = (myInfo) => {\n        const status = getOfferStatus(myInfo).status;\n\n        if(status) {\n            return status.get('display');\n        }\n    };\n\n    getOfferStatusIndexByJob = (myInfo) => {\n        return getOfferStatus(myInfo).index;\n    };\n\n    getOfferStatusIndexByStatus = (status) => {\n        let statusIndex = 0;\n\n        OFFER_STATUS_LIST.map((offerStatus, index) => {\n            if(offerStatus.key === status)\n                statusIndex = index;\n        });\n\n        return statusIndex;\n    };\n\n    /**\n     *\n     * @param event\n     * @param sid\n     * @returns {Record|Map|OfferStatusModel}\n     */\n    getOfferEventStatus = (event, sid) => {\n        const eventObj = event.toJS();\n        let status = 0;\n        let statusIndex = 0;\n\n        if(!_.isEmpty(eventObj.MPJobStatus)) {\n            statusIndex = getOfferStatusIndexByStatus(eventObj.MPJobStatus);\n            return OFFER_STATUS_LIST.get(statusIndex);\n        }\n\n        if (_.get(eventObj, [\"MPAgreement\", sid], false)) {\n            // eslint-disable-next-line no-bitwise\n            if ((_.get(eventObj, [\"MPAgreement\", sid, \"flags\"], 0) & 1) > 0) { //flag \"1\" means \"speaker initiated offer\";\n                status = 2;\n            } else {\n                status = 3;\n            }\n            if (_.get(eventObj, [\"MPAgreement\", sid, \"is_accepted\"], false)) {\n                status = 4;\n\n                if (_.get(eventObj, [\"MPPaymentStatus\", sid, \"deposit\"], false)) status = _.max([5, status]);\n                if (_.get(eventObj, [\"MPPaymentStatus\", sid, \"balance\"], false)) status = _.max([6, status]);\n            }\n\n            if (status >= 5) {\n                let tomorrow = new Date();\n                tomorrow.setDate(tomorrow.getDate() + 1);\n\n                if (_.get(eventObj, \"startdate\", 0) >= tomorrow) status = 7; //completed\n            }\n        }\n\n        return OFFER_STATUS_LIST.get(status);\n    };\n\n    getPayments = (jobDetail) => {\n        let event = jobDetail.get('event').toJS();\n        let payments = {};\n        _.each(_.get(event, \"MPPaymentsUnmapped\", {}), (payment) => {\n            payments[payment.id] = payment;\n        });\n\n        return payments;\n    };\n\n    getShortListDescription = (pJob, displayData) => {\n        let job = pJob.toJS();\n        let event = job.event;\n        let displayLists = displayData.displayLists.toJS();\n\n        let shortlist_sids = _.uniq(_.get(event, 'MPshortlist.speaker_ids', []));//uniq doubles as a cast to Array\n        let my_auted_speakers_on_this_shortlist = _.filter(displayLists.perspeaker, (speaker) => {\n            return _.includes(shortlist_sids, _.parseInt(speaker.sid));\n        });\n\n        let flag_mp_job_board = _.includes(event.flags_as_array, 'mp_job_board');\n        let flag_bookmenow = _.includes(event.flags_as_array, 'bookmenow');//what to do with this\n        let n_on_shortlist = _.get(event, 'MPshortlist.speaker_ids', []).length;\n        let n_other_speakers = n_on_shortlist - my_auted_speakers_on_this_shortlist.length;\n\n        let message = '';\n\n        if (flag_bookmenow) {\n            return getText('This job came through the Book Me Now link on your own website and is exclusively for you.');\n        }\n\n        if (my_auted_speakers_on_this_shortlist.length === 0) {//not on this shortlist\n            if (flag_mp_job_board) {\n                message += getText('This is an open call for speakers. ');\n            }\n            if (n_on_shortlist > 0) {\n                message += n_on_shortlist + getText(' speakers currently under consideration for this job. ');\n            }\n        } else {//on this shortlist\n            message += _.map(my_auted_speakers_on_this_shortlist, (speaker) => {\n                return speaker.name_full;\n            }).join(', ');\n            message += getText(' is on the shortlist for this event');\n            if (n_other_speakers > 0) {\n                message += getText(' along with %1$s other %2$s', {\n                    params: [\n                        n_other_speakers,\n                        (n_other_speakers > 1 ? 's' : '')\n                    ]\n                });\n            }\n            message += '. ';\n            if (flag_mp_job_board) {\n                message += getText('This is also an open call for speakers. ');\n            }\n        }\n        return message;\n    };\n\n    getTopics = (pJob) => {\n        let job = pJob;\n\n        if(pJob.get('jobSummary')) {\n            job = pJob.get('jobSummary');\n        }\n\n        const topics = job.get('topics');\n        let topicList = [];\n\n        if(_.isString(topics)) {\n            topicList = topics.split('/');\n        } else if (!_.isNull(topics)) {\n            topicList = _.uniq(_.flattenDeep(_.map(topics.toJS(), (topic) => {\n                return topic.split('/');\n            })));\n        }\n\n        return topicList;\n    };\n\n    getTotalUnread = (jobBoard, sid) => {\n        const perSid = jobBoard.per_sid.get(sid.toString());\n        let totalUnread = 0;\n\n        if(!perSid) {\n            return totalUnread;\n        }\n\n        perSid.map((event) => {\n            totalUnread += event.get('n_unread');\n        });\n\n        return totalUnread;\n    };\n\n    isJobLead = (params = {}) => {\n        let my_info = getMyInfo(params);\n\n        let is_on_shortlist = !!_.get(my_info, \"is_on_shortlist\", false);\n\n        if (_.get(my_info, \"is_banned_from_shortlist\", false) || _.get(my_info, \"is_removed_from_shortlist\", false)) {\n            return false;\n        }\n\n        return !is_on_shortlist;\n    };\n\n    isJobOffer = (params = {}) => {\n        let my_info = getMyInfo(params);\n\n        if(!my_info) {\n            return false;\n        }\n\n        let is_on_shortlist = !!_.get(my_info, \"is_on_shortlist\", false);\n        let is_accepted = !!_.get(my_info, \"mp_agreement.is_accepted\", false);\n\n        if (_.get(my_info, \"is_banned_from_shortlist\", false) || _.get(my_info, \"is_removed_from_shortlist\", false)) {\n            return false;\n        }\n\n        return is_on_shortlist && !is_accepted;\n    };\n\n    /**\n     *\n     * @param data\n     */\n    loadJobAgreement = (data) => {\n        radio(RADIOS.services.LOAD_JOB_AGREEMENT).broadcast(data);\n    };\n\n    /**\n     * Handles the loadJobBoard action\n     *\n     * @param data\n     * @private\n     */\n    loadJobBoard = (data) => {\n        radio(RADIOS.services.LOAD_JOB_BOARD).broadcast(data);\n    };\n\n    loadJobEvent = (data) => {\n        radio(RADIOS.services.LOAD_JOB_EVENT).broadcast(data);\n    };\n\n    loadJobMessages = (data) => {\n        radio(RADIOS.services.LOAD_JOB_MESSAGES).broadcast(data);\n    };\n\n    markMessagesRead = (data) => {\n        radio(RADIOS.services.READ_JOB_MESSAGES).broadcast(data);\n    };\n\n    /**\n     *\n     * @param job\n     * @param pView\n     * @returns {array}\n     */\n    selectJob = (job, pView) => {\n        let radios = [];\n\n        radios.push({\n            type: RADIOS.stores.JOB_BOARD_SELECT_JOB,\n            payload: job\n        });\n\n        if(_.isArray(pView)) {\n            radios.push({\n                type: RADIOS.stores.NAV_SET_SUB_VIEW,\n                payload: pView\n            });\n        } else {\n            radios.push({\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: pView || VIEWS.jobSubViews.JOB_DETAIL_VIEW\n            });\n        }\n\n        return radios;\n    };\n\n    sendJobApplication = (data) => {\n        radio(RADIOS.services.SEND_JOB_APPLICATION).broadcast(data);\n    };\n\n    sendJobMessage = (data) => {\n        radio(RADIOS.services.SEND_JOB_MESSAGE).broadcast(data);\n    };\n\n    sortJobs = (jobList) => {\n        if(jobList) {\n            return jobList.sort((j1, j2) => {\n                const date1 = moment(DateTools.convertFromBalboaTrunkTimestamp(j1.get('starttime')));\n                const date2 = moment(DateTools.convertFromBalboaTrunkTimestamp(j2.get('starttime')));\n\n                if(j1 && !j2) {\n                    return -1;\n                }\n\n                if(!j1 && j2) {\n                    return 1;\n                }\n\n                if(j1.get('allow_new_applicants') && j2.get('allow_new_applicants') === false) {\n                    return -1;\n                }\n\n                if(j1.get('allow_new_applicants') === false && j2.get('allow_new_applicants')) {\n                    return 1;\n                }\n\n                let a = j1.toJS();\n                let b = j2.toJS();\n\n                let a_ag = (a.my_info && a.my_info.mp_agreement) || {};\n                let b_ag = (b.my_info && b.my_info.mp_agreement) || {};\n                let a_signed = (a_ag.buyer_signed ? 3 : 0) + (a_ag.speaker_signed ? 1 : 0);\n                let b_signed = (b_ag.buyer_signed ? 3 : 0) + (b_ag.speaker_signed ? 1 : 0);\n                if (a_signed !== b_signed) {\n                    return b_signed - a_signed;\n                }\n\n                if(!date1 && date2) {\n                    return -1;\n                }\n\n                if(date1 && !date2) {\n                    return 1;\n                }\n\n                if(date1.isBefore(date2)) {\n                    return -1;\n                }\n\n                if(date2.isBefore(date1)) {\n                    return 1;\n                }\n\n                return 0;\n            });\n        }\n    };\n\n    /**\n     * Handles the updateDashboardStore action\n     *\n     * @param data\n     * @private\n     */\n    updateJobBoardStore = (data) => {\n        return {\n            type: RADIOS.stores.JOB_BOARD_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    updateJobAgreement = (data) => {\n        return {\n            type: RADIOS.stores.JOB_BOARD_UPDATE_AGREEMENT,\n            payload: data\n        };\n    };\n\n    updateJobDetail = (data) => {\n        return {\n            type: RADIOS.stores.JOB_BOARD_UPDATE_JOB_DETAIL,\n            payload: data\n        };\n    };\n\n    updateJobMessages = (data) => {\n        return {\n            type: RADIOS.stores.JOB_BOARD_UPDATE_JOB_MESSAGES,\n            payload: data\n        };\n    };\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    return {\n        getBudget,\n        getBuyerName,\n        getCompanyName,\n        getCommission,\n        getEventDate,\n        getLedgerData,\n        getMessageSpeakerName,\n        getMyInfo,\n        getNotes,\n        getOfferStatus,\n        getOfferStatusDisplay,\n        getOfferStatusIndexByJob,\n        getOfferStatusIndexByStatus,\n        getOfferEventStatus,\n        getPayments,\n        getShortListDescription,\n        getTopics,\n        getTotalUnread,\n        isJobLead,\n        isJobOffer,\n        loadJobBoard,\n        loadJobAgreement,\n        loadJobEvent,\n        loadJobMessages,\n        markMessagesRead,\n        selectJob,\n        sendJobMessage,\n        sendJobApplication,\n        sortJobs,\n        updateJobBoardStore,\n        updateJobAgreement,\n        updateJobDetail,\n        updateJobMessages\n    };\n}\n\nexport default JobBoardActionsFactory;\n","/**\n * Generates the Message actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst MessageActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _addMessage;\n    let _clearMessages;\n    let _setMessage;\n\n    /**\n     * Handles the addMessage action\n     *\n     * @param msg\n     * @private\n     */\n    _addMessage = (msg) => {\n        return {\n            type: RADIOS.stores.MESSAGE_STORE_ADD,\n            payload: msg\n        };\n    };\n\n    /**\n     * Handles the clearMessages action\n     *\n     * @private\n     */\n    _clearMessages = () => {\n        return {\n            type: RADIOS.stores.MESSAGE_STORE_CLEAR\n        };\n    };\n\n    /**\n     * Makes sure this is the only message on the stack.\n     *\n     * @param msg\n     * @private\n     */\n    _setMessage = (msg) => {\n        return [\n            _clearMessages(),\n            _addMessage(msg)\n        ];\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        addMessage: _addMessage,\n        clearMessages: _clearMessages,\n        setMessage: _setMessage\n    };\n}\n\nexport default MessageActionsFactory;","/**\n * Generates a Nav action\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst NavActionsFactory = (spec = {}) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const { List } = require('immutable');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        DisplayDataActionsFactory,\n        EventActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    /******************************************************************************\n     *\n     * Private Members\n     *\n     *****************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const {verifyDisplayLists} = DisplayDataActionsFactory({});\n    const {clearEvent, toggleEventDirty} = EventActionsFactory({});\n    const {showExitDirtyConfirmation} = DialogActionsFactory({});\n    const {doSubmitForm, toggleViewDirty} = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _changeEventView;\n    let _changeMainView;\n    let _addSubView;\n    let _checkForDirty;\n    let _clearSubView;\n    let _getCurrentSubView;\n    let _popSubView;\n    let _nextEventView;\n    let _prevEventView;\n    let _resetNavigation;\n    let _setSubView;\n    let _toggleDrawer;\n    let _updateNavStore;\n\n    /**\n     * Handles the changeEventView action\n     *\n     * @param view\n     * @private\n     */\n    _changeEventView = (view, forceRefresh) => {\n        let newView = view;\n\n        if (typeof view === 'string') {\n            _.map(VIEWS.eventViews, (navItem) => {\n                if (navItem.get('id') === view) {\n                    newView = navItem;\n                }\n            });\n        }\n\n        verifyDisplayLists();\n\n        return [\n            {\n                type: RADIOS.stores.MESSAGE_STORE_CLEAR\n            },\n            {\n                type: RADIOS.stores.NAV_STORE_UPDATE,\n                payload: {\n                    eventView: newView,\n                    changeStamp: (forceRefresh ? new Date().getTime() : 0)\n                }\n            }\n        ];\n    };\n\n    /**\n     * Handles the changeMainView action\n     *\n     * @param view\n     * @private\n     */\n    _changeMainView = (view) => {\n        let newView = view;\n\n        if (typeof view === 'string') {\n            _.map(VIEWS.mainViews, (navItem) => {\n                if (navItem.get('id') === view) {\n                    newView = navItem;\n                }\n            });\n        }\n\n        verifyDisplayLists();\n\n        return [\n            {\n                type: RADIOS.stores.MESSAGE_STORE_CLEAR\n            },\n            {\n                type: RADIOS.stores.CLEAR_EVENT_DATA\n            },\n            {\n                type: RADIOS.stores.NAV_CHANGE_MAIN_VIEW,\n                payload: newView\n            }\n        ];\n    };\n\n    /**\n     * Handles the addSubView action\n     *\n     * @param view\n     * @private\n     */\n    _addSubView = (view) => {\n        let newView = view;\n\n        if (typeof view === 'string') {\n            _.map(VIEWS.subViews, (navItem) => {\n                if (navItem.get('id') === view) {\n                    newView = navItem;\n                }\n            });\n        }\n\n        return [\n            {\n                type: RADIOS.stores.MESSAGE_STORE_CLEAR\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: newView\n            }\n        ];\n    };\n\n    /**\n     *\n     * @param {object} spec\n     * @param {function} spec.dispatch\n     * @param {object} spec.event - Immutable Event Model\n     * @param {object} spec.view\n     * @param {function} spec.changeViewCallback\n     * @private\n     */\n    _checkForDirty = (spec) => {\n        const {\n            dispatch,\n            event,\n            view,\n            changeViewCallback\n        } = spec;\n\n        let viewDirty = view.get('dirty');\n        let eventDirty = event.get('dirty');\n\n        if (viewDirty || eventDirty) {\n            dispatch(showExitDirtyConfirmation({\n                onContinue: () => {\n                    // if we are leaving via footer nav, then view and event\n                    // dirty flags need to be cleared as we are leaving the\n                    // event entirely.\n\n                    dispatch(clearEvent());\n                    dispatch(toggleViewDirty(false));\n                    dispatch(toggleEventDirty(false));\n\n                    if (_.isFunction(changeViewCallback)) {\n                        changeViewCallback();\n                    }\n                    // Make sure the display list data isn't stale with every navigation change\n                    verifyDisplayLists();\n                },\n                onCancel: () => {\n                    // dispatch change to trigger screen save\n                    dispatch(doSubmitForm({\n                        callback: changeViewCallback\n                    }));\n                }\n            }));\n        }\n        else {\n            if (_.isFunction(changeViewCallback)) {\n                changeViewCallback();\n            }\n        }\n    };\n\n    _clearSubView = () => {\n        return [\n            {\n                type: RADIOS.stores.MESSAGE_STORE_CLEAR\n            },\n            {\n                type: RADIOS.stores.NAV_CLEAR_SUB_VIEW,\n                payload: undefined\n            }\n        ];\n    };\n\n    _getCurrentSubView = (nav) => {\n        if(nav.subView && nav.subView.count() > 0) {\n            return nav.subView.get(nav.subView.count() - 1);\n        }\n\n        return null;\n    };\n\n    /**\n     *\n     * @private\n     */\n    _popSubView = () => {\n        return [\n            {\n                type: RADIOS.stores.MESSAGE_STORE_CLEAR\n            },\n            {\n                type: RADIOS.stores.NAV_POP_SUB_VIEW,\n                payload: undefined\n            }\n        ];\n    };\n\n    /**\n     *\n     * @returns {{type: *}}\n     * @private\n     */\n    _nextEventView = () => {\n        return {\n            type: RADIOS.stores.NAV_NEXT_EVENT_VIEW\n        };\n    };\n\n    /**\n     *\n     * @returns {{type: *}}\n     * @private\n     */\n    _prevEventView = () => {\n        return {\n            type: RADIOS.stores.NAV_PREV_EVENT_VIEW\n        };\n    };\n\n    /**\n     * Handles the resetNavigation action\n     *\n     * @private\n     */\n    _resetNavigation = () => {\n        return [\n            {\n                type: RADIOS.stores.MESSAGE_STORE_CLEAR\n            },\n            {\n                type: RADIOS.stores.NAV_STORE_RESET\n            }\n        ];\n    };\n\n    _setSubView = (viewList) => {\n        return [\n            {\n                type: RADIOS.stores.MESSAGE_STORE_CLEAR\n            },\n            {\n                type: RADIOS.stores.NAV_SET_SUB_VIEW,\n                payload: List(viewList)\n            }\n        ];\n    };\n\n    /**\n     *\n     * @param {bool} show\n     * @returns {object}\n     * @private\n     */\n    _toggleDrawer = (show) => {\n        return {\n            type: RADIOS.stores.NAV_TOGGLE_DRAWER,\n            payload: show\n        };\n    };\n\n    /**\n     * Handles the updateNavStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateNavStore = (data) => {\n        return {\n            type: RADIOS.stores.NAV_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        changeEventView: _changeEventView,\n        changeMainView: _changeMainView,\n        addSubView: _addSubView,\n        checkForDirty: _checkForDirty,\n        clearSubView: _clearSubView,\n        getCurrentSubView: _getCurrentSubView,\n        popSubView: _popSubView,\n        nextEventView: _nextEventView,\n        prevEventView: _prevEventView,\n        resetNavigation: _resetNavigation,\n        setSubView: _setSubView,\n        toggleDrawer: _toggleDrawer,\n        updateNavStore: _updateNavStore\n    };\n}\n\nexport default NavActionsFactory;","/**\n * Generates the Note Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst NoteActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    /******************************************************************************\n     *\n     * Private Members\n     *\n     *****************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _saveNote;\n    let _selectNote;\n\n    /**\n     * Adds or Saves a note to the existing collection, unpersisted with server\n     *\n     * @param {object} note\n     * @private\n     */\n    _saveNote = (note) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_SAVE_NOTE,\n            payload: note\n        };\n    };\n\n    /**\n     * Updates the store with the selected Note object and navigates to the subview\n     *\n     * @param {object} data\n     * @private\n     */\n    _selectNote = (data) => {\n        return [\n            {\n                type: RADIOS.stores.EVENT_STORE_SELECT_NOTE,\n                payload: data\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: VIEWS.subViews.NOTE_VIEW\n            }\n        ];\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        saveNote: _saveNote,\n        selectNote: _selectNote\n    };\n}\n\nexport default NoteActionsFactory;","/**\n * Generates the Overlay Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst OverlayActionsFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n    let _updateOverlayStore;\n    let _clearOverlay;\n\n    /**\n     * Handles the updateOverlayStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateOverlayStore = (data) => {\n        return {\n            type: RADIOS.stores.OVERLAY_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the clearOverlay action\n     *\n     * @private\n     */\n    _clearOverlay = () => {\n        return {\n            type: RADIOS.stores.OVERLAY_STORE_CLEAR\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        updateOverlayStore: _updateOverlayStore,\n        clearOverlay: _clearOverlay\n    };\n}\n\nexport default OverlayActionsFactory;","/**\n * Generates the Product Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst ProductActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Actions\n    const EventActionsFactory = require('./EventActions').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {extractSelectedItem} = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteProduct;\n    let _extractSelectedProduct;\n    let _saveProduct;\n    let _selectProduct;\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _deleteProduct = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_DELETE_PRODUCT,\n            payload: data\n        };\n    };\n\n    /**\n     *\n     * @param event\n     * @returns {*}\n     * @private\n     */\n    _extractSelectedProduct = (event) => {\n        return extractSelectedItem(event, 'selectedProduct', 'ProductSale');\n    };\n\n    /**\n     *\n     * @param service\n     * @private\n     */\n    _saveProduct = (product) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_SAVE_PRODUCT,\n            payload: product\n        };\n    };\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _selectProduct = (data) => {\n        return [\n            {\n                type: RADIOS.stores.EVENT_STORE_SELECT_PRODUCT,\n                payload: data\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: VIEWS.subViews.PRODUCT_VIEW\n            }\n        ];\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        deleteProduct: _deleteProduct,\n        extractSelectedProduct: _extractSelectedProduct,\n        saveProduct: _saveProduct,\n        selectProduct: _selectProduct\n    };\n}\n\nexport default ProductActionsFactory;","/**\n * Generates a Push Action\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst PushActionsFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // NPM\n    const _ = require('lodash');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Memebers\n     *\n     *************************************************************************/\n\n    const RADIOS = require('../enums/RADIOS').default;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearNotification;\n    let _notify;\n    let _parseBody;\n    let _register;\n    let _updatePushStore;\n\n    /**\n     *\n     * @private\n     */\n    _clearNotification = () => {\n        return {\n            type: RADIOS.stores.PUSH_STORE_UPDATE,\n            payload: {\n                notification: null\n            }\n        };\n    };\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _notify = (data) => {\n        return {\n            type: RADIOS.stores.PUSH_STORE_NOTIFY,\n            payload: data\n        };\n    };\n\n    /**\n     * Takes in the Body of the notification and parses the information\n     *\n     * @param {string} additionalData\n     * @returns {object}\n     * @private\n     */\n    _parseBody = (additionalData) => {\n        if (!additionalData)\n            return null;\n\n        /**\n         * New structure layout:\n         *\n         * data.additionalData.default.data.{\n         *  body,\n         *  title,\n         *  eventId,\n         *  category\n         * }\n         *\n         */\n\n        if(additionalData.hasOwnProperty('default') && additionalData.default.hasOwnProperty('data')) {\n            return additionalData.default.data;\n        }\n\n        return null;\n    };\n\n    /**\n     *\n     * @param date\n     * @private\n     */\n    _register = (data) => {\n        return {\n            type: RADIOS.stores.PUSH_STORE_REGISTER,\n            payload: data\n        };\n    };\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _updatePushStore = (data) => {\n        return {\n            type: RADIOS.stores.PUSH_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        clearNotification: _clearNotification,\n        notify: _notify,\n        parseBody: _parseBody,\n        register: _register,\n        updatePushStore: _updatePushStore\n    };\n}\n\nexport default PushActionsFactory;","/**\n * Generates the Search Actions\n *\n * @param spec\n * @returns {{clearSearch: *, updateSearchStore: *, searchEvents: *}}\n * @constructor\n */\nconst SearchActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n\n    // Radios\n    const {radio} = require('react-pubsub-via-radio.js');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _autoSearch;\n    let _clearSearch;\n    let _updateSearchStore;\n    let _searchEvents;\n\n    /**\n     *\n     * @param searchTerm\n     * @returns {{type: *, payload: *}}\n     * @private\n     */\n    _autoSearch = (data) => {\n        let payload = data;\n\n        if(_.isString(data)) {\n            payload = {\n                searchTerm: data\n            };\n        }\n\n        return {\n            type: RADIOS.stores.SEARCH_STORE_AUTO_SEARCH,\n            payload\n        };\n    };\n\n    /**\n     * Handles the clearSearch action\n     *\n     * @private\n     */\n    _clearSearch = () => {\n        return {\n            type: RADIOS.stores.SEARCH_STORE_CLEAR\n        };\n    };\n\n    /**\n     * Handles the updateSearchStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateSearchStore = (data) => {\n        return {\n            type: RADIOS.stores.SEARCH_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the searchEvents action\n     *\n     * @param data\n     * @private\n     */\n    _searchEvents = (data) => {\n        radio(RADIOS.services.SEARCH_EVENTS).broadcast(data);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        autoSearch: _autoSearch,\n        clearSearch: _clearSearch,\n        updateSearchStore: _updateSearchStore,\n        searchEvents: _searchEvents\n    };\n}\n\nexport default SearchActionsFactory;","/**\n * Generates the Service Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst ServiceActionsFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Actions\n    const EventActionsFactory = require('./EventActions').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {extractSelectedItem} = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteService;\n    let _extractSelectedService;\n    let _saveService;\n    let _selectService;\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _deleteService = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_DELETE_SERVICE,\n            payload: data\n        };\n    };\n\n    /**\n     *\n     * @param event\n     * @returns {*}\n     * @private\n     */\n    _extractSelectedService = (event) => {\n        return extractSelectedItem(event, 'selectedService', 'Service');\n    };\n\n    /**\n     *\n     * @param service\n     * @private\n     */\n    _saveService = (service) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_SAVE_SERVICE,\n            payload: service\n        };\n    };\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _selectService = (data) => {\n        return [\n            {\n                type: RADIOS.stores.EVENT_STORE_SELECT_SERVICE,\n                payload: data\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: VIEWS.subViews.SERVICE_VIEW\n            }\n        ];\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        deleteService: _deleteService,\n        extractSelectedService: _extractSelectedService,\n        saveService: _saveService,\n        selectService: _selectService\n    };\n}\n\nexport default ServiceActionsFactory;","/**\n * Generates the SpeakerInfo Actions\n *\n * @param spec\n * @returns {{updateSpeakerInfoStore: *, selectSpeaker: *, selectSpeakerBySid: *, determineMsm: *, clearSpeakerData: *}}\n * @constructor\n */\nconst SpeakerInfoActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const _ = require('lodash');\n\n    // Radios\n    const {radio} = require('react-pubsub-via-radio.js');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const GENERAL = require('../enums/GENERAL').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearSpeakerData;\n    let _determineMsm;\n    let _extractGroupCodeItem;\n    let _extractSpeakerProduct;\n    let _extractSpeakerService;\n    let getSpeakersFromDisplayLists;\n    let getFeeRange;\n    let loadShortProfile;\n    let _selectSpeaker;\n    let _selectSpeakerBySid;\n    let updateShortProfile;\n    let _updateSpeakerInfoStore;\n\n    /**\n     * Handles the clearSpeakerDate action\n     *\n     * @private\n     */\n    _clearSpeakerData = () => {\n        // Will be listened for on multiple stores\n        return {\n            type: RADIOS.stores.CLEAR_SPEAKER_DATA\n        };\n    };\n\n    /**\n     * Handles the determineMsm action\n     *\n     * @param speakerInfo\n     * @returns {boolean}\n     * @private\n     */\n    _determineMsm = (speakerInfo) => {\n        const speakerMode = speakerInfo.get('speakerMode');\n        const speakerList = speakerInfo.get('speakerList');\n\n        if (speakerMode === GENERAL.MULTIPLE_SPEAKER_MODE && speakerList && speakerList.size > 1) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     *\n     * @param {Record|SpeakerInfoModel} speakerInfo\n     * @param {string} groupCode\n     * @param {string} listField\n     * @returns {Record}\n     * @private\n     */\n    _extractGroupCodeItem = (speakerInfo, groupCode, listField) => {\n        if (!speakerInfo) {\n            return null;\n        }\n\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n        if (!selectedSpeaker) {\n            return null;\n        }\n\n        const itemList = selectedSpeaker.get(listField);\n\n        let retItem = null;\n\n        if (itemList && itemList.size) {\n            itemList.map((item) => {\n                if (!retItem && item.get('groupcode') === groupCode) {\n                    retItem = item;\n                }\n            });\n        }\n\n        return retItem;\n    };\n\n    /**\n     *\n     * @param {Record|SpeakerInfoModel} speakerInfo\n     * @param {string} groupCode\n     * @return {Record}\n     * @private\n     */\n    _extractSpeakerProduct = (speakerInfo, groupCode) => {\n        return _extractGroupCodeItem(speakerInfo, groupCode, 'productcodes');\n    };\n\n    /**\n     *\n     * @param {Record|SpeakerInfoModel} speakerInfo\n     * @param {string} groupCode\n     * @return {Record}\n     * @private\n     */\n    _extractSpeakerService = (speakerInfo, groupCode) => {\n        return _extractGroupCodeItem(speakerInfo, groupCode, 'servicecodes');\n    };\n\n    getFeeRange = (selectedSpeaker) => {\n        const profile = (selectedSpeaker.has('shortProfile') ? selectedSpeaker.get('shortProfile').toJS() : {});\n\n        return _.compact(_.map([profile.fee_low, profile.fee_high], (fee) => {\n            return _.isNumber(fee) && !_.isNaN(fee) && (fee >= 0) && (fee < Infinity)\n                ? esUtils.format_currency(fee, 0)\n                : false;\n        }));\n    };\n\n    getSpeakersFromDisplayLists = (Displaylists, ...sids) => {\n        return _.filter(Displaylists && Displaylists.perspeaker, (spkr) => {\n            return _.includes(sids, spkr.sid);\n        });\n    };\n\n    loadShortProfile = (data) => {\n        radio(RADIOS.services.GET_SHORT_PROFILE).broadcast(data);\n    };\n\n    /**\n     * Handles the selectSpeaker action\n     *\n     * @param speaker\n     * @private\n     */\n    _selectSpeaker = (speaker) => {\n        return {\n            type: RADIOS.stores.SPEAKER_INFO_STORE_SELECT_SPEAKER,\n            payload: speaker\n        };\n    };\n\n    /**\n     * Handles the selectSpeakerBySid action\n     *\n     * @param sid\n     * @private\n     */\n    _selectSpeakerBySid = (sid, auth, displayData) => {\n        return {\n            type: RADIOS.stores.SPEAKER_INFO_STORE_SELECT_SPEAKER_BY_SID,\n            payload: sid,\n            auth,\n            displayData\n        };\n    };\n\n    updateShortProfile = (data) => {\n        return {\n            type: RADIOS.stores.SPEAKER_INFO_STORE_UPDATE_SHORT_PROFILE,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the updateSpeakerInfo action\n     *\n     * @param data\n     * @private\n     */\n    _updateSpeakerInfoStore = (data) => {\n        return {\n            type: RADIOS.stores.SPEAKER_INFO_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        clearSpeakerData: _clearSpeakerData,\n        determineMsm: _determineMsm,\n        extractSpeakerProduct: _extractSpeakerProduct,\n        extractSpeakerService: _extractSpeakerService,\n        getFeeRange,\n        getSpeakersFromDisplayLists,\n        loadShortProfile,\n        selectSpeaker: _selectSpeaker,\n        selectSpeakerBySid: _selectSpeakerBySid,\n        updateShortProfile,\n        updateSpeakerInfoStore: _updateSpeakerInfoStore\n    };\n}\n\nexport default SpeakerInfoActionsFactory;","/**\n * Generates the StageTime Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst StageTimeActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Actions\n    const EventActionsFactory = require('./EventActions').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {extractSelectedItem} = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteStageTime;\n    let _extractSelectStageTime;\n    let _saveStageTime;\n    let _selectStageTime;\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _deleteStageTime = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_DELETE_STAGETIME,\n            payload: data\n        };\n    };\n\n    /**\n     *\n     * @param {Record|EventModel} event\n     * @returns {null|Record|StageTimeModel}\n     * @private\n     */\n    _extractSelectStageTime = (event) => {\n        return extractSelectedItem(event, 'selectedStageTime', 'Stagetime');\n    };\n\n    /**\n     * Adds or Updates a StageTime to the existing collection, unpersisted with the server\n     * @param {object} stageTime\n     * @private\n     */\n    _saveStageTime = (stageTime) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_SAVE_STAGETIME,\n            payload: stageTime\n        };\n    };\n\n    /**\n     * Updates the store with the selected Stage Time object and navigates to the subview\n     *\n     * @param {object} data\n     * @private\n     */\n    _selectStageTime = (data) => {\n        return [\n            {\n                type: RADIOS.stores.EVENT_STORE_SELECT_STAGETIME,\n                payload: data\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: VIEWS.subViews.STAGE_TIME_VIEW\n            }\n        ];\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        deleteStageTime: _deleteStageTime,\n        extractSelectedStageTime: _extractSelectStageTime,\n        saveStageTime: _saveStageTime,\n        selectStageTime: _selectStageTime\n    };\n}\n\nexport default StageTimeActionsFactory;","/**\n * Generates the Store Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst StoreActionsFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateAddId;\n    let _multiUpdateStart;\n    let _multiUpdateStop;\n\n    /**\n     * Generates a negative id to keep track of unsaved list items\n     * @returns {string}\n     */\n    _generateAddId = () => {\n        return (new Date().getTime() * -1).toString();\n    };\n\n    /**\n     * Handles the multiUpdateStart action\n     *\n     * @private\n     */\n    _multiUpdateStart = () => {\n        return {\n            type: RADIOS.stores.MULTI_UPDATE_START\n        };\n    };\n\n    /**\n     * Handles the multiUpdateStop action\n     *\n     * @private\n     */\n    _multiUpdateStop = () => {\n        return {\n            type: RADIOS.stores.MULTI_UPDATE_STOP\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        generateAddId: _generateAddId,\n        multiUpdateStart: _multiUpdateStart,\n        multiUpdateStop: _multiUpdateStop\n    };\n}\n\nexport default StoreActionsFactory;","/**\n * Generates the Event Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst TodoActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Actions\n    const EventActionsFactory = require('./EventActions').default;\n\n    /**********************************************************************\n     *\n     * Private Members\n     *\n     *********************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {extractSelectedItem} = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteTodo;\n    let _extractSelectedTodo;\n    let _getUndo;\n    let _saveTodo;\n    let _selectTodo;\n    let _setUndo;\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _deleteTodo = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_DELETE_TODO,\n            payload: data\n        };\n    };\n\n    /**\n     *\n     * @param event\n     * @returns {Record|null}\n     * @private\n     */\n    _extractSelectedTodo = (event) => {\n        return extractSelectedItem(event, 'selectedTodo', 'EventTodo');\n    };\n\n    /**\n     *\n     * @param {Record} todo\n     * @param {Record|ViewModel} view\n     * @returns {Record}\n     * @private\n     */\n    _getUndo = (todo, view) => {\n        const todoView = view.get('todoView');\n        if (_.has(todoView, [\"get\"])) {\n\n            const todoUndo = todoView.get('todoUndo');\n\n            return todoUndo.get(todo.get('id'));\n        }\n        return todo;\n    };\n\n    /**\n     * Adds or Saves a Todo to the existing collection, unpersisted with server\n     *\n     * @param data\n     * @private\n     */\n    _saveTodo = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_SAVE_TODO,\n            payload: data\n        };\n    };\n\n    /**\n     * Updates the store with the selected Todo object and navigates to the subview\n     *\n     * @param {object} data\n     * @private\n     */\n    _selectTodo = (data) => {\n        return [\n            {\n                type: RADIOS.stores.EVENT_STORE_SELECT_TODO,\n                payload: data\n            },\n            {\n                type: RADIOS.stores.NAV_ADD_SUB_VIEW,\n                payload: VIEWS.subViews.TODO_VIEW\n            }\n        ];\n    };\n\n    /**\n     *\n     * @param data\n     * @private\n     */\n    _setUndo = (data) => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_TODO_SET_UNDO,\n            payload: data\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        deleteTodo: _deleteTodo,\n        extractSelectedTodo: _extractSelectedTodo,\n        getUndo: _getUndo,\n        saveTodo: _saveTodo,\n        selectTodo: _selectTodo,\n        setUndo: _setUndo\n    };\n}\n\nexport default TodoActionsFactory;\n","/**\n * Generates the Venue Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst VenueActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _extractSelectedVenue;\n    let _saveVenue;\n\n    /**\n     *\n     * @param {Record|EventModel} event\n     * @param {string} venueId\n     * @returns {null|Record|Map}\n     * @private\n     */\n    _extractSelectedVenue = (event, venueId) => {\n        let modifiedEvent = event.get('modifiedEvent');\n\n        if (!modifiedEvent) {\n            modifiedEvent = event.get('selectedEvent');\n        }\n\n        const venueList = modifiedEvent.get('Venue');\n        let selectedVenue = null;\n\n        if (!_.isEmpty(venueId)) {\n            venueList.map((venue) => {\n                if (venue.get('id') === venueId) {\n                    selectedVenue = venue;\n                }\n            });\n        }\n\n        return selectedVenue;\n    };\n\n    /**\n     * Adds or Updates a Venue to the existing collection, unpersisted with the server\n     * @param {object} venue\n     * @private\n     */\n    _saveVenue = (venue) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_SAVE_VENUE,\n            payload: venue\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        extractSelectedVenue: _extractSelectedVenue,\n        saveVenue: _saveVenue\n    };\n}\n\nexport default VenueActionsFactory;","/**\n * Generates the View Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst ViewActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Utils\n    const {log} = require('../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearSubmitForm;\n    let _doSubmitForm;\n    let _updateViewStore;\n    let _toggleKeyboardActive;\n    let _toggleViewDirty;\n    let _setHeaderActions;\n    let _setHeaderText;\n\n    /**\n     *\n     * @returns {{type: string}}\n     * @private\n     */\n    _clearSubmitForm = () => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_CLEAR_SUBMIT_FORM\n        };\n    };\n\n    /**\n     *\n     * @returns {{type: string, payload: object}}\n     * @private\n     */\n    _doSubmitForm = (payload) => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_DO_SUBMIT_FORM,\n            payload\n        };\n    };\n\n    /**\n     * Handles the updateViewStore action\n     *\n     * @param data\n     * @private\n     */\n    _updateViewStore = (data) => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**\n     *\n     * @param data\n     * @returns {{type: *, payload: *}}\n     * @private\n     */\n    _toggleKeyboardActive = (data) => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_TOGGLE_KEYBOARD_ACTIVE,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the toggleViewDirty action\n     *\n     * @param data\n     * @private\n     */\n    _toggleViewDirty = (data) => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_TOGGLE_DIRTY,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the setHeader action\n     *\n     * @param actions\n     * @private\n     */\n    _setHeaderActions = (actions) => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_UPDATE,\n            payload: {\n                actions: actions\n            }\n        };\n    };\n\n    /**\n     *\n     * @param headerText\n     * @returns {{type: string, payload: {headerText: *}}}\n     * @private\n     */\n    _setHeaderText = (headerText) => {\n        return {\n            type: RADIOS.stores.VIEW_STORE_UPDATE,\n            payload: {\n                headerText\n            }\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        clearSubmitForm: _clearSubmitForm,\n        doSubmitForm: _doSubmitForm,\n        updateViewStore: _updateViewStore,\n        toggleKeyboardActive: _toggleKeyboardActive,\n        toggleViewDirty: _toggleViewDirty,\n        setHeaderActions: _setHeaderActions,\n        setHeaderText: _setHeaderText\n    };\n}\n\nexport default ViewActionsFactory;","//-----------------------------------------------------------------------------\n//\n// Imports\n//\n//-----------------------------------------------------------------------------\n\nconst _ = require('lodash');\nconst {Iterable} = require('immutable');\n// const config = require('../config');\n\n//-----------------------------------------------------------------------------\n//\n// Private Members\n//\n//-----------------------------------------------------------------------------\n\n//-------------------------------------\n// Methods\n//-------------------------------------\n\n/**\n * Converts the passed in item to an object that can be handled by console\n *\n * @param {Object|Iterable} obj\n * @returns {Object}\n * @private\n */\nconst _toPrintable = (obj) => {\n    if (Iterable.isIterable(obj) || _.isFunction(obj.toJS)) {\n        return obj.toJS();\n    }\n\n    return obj;\n};\n\n/**\n *\n * @param obj\n * @private\n */\nconst _log = (obj) => {\n    if (process.env.REACT_APP_LOGGING) {\n        console.log(_toPrintable(obj));\n    }\n};\n\n/**\n *\n * @param obj\n * @private\n */\nconst _warn = (obj) => {\n    if (process.env.REACT_APP_LOGGING) {\n        console.warn(_toPrintable(obj));\n    }\n};\n\n//-----------------------------------------------------------------------------\n//\n// Public Interface\n//\n//-----------------------------------------------------------------------------\n\nexport default {\n    log: _log,\n    warn: _warn\n};\n","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst _ = require('lodash');\n\n/******************************************************************************\n *\n * Public Interface\n *\n *****************************************************************************/\n\nexport default {\n    stores: {\n        AUTH_STORE_UPDATE: 'AUTH_STORE_UPDATE',\n        CALENDAR_STORE_MERGE_CALENDAR_DATA: 'CALENDAR_STORE_MERGE_CALENDAR_DATA',\n        CALENDAR_STORE_NEXT_MONTH: 'CALENDAR_STORE_NEXT_MONTH',\n        CALENDAR_STORE_PREV_MONTH: 'CALENDAR_STORE_PREV_MONTH',\n        CALENDAR_STORE_SELECT_DAY: 'CALENDAR_STORE_SELECT_DAY',\n        CALENDAR_STORE_UPDATE: 'CALENDAR_STORE_UPDATE',\n        CALENDAR_STORE_UPDATE_CALENDAR_PERIOD: 'CALENDAR_STORE_UPDATE_CALENDAR_PERIOD',\n        CLEAR_EVENT_DATA: 'CLEAR_EVENT_DATA',\n        CLEAR_EVENT_ASSOCIATED_DATA: 'CLEAR_EVENT_ASSOCIATED_DATA',\n        CLEAR_SPEAKER_DATA: 'CLEAR_SPEAKER_DATA',\n        DASHBOARD_STORE_UPDATE: 'DASHBOARD_STORE_UPDATE',\n        DIALOG_STORE_UPDATE: 'DIALOG_STORE_UPDATE',\n        DIALOG_STORE_CLOSE_DIALOG: 'DIALOG_STORE_CLOSE_DIALOG',\n        DISPLAY_DATA_STORE_UPDATE: 'DISPLAY_DATA_STORE_UPDATE',\n        COMPANY_DATA_STORE_UPDATE: 'COMPANY_DATA_STORE_UPDATE',\n        EVENT_STORE_DELETE_CONTACT: 'EVENT_STORE_DELETE_CONTACT',\n        EVENT_STORE_DELETE_PRODUCT: 'EVENT_STORE_DELETE_PRODUCT',\n        EVENT_STORE_DELETE_SERVICE: 'EVENT_STORE_DELETE_SERVICE',\n        EVENT_STORE_DELETE_STAGETIME: 'EVENT_STORE_DELETE_STAGETIME',\n        EVENT_STORE_DELETE_TODO: 'EVENT_STORE_DELETE_TODO',\n        EVENT_STORE_DISCARD_EVENT_CHANGES: 'EVENT_STORE_DISCARD_EVENT_CHANGES',\n        EVENT_STORE_MERGE_EVENT_DATA: 'EVENT_STORE_MERGE_EVENT_DATA',\n        EVENT_STORE_MERGE_MODIFIED_EVENT: 'EVENT_STORE_MERGE_MODIFIED_EVENT',\n        EVENT_STORE_SAVE_CONTACT: 'EVENT_STORE_SAVE_CONTACT',\n        EVENT_STORE_SAVE_NOTE: 'EVENT_STORE_SAVE_NOTE',\n        EVENT_STORE_SAVE_PRODUCT: 'EVENT_STORE_SAVE_PRODUCT',\n        EVENT_STORE_SAVE_SERVICE: 'EVENT_STORE_SAVE_SERVICE',\n        EVENT_STORE_SAVE_STAGETIME: 'EVENT_STORE_SAVE_STAGETIME',\n        EVENT_STORE_SAVE_TODO: 'EVENT_STORE_SAVE_TODO',\n        EVENT_STORE_SAVE_VENUE: 'EVENT_STORE_SAVE_VENUE',\n        EVENT_STORE_SELECT_CONTACT: 'EVENT_STORE_SELECT_CONTACT',\n        EVENT_STORE_SELECT_EVENT: 'EVENT_STORE_SELECT_EVENT',\n        EVENT_STORE_SELECT_NOTE: 'EVENT_STORE_SELECT_NOTE',\n        EVENT_STORE_SELECT_PRODUCT: 'EVENT_STORE_SELECT_PRODUCT',\n        EVENT_STORE_SELECT_SERVICE: 'EVENT_STORE_SELECT_SERVICE',\n        EVENT_STORE_SELECT_STAGETIME: 'EVENT_STORE_SELECT_STAGETIME',\n        EVENT_STORE_SELECT_TODO: 'EVENT_STORE_SELECT_TODO',\n        EVENT_STORE_TOGGLE_DIRTY: 'EVENT_STORE_TOGGLE_DIRTY',\n        EVENT_STORE_UPDATE: 'EVENT_STORE_UPDATE',\n        JOB_BOARD_SELECT_JOB: 'JOB_BOARD_SELECT_JOB',\n        JOB_BOARD_STORE_UPDATE: 'JOB_BOARD_STORE_UPDATE',\n        JOB_BOARD_UPDATE_AGREEMENT: 'JOB_BOARD_UPDATE_AGREEMENT',\n        JOB_BOARD_UPDATE_JOB_DETAIL: 'JOB_BOARD_UPDATE_JOB_DETAIL',\n        JOB_BOARD_UPDATE_JOB_MESSAGES: 'JOB_BOARD_UPDATE_JOB_MESSAGES',\n        LOADING_STORE_HIDE: 'LOADING_STORE_HIDE',\n        LOADING_STORE_SHOW: 'LOADING_STORE_SHOW',\n        LOADING_STORE_UPDATE: 'LOADING_STORE_UPDATE',\n        LOGIN_SUCCESS: 'RADIOS_AUTH_LOGIN_SUCCESS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE_STORE_ADD: 'MESSAGE_STORE_ADD',\n        MESSAGE_STORE_CLEAR: 'MESSAGE_STORE_CLEAR',\n        MULTI_UPDATE_START: 'MULTI_UPDATE_START',\n        MULTI_UPDATE_STOP: 'MULTI_UPDATE_STOP',\n        NAV_ADD_SUB_VIEW: 'NAV_ADD_SUB_VIEW',\n        NAV_CHANGE_EVENT_VIEW: 'NAV_CHANGE_EVENT_VIEW',\n        NAV_CHANGE_MAIN_VIEW: 'NAV_CHANGE_MAIN_VIEW',\n        NAV_CLEAR_SUB_VIEW: 'NAV_CLEAR_SUB_VIEW',\n        NAV_NEXT_EVENT_VIEW: 'NAV_NEXT_EVENT_VIEW',\n        NAV_POP_SUB_VIEW: 'NAV_POP_SUB_VIEW',\n        NAV_PREV_EVENT_VIEW: 'NAV_PREV_EVENT_VIEW',\n        NAV_SET_SUB_VIEW: 'NAV_SET_SUB_VIEW',\n        NAV_STORE_RESET: 'NAV_STORE_RESET',\n        NAV_TOGGLE_DRAWER: 'NAV_TOGGLE_DRAWER',\n        NAV_STORE_UPDATE: 'NAV_STORE_UPDATE',\n        OVERLAY_STORE_UPDATE: 'OVERLAY_STORE_UPDATE',\n        OVERLAY_STORE_CLEAR: 'OVERLAY_STORE_CLEAR',\n        PUSH_STORE_NOTIFY: 'PUSH_STORE_NOTIFY',\n        PUSH_STORE_REGISTER: 'PUSH_STORE_REGISTER',\n        PUSH_STORE_UPDATE: 'PUSH_STORE_UPDATE',\n        REFRESH_DATA: 'REFRESH_DATA',\n        SEARCH_STORE_AUTO_SEARCH: 'SEARCH_STORE_AUTO_SEARCH',\n        SEARCH_STORE_CLEAR: 'SEARCH_STORE_CLEAR',\n        SEARCH_STORE_UPDATE: 'SEARCH_STORE_UPDATE',\n        SPEAKER_INFO_STORE_UPDATE: 'SPEAKER_INFO_STORE_UPDATE',\n        SPEAKER_INFO_STORE_UPDATE_SHORT_PROFILE: 'SPEAKER_INFO_STORE_UPDATE_SHORT_PROFILE',\n        SPEAKER_INFO_STORE_SELECT_SPEAKER: 'SPEAKER_INFO_STORE_SELECT_SPEAKER',\n        SPEAKER_INFO_STORE_SELECT_SPEAKER_BY_SID: 'SPEAKER_INFO_STORE_SELECT_SPEAKER_BY_SID',\n        VERIFY_DISPLAY_LISTS: 'RADIOS_AUTH_VERIFY_DISPLAY_LISTS',\n        VERIFY_COMPANY_LISTS: 'RADIOS_AUTH_VERIFY_COMPANY_LISTS',\n        VIEW_STORE_CLEAR_SUBMIT_FORM: 'VIEW_STORE_CLEAR_SUBMIT_FORM',\n        VIEW_STORE_DO_SUBMIT_FORM: 'VIEW_STORE_DO_SUBMIT_FORM',\n        VIEW_STORE_UPDATE: 'VIEW_STORE_UPDATE',\n        VIEW_STORE_TODO_SET_UNDO: 'VIEW_STORE_TODO_SET_UNDO',\n        VIEW_STORE_TOGGLE_DIRTY: 'VIEW_STORE_TOGGLE_DIRTY',\n        VIEW_STORE_TOGGLE_KEYBOARD_ACTIVE: 'VIEW_STORE_TOGGLE_KEYBOARD_ACTIVE'\n    },\n    services: {\n        COPY_EVENT: 'RADIOS_SERVICES_COPY_EVENT',\n        DELETE_EVENT: 'RADIOS_SERVICES_DELETE_EVENT',\n        EMAIL_COWORKERS: 'RADIOS_SERVICES_EMAIL_COWORKERS',\n        FORGOT_PASSWORD: 'RADIOS_AUTH_FORGOT_PASSWORD',\n        GET_DISPLAY_LISTS: 'RADIOS_AUTH_GET_DISPLAY_LISTS',\n        GET_COMPANY_LISTS: 'RADIOS_AUTH_GET_COMPANY_LISTS',\n        GET_SITE_LISTS: 'RADIOS_AUTH_GET_COMPANY_LISTS',\n        GET_SHORT_PROFILE: 'RADIOS_SERVICES_GET_SHORT_PROFILE',\n        LOAD_CALENDAR: 'RADIOS_CALENDAR_LOAD_CALENDAR',\n        LOAD_DASHBOARD: 'RADIOS_CALENDAR_LOAD_DASHBOARD',\n        LOAD_EVENT: 'RADIOS_SERVICES_LOAD_EVENT',\n        RENEW_TOKEN: 'RADIOS_AUTH_RENEW_TOKEN',\n        SAVE_EVENT: 'RADIOS_EVENTS_SAVE_EVENT',\n        SEARCH_EVENTS: 'RADIOS_SEARCH_SEARCH_EVENTS',\n        LOAD_JOB_AGREEMENT: 'LOAD_JOB_AGREEMENT',\n        LOAD_JOB_BOARD: 'RADIOS_LOAD_JOB_BOARD',\n        LOAD_JOB_EVENT: 'LOAD_JOB_EVENT',\n        LOAD_JOB_MESSAGES: 'LOAD_JOB_MESSAGES',\n        READ_JOB_MESSAGES: 'READ_JOB_MESSAGES',\n        SEND_JOB_MESSAGE: 'SEND_JOB_MESSAGE',\n        SEND_JOB_APPLICATION: 'RADIOS_SERVICES_SEND_JOB_APPLICATION'\n    },\n    ui: {\n        OPEN_EVENT_NAV: 'OPEN_EVENT_NAV',\n        NAVIGATE_AND_SEARCH: 'RADIOS_SEARCH_NAVIGATE_AND_SEARCH',\n        TOGGLE_SWIPE_NAV: 'RADIOS_GENERAL_TOGGLE_SWIPE_NAV'\n    }\n};","/**\n * Generates a DateTools Utility class\n *\n * @param {object} spec - Container for named parameters\n * @returns {object}\n */\nconst DateToolsFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const moment = require('moment');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Constants\n     *********************************/\n\n    const DATE_STRING = 'MM/DD/YYYY';\n    const TIME_STRING = 'hh:mm A';\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        /**\n         * Date formatting masks\n         *\n         * TODO: Merge in esUtils masks\n         */\n        masks: {\n            DATE_STRING,\n            TIME_STRING,\n            DATE_TIME_STRING: `${DATE_STRING} ${TIME_STRING}`\n        },\n        /**\n         * Takes a Balboa timestamp and converts it to a Date object\n         *\n         * @param {number|Date} stamp\n         * @returns {Date}\n         */\n        convertFromBalboaTrunkTimestamp(stamp) {\n            let date = stamp;\n\n            if (_.isNumber(stamp)) {\n                date = new Date(stamp * 1000);\n            }\n            else if (_.isString(stamp)) {\n                date = new Date(stamp);\n            }\n\n            if (date && date.getFullYear() === 1950) {\n                return null;\n            }\n\n            return date;\n        },\n        /**\n         * Takes a date and modifies it to work with Balboa\n         *\n         * @param {Date} date\n         * @returns {number}\n         */\n        convertToBalboaTrunkTimestamp(date) {\n            if (_.isString(date)) {\n                date = this.toDate(date);\n            }\n\n            if (!_.isDate(date)) {\n                console.warn(\"convertToBalboaTrunkTimestamp: Valid date not provided\");\n                return null;\n            }\n\n            return date.getTime() / 1000;\n        },\n        convertFromBalboaToDate(stamp) {\n            let date = null;\n\n            if (_.isDate(stamp)) {\n                date = stamp;\n            } else if (_.isNumber(stamp) && stamp > 0) {\n                date = this.convertFromBalboaTrunkTimestamp(stamp);\n            }\n\n            return date;\n        },\n        convertFromBalboaToDateString(stamp) {\n            let date = stamp;\n\n            if (_.isNumber(stamp)) {\n                date = this.convertFromBalboaTrunkTimestamp(stamp);\n            }\n\n            if (!date) {\n                return null;\n            }\n\n            return moment(date).format(this.masks.DATE_STRING);\n        },\n        convertFromBalboaToTime(stamp) {\n            let date = this.convertFromBalboaToDate(stamp);\n\n            // We have to just assume 0 means they didn't enter anything.  It's not perfect, but we have no other\n            // way to tell they entered no time aspect\n            if (date.getHours() === 0) {\n                return null;\n            }\n\n            return date;\n        },\n        convertFromBalboaToTimeString(stamp) {\n            let date = stamp;\n\n            if (_.isNumber(stamp)) {\n                date = this.convertFromBalboaTrunkTimestamp(stamp);\n            }\n\n            if (!date) {\n                return null;\n            }\n\n            return moment(date).format(this.masks.TIME_STRING);\n        },\n        /**\n         * Parses a date and time string into a Moment object\n         *\n         * @param {string} dateStr\n         * @param {string} timeStr\n         * @returns {Moment|null}\n         */\n        toMoment(dateStr, timeStr) {\n            let dateTimeStr;\n            let retMoment = null;\n\n            if (_.isDate(dateStr)) {\n                dateStr = moment(dateStr).format(this.masks.DATE_STRING);\n            }\n\n            if (!dateStr || dateStr.length <= 1) {\n                return null;\n            }\n\n            if (_.isDate(timeStr)) {\n                timeStr = moment(timeStr).format(this.masks.TIME_STRING);\n            }\n\n            dateTimeStr = dateStr;\n\n            if (timeStr && timeStr.length > 1) {\n                dateTimeStr += ` ${timeStr}`;\n\n                retMoment = moment(dateTimeStr, this.masks.DATE_TIME_STRING);\n                if (retMoment.isValid()) {\n                    return retMoment;\n                }\n            }\n            else {\n                retMoment = moment(dateTimeStr, this.masks.DATE_STRING);\n                if (retMoment.isValid()) {\n                    return retMoment;\n                }\n            }\n\n            return null;\n        },\n        /**\n         * Combines two date objects; one focused on the day and one focused on the time\n         * @param dateObj\n         * @param timeObj\n         * @returns {null|Date}\n         */\n        mergeDate(dateObj, timeObj) {\n            let dateStr;\n            let timeStr;\n            let dateTimeObj = dateObj;\n\n            if (!_.isDate(dateObj)) {\n                return null;\n            }\n\n            if (!_.isDate(timeObj)) {\n                return dateTimeObj;\n            }\n\n            dateStr = moment(dateObj).format(this.masks.DATE_STRING);\n            timeStr = moment(timeObj).format(this.masks.TIME_STRING);\n\n            return this.toDate(dateStr, timeStr);\n        },\n        /**\n         * Parses a date and time string and returns a Date\n         *\n         * @param {string} dateStr\n         * @param {string} timeStr\n         * @returns {Date|null}\n         */\n        toDate(dateStr, timeStr) {\n            let momentObj = this.toMoment(dateStr, timeStr);\n\n            if (momentObj && momentObj.isValid()) {\n                return momentObj.toDate();\n            }\n\n            return null;\n        },\n        /**\n         * Determines a minimum date for date pickers.\n         *\n         * @returns {Date}\n         */\n        getSystemMinDate() {\n            let currentMoment = moment();\n            currentMoment.subtract(2, 'years');\n\n            return currentMoment.toDate();\n        },\n        /**\n         * Determines a maximum date for date pickers.\n         *\n         * @returns {Date}\n         */\n        getSystemMaxDate() {\n            let currentMoment = moment();\n            currentMoment.add(5, 'years');\n            // set a maximum on years\n            return currentMoment.toDate();\n        },\n        /**\n         * Determines a maximum start date based on a set stop date or the system max date\n         *\n         * @param {object} spec\n         * @property {string} spec.stopDate\n         * @returns {Date}\n         */\n        getMaxStartDate(spec) {\n            const {\n                stopDate\n            } = spec;\n\n            if (stopDate && stopDate.length > 1) {\n                let retMoment = this.toMoment(stopDate);\n\n                if (retMoment && retMoment.isValid()) {\n                    return retMoment.toDate();\n                }\n            }\n\n            return this.getSystemMaxDate();\n        },\n        /**\n         * Determines a minimum stop date based on start date\n         *\n         * @param {object} spec\n         * @property {string} spec.startDate\n         * @returns {Date}\n         */\n        getMinStopDate(spec) {\n            const {\n                startDate\n            } = spec;\n\n            let startMoment = this.toMoment(startDate);\n\n            if (startMoment && startMoment.isValid()) {\n                return startMoment.toDate();\n            }\n\n            return this.getSystemMinDate();\n        },\n        /**\n         * Determines a minimum stop time based on a start time\n         *\n         * @param {object} spec - Container for named parameters\n         * @property {string} spec.startDate\n         * @property {string} spec.startTime\n         * @property {string} spec.stopDate\n         * @property {string} spec.stopTime\n         * @returns {Date|null}\n         */\n        getMinStopTime(spec) {\n            const {\n                startDate,\n                startTime,\n                stopDate,\n                stopTime\n            } = spec;\n\n            let startMoment = this.toMoment(startDate);\n            let stopMoment = this.toMoment(stopDate);\n            let dayDiff = 0;\n            let minMoment = moment();\n\n            if (!startMoment || !stopMoment) {\n                return null;\n            }\n\n            dayDiff = this.toMoment(startDate).diff(this.toMoment(stopDate), 'days');\n\n            if (dayDiff === 0 && startTime && startTime.length > 1) {\n                return this.toDate(startDate, startTime);\n            }\n\n            return null;\n        },\n\n        isBalboaDate(date) {\n            return ((_.isNumber(date) && date > 0) || _.isDate(date));\n        },\n\n        /**\n         *\n         * @param {*|string|null} value\n         * @returns {number}\n         * @private\n         */\n        parseNum (value) {\n            try {\n                if (!value)\n                    return 0;\n\n                return parseInt(value, 10);\n            } catch (e) {\n                return 0;\n            }\n        }\n    };\n}\n\nexport default DateToolsFactory;","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    id: undefined,\n    label: '',\n    iconClass: undefined,\n    order: undefined\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nimport NavItemModel from '../stores/models/NavItemModel';\nimport _ from 'lodash';\nimport {TranslateActionsFactory} from '../actions';\nimport Platform from '../util/Platform';\n\nconst {getText} = TranslateActionsFactory({});\n\n/**************************************************************************\n *\n * Private Members\n *\n *************************************************************************/\n\nconst mainViews = {\n    CALENDAR_VIEW: NavItemModel({\n        id: 'VIEWS_CALENDAR_VIEW',\n        label: getText('Calendar'),\n        iconClass: 'today',\n        order: 1\n    }),\n    DASHBOARD_VIEW: NavItemModel({\n        id: 'VIEWS_DASHBOARD_VIEW',\n        label: getText('Dashboard'),\n        iconClass: 'dashboard',\n        order: 2\n    }),\n    LOGIN_VIEW: NavItemModel({\n        id: 'VIEWS_LOGIN_VIEW',\n        label: getText('Login')\n    }),\n    NEW_EVENT_VIEW: NavItemModel({\n        id: 'VIEWS_NEW_EVENT_VIEW',\n        label: getText('New Event'),\n        iconClass: 'add',\n        order: 4\n    }),\n    SEARCH_VIEW: NavItemModel({\n        id: 'VIEWS_SEARCH_VIEW',\n        label: getText('Search'),\n        iconClass: 'search',\n        order: 3\n    }),\n    SETTINGS_VIEW: NavItemModel({\n        id: 'VIEWS_SETTINGS_VIEW',\n        label: getText('Settings'),\n        iconClass: 'settings',\n        order: 6\n    }),\n    JOBS_VIEW: NavItemModel({\n        id: 'VIEWS_JOBS_VIEW',\n        label: getText('Job Board'),\n        iconClass: 'local-offer',\n        order: 4\n    })\n};\n\nconst eventViews = {\n    CONTACTS_VIEW: NavItemModel({\n        id: 'VIEWS_CONTACTS_VIEW',\n        label: getText('Contacts'),\n        iconClass: 'contacts',\n        order: 3\n    }),\n    CUSTOM_VIEW: NavItemModel({\n        id: 'VIEWS_CUSTOM_VIEW',\n        label: getText('Custom'),\n        iconClass: 'text-fields',\n        order: 9\n    }),\n    DETAILS_VIEW: NavItemModel({\n        id: 'VIEWS_DETAILS_VIEW',\n        label: getText('Details'),\n        iconClass: 'details',\n        order: 2\n    }),\n    LIBRARY_VIEW: NavItemModel({\n        id: 'VIEWS_LIBRARY_VIEW',\n        label: getText('Library'),\n        iconClass: 'library-books',\n        order: 7\n    }),\n    MISC_VIEW: NavItemModel({\n        id: 'VIEWS_MISC_VIEW',\n        label: getText('Misc'),\n        iconClass: 'folder',\n        order: 8\n    }),\n    SERVICES_VIEW: NavItemModel({\n        id: 'VIEWS_SERVICES_VIEW',\n        label: getText('Services'),\n        iconClass: 'attach-money',\n        order: 5\n    }),\n    TODO_LIST_VIEW: NavItemModel({\n        id: 'TODO_LIST_VIEW',\n        label: getText('Action List'),\n        iconClass: 'playlist-add-check',\n        order: 6\n    }),\n    TRAVEL_VIEW: NavItemModel({\n        id: 'VIEWS_TRAVEL_VIEW',\n        label: getText('Travel'),\n        iconClass: 'card-travel',\n        order: 4\n    }),\n    JOB_VIEW: NavItemModel({\n        id: 'VIEWS_JOB_VIEW',\n        label: getText('Job'),\n        iconClass: 'work',\n        order: 1\n    })\n};\n\nconst subViews = {\n    CALENDAR_EVENTS_VIEW: NavItemModel({id: 'CALENDAR_EVENTS_VIEW', label: getText('Daily Events')}),\n    CONTACT_VIEW: NavItemModel({id: 'CONTACT_VIEW', label: getText('Contact')}),\n    NOTE_VIEW: NavItemModel({id: 'NOTE_VIEW', label: getText('Note')}),\n    EMAIL_COWORKERS_VIEW: NavItemModel({id: 'EMAIL_COWORKERS_VIEW', label: getText('Email to Co-workers')}),\n    FORGOT_PASSWORD_VIEW: NavItemModel({id: 'FORGOT_PASSWORD_VIEW', label: getText('Forgot Password')}),\n    PRODUCT_VIEW: NavItemModel({id: 'PRODUCT_VIEW', label: getText('Product')}),\n    SERVICE_VIEW: NavItemModel({id: 'SERVICE_VIEW', label: getText('Service')}),\n    STAGE_TIME_VIEW: NavItemModel({id: 'STAGE_TIME_VIEW', label: getText('Stage Time')}),\n    TODO_VIEW: NavItemModel({id: 'TODO_VIEW', label: getText('Action')})\n};\n\nconst jobViews = {\n    JOB_BOARD_VIEW: NavItemModel({id: 'JOB_BOARD_VIEW', label: getText('Job Board')}),\n    LEADS_OFFERS_VIEW: NavItemModel({id: 'LEADS_OFFERS_VIEW', label: getText('Leads & Offers')}),\n    CONFIRMED_EVENTS_VIEW: NavItemModel({id: 'CONFIRMED_EVENTS_VIEW', label: getText('Confirmed Events')})\n};\n\nconst jobSubViews = {\n    JOB_APPLY_CONFIRMATION_VIEW: NavItemModel({id: 'JOB_APPLY_CONFIRMATION_VIEW', label: getText('Sent to Buyer')}),\n    JOB_APPLY_VIEW: NavItemModel({id: 'JOB_APPLY_VIEW', label: getText('Apply to Job')}),\n    JOB_MESSAGES_VIEW: NavItemModel({id: 'JOB_MESSAGES_VIEW', label: getText('Messages'), iconClass: 'message'}),\n    JOB_DETAIL_VIEW: NavItemModel({id: 'JOB_DETAIL_VIEW', label: getText('Job Details')}),\n    LEAD_OFFER_DETAIL_VIEW: NavItemModel({id: 'LEAD_OFFER_DETAIL_VIEW', label: getText('Lead/Offer Details')}),\n    PAYOUT_DETAIL_VIEW: NavItemModel({id: 'PAYOUT_DETAIL_VIEW', label: getText('Payout Details')})\n};\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\n\nexport default {\n    mainViews,\n    eventViews,\n    subViews,\n    jobSubViews,\n    jobViews,\n    getFooterNavItems(includeSearch = true) {\n        let views = Platform.isSolutionTree() ? _.omit(mainViews, ['JOBS_VIEW']) : mainViews;\n        return _.sortBy(_.filter(views, (navItem) => {\n            return (navItem.id !== mainViews.LOGIN_VIEW.id) && (includeSearch || (!includeSearch && navItem !== mainViews.SEARCH_VIEW)) && navItem.has('order');\n        }), (v) => {\n            return v.order;\n        });\n    },\n    getSolutionTreeEventViews() {\n        return {\n            CONTACTS_VIEW: eventViews.CONTACTS_VIEW,\n            DETAILS_VIEW: eventViews.DETAILS_VIEW,\n            MISC_VIEW: eventViews.MISC_VIEW.set('order', 3)\n        };\n    },\n    getEspeakersMainViews() {\n        return mainViews;\n    },\n    getSolutionTreeMainViews() {\n        return _.omit(mainViews, ['JOBS_VIEW']);\n    },\n    getJobBoardViews() {\n        return jobViews;\n    }\n};","const blueOne = '#4289C9';\nconst blueTwo = '#348BBD';\nconst whiteOne = '#FFFFFF';\nconst greenOne = '#57BD8B';\nconst yellowOne = '#F2C411';\nconst redOne = '#eb5e5b';\nconst blackOne = '#000000';\nconst blackTwo = '#6e6e6e';\n\nexport default {\n    appBackgroundColor: '#ededed',\n    primaryColor: blueOne,\n    accentColor: '',\n    fontColor: blackTwo,\n    mutedFontColor: '#999',\n    calendarFontColor: blackTwo,\n    backgroundColor: blueOne,\n    foregroundColor: whiteOne,\n    darkBackgroundColor: '#2269a9',\n    // Event Statuses\n    callColor: '#BAA743',\n    coachingColor: '#333',\n    confirmedColor: greenOne,\n    confirmedFontColor: whiteOne,\n    dailyColor: 'violet',\n    leadColor: blueTwo,\n    leadFontColor: whiteOne,\n    heldColor: yellowOne,\n    heldFontColor: whiteOne,\n    heldPersonalFontColor: blackTwo,\n    closedColor: 'grey',\n    closedFontColor: whiteOne,\n    postponedColor: 'blueviolet',\n    postponedFontColor: whiteOne,\n    travelColor: '#B8E2F6',\n    // Message Colors\n    overdueColor: redOne,\n    errorBackgroundColor: '#d5463f',\n    errorBackgroundColorLighter: 'rgba(240, 66, 58, 0.5)',\n    errorFontColor: 'white',\n    warningBackgroundColor: '#efbd09',\n    warningFontColor: 'white',\n    infoBackgroundColor: '#8e8ba0',\n    infoFontColor: 'white',\n    successBackgroundColor: '#3AA36A',\n    successFontColor: 'white',\n    headerIconColor: 'white',\n    // Action Colors\n    todoCompleteColor: '#DFF0D8',\n    todoOverdueColor: '#F2DEDE',\n    footerIconColor: 'rgba(0, 0, 0, 0.54)',\n    footerSelectedIconColr: 'rgb(66, 137, 201)',\n    offerChipColor: '#5bc0de',\n    offerChipFontColor: whiteOne,\n\n    getStatusColor(status) {\n        switch (status) {\n            case 'lead':\n            case 'leads':\n                return this.leadColor;\n            case 'held':\n            case 'warning':\n                return this.heldColor;\n            case 'overdue':\n            case 'error':\n                return this.overdueColor;\n            default:\n                return this[`${status}Color`];\n        }\n    }\n};","/* global PushNotification, device, navigator */\nconst _ = require('lodash');\nconst isMobileLib = require('ismobilejs');\nconst {\n    log\n} = require('../util/DevTools').default;\nconst VERSIONS = require('../enums/VERSIONS').default;\n\n//=====================================\n// Private Methods\n//=====================================\n\nlet getBalboaUrl = null;\nlet getBuildName = null;\nlet getVersionNumber = null;\nlet hasPush = null;\nlet isAndroid = null;\nlet isEspeakers = null;\nlet isIos = null;\nlet isIpadPro = null;\nlet isMobile = null;\nlet isPhone = null;\nlet isPhoneGap = null;\nlet isProduction = null;\nlet isSolutionTree = null;\nlet isTablet = null;\n\ngetBalboaUrl = () => {\n    if (isSolutionTree()) {\n        return process.env.REACT_APP_BALBOA_URL_ST;\n    } else {\n        return process.env.REACT_APP_BALBOA_URL_MAIN;\n    }\n}\n\ngetBuildName = () => {\n    return _.toLower(process.env.REACT_APP_BUILD || 'main');\n};\n\ngetVersionNumber = () => {\n    return VERSIONS[getBuildName()] || VERSIONS.main;\n};\n\nhasPush = () => {\n    return (typeof PushNotification !== 'undefined');\n};\n\nisEspeakers = () => {\n    return (getBuildName() === 'main');\n};\n\nisIpadPro = (browser) => {\n    let result = isMobileLib.tablet;\n    let isIphone = /iPhone/i.test(navigator.userAgent);\n\n    // iPad Pro reports itself as an iPhone...\n    if (result === false && isIphone && (browser.width >= 768 || browser.height >= 1004)) {\n        result = true;\n    }\n\n    return result;\n};\n\nisMobile = (browser) => {\n    return isPhone(browser) || isTablet(browser);\n};\n\nisPhone = (browser) => {\n    let result = isMobileLib.phone;\n\n    // now compare browser resolutions\n    if (browser.greaterThan.small) {\n        result = false;\n    }\n\n    if (result === true && isIpadPro(browser)) {\n        result = false;\n    }\n\n    return result;\n};\n\nisPhoneGap = () => {\n    return (typeof PushNotification !== 'undefined' || typeof device !== 'undefined');\n};\n\nisProduction = () => {\n    return (process.env.NODE_ENV === 'production');\n};\n\nisSolutionTree = () => {\n    return (getBuildName() === 'st');\n};\n\nisTablet = (browser) => {\n    let result = isMobileLib.tablet;\n\n    // now compare browser resolutions\n    if (browser.lessThan.small) {\n        result = false;\n    }\n\n    if (result === false) {\n        result = isIpadPro(browser);\n    }\n\n    return result;\n};\n\nisIos = () => {\n    return isPhoneGap() && 'iOS' === device.platform;\n};\n\nisAndroid = () => {\n    return isPhoneGap() && 'Android' === device.platform;\n};\n\nexport default {\n    isPhoneGap,\n    isProduction,\n    hasPush,\n    isSolutionTree,\n    isEspeakers,\n    getBalboaUrl,\n    getBuildName,\n    getVersionNumber,\n    isMobile,\n    isPhone,\n    isIpadPro,\n    isTablet,\n    isIos,\n    isAndroid\n};\n","const React = require('react');\nconst {createElement} = React;\n\nconst IconButton = require('material-ui/IconButton').default;\n\nconst AddIcon = require('material-ui/svg-icons/content/add').default;\nconst AirplaneModeActiveIcon = require('material-ui/svg-icons/device/airplanemode-active').default;\nconst ArrowBackIcon = require('material-ui/svg-icons/navigation/arrow-back').default;\nconst ArrowDropDownCircleIcon = require('material-ui/svg-icons/navigation/arrow-drop-down-circle').default;\nconst ArrowDropDownIcon = require('material-ui/svg-icons/navigation/arrow-drop-down').default;\nconst ArrowForwardIcon = require('material-ui/svg-icons/navigation/arrow-forward').default;\nconst AssignmentIcon = require('material-ui/svg-icons/action/assignment-ind').default;\nconst AttachMoneyIcon = require('material-ui/svg-icons/editor/attach-money').default;\nconst BusinessIcon = require('material-ui/svg-icons/communication/business').default;\nconst CardTravelIcon = require('material-ui/svg-icons/action/card-travel').default;\nconst CheckIcon = require('material-ui/svg-icons/navigation/check').default;\nconst ChevronLeftIcon = require('material-ui/svg-icons/navigation/chevron-left').default;\nconst ChevronRightIcon = require('material-ui/svg-icons/navigation/chevron-right').default;\nconst ContactsIcon = require('material-ui/svg-icons/communication/contacts').default;\nconst ContentCopyIcon = require('material-ui/svg-icons/content/content-copy').default;\nconst CreateIcon = require('material-ui/svg-icons/content/create').default;\nconst DashboardIcon = require('material-ui/svg-icons/action/dashboard').default;\nconst DateRangeIcon = require('material-ui/svg-icons/action/date-range').default;\nconst DeleteIcon = require('material-ui/svg-icons/action/delete').default;\nconst DetailsIcon = require('material-ui/svg-icons/image/details').default;\nconst DirectionsCarIcon = require('material-ui/svg-icons/maps/directions-car').default;\nconst EditIcon = require('material-ui/svg-icons/image/edit').default;\nconst EmailIcon = require('material-ui/svg-icons/communication/email').default;\nconst ErrorIcon = require('material-ui/svg-icons/alert/error').default;\nconst EventNoteIcon = require('material-ui/svg-icons/notification/event-note').default;\nconst ExpandLessIcon = require('material-ui/svg-icons/navigation/expand-less').default;\nconst ExpandMoreIcon = require('material-ui/svg-icons/navigation/expand-more').default;\nconst FlightIcon = require('material-ui/svg-icons/maps/flight').default;\nconst FolderIcon = require('material-ui/svg-icons/file/folder').default;\nconst FormatQuoteIcon = require('material-ui/svg-icons/editor/format-quote').default;\nconst GroupIcon = require('material-ui/svg-icons/social/group').default;\nconst HotelIcon = require('material-ui/svg-icons/maps/hotel').default;\nconst InfoIcon = require('material-ui/svg-icons/action/info').default;\nconst InfoOutlineIcon = require('material-ui/svg-icons/action/info-outline').default;\nconst LanguageIcon = require('material-ui/svg-icons/action/language').default;\nconst LibraryBooksIcon = require('material-ui/svg-icons/av/library-books').default;\nconst LinkIcon = require('material-ui/svg-icons/content/link').default;\nconst LocationOnIcon = require('material-ui/svg-icons/communication/location-on').default;\nconst LocalOfferIcon = require('material-ui/svg-icons/maps/local-offer').default;\nconst LockIcon = require('material-ui/svg-icons/action/lock').default;\nconst MenuIcon = require('material-ui/svg-icons/navigation/menu').default;\nconst MessageIcon = require('material-ui/svg-icons/communication/message').default;\nconst MoreHorizIcon = require('material-ui/svg-icons/navigation/more-horiz').default;\nconst MoreVertIcon = require('material-ui/svg-icons/navigation/more-vert').default;\nconst MyLocationIcon = require('material-ui/svg-icons/maps/my-location').default;\nconst PermContactCalendarIcon = require('material-ui/svg-icons/action/perm-contact-calendar').default;\nconst PersonIcon = require('material-ui/svg-icons/social/person').default;\nconst PersonAddIcon = require('material-ui/svg-icons/social/person-add').default;\nconst PhoneIcon = require('material-ui/svg-icons/communication/phone').default;\nconst PlaylistAddCheckIcon = require('material-ui/svg-icons/av/playlist-add-check').default;\nconst SaveIcon = require('material-ui/svg-icons/content/save').default;\nconst SearchIcon = require('material-ui/svg-icons/action/search').default;\nconst SendIcon = require('material-ui/svg-icons/content/send').default;\nconst SettingsIcon = require('material-ui/svg-icons/action/settings').default;\nconst SmartPhoneIcon = require('material-ui/svg-icons/hardware/smartphone').default;\nconst SpeakerNotesIcon = require('material-ui/svg-icons/action/speaker-notes').default;\nconst TodayIcon = require('material-ui/svg-icons/action/today').default;\nconst TextFieldsIcon = require('material-ui/svg-icons/editor/text-fields').default;\nconst ThumbUpIcon = require('material-ui/svg-icons/action/thumb-up').default;\nconst UndoIcon = require('material-ui/svg-icons/content/undo').default;\nconst VideoCamIcon = require('material-ui/svg-icons/av/videocam').default;\nconst WarningIcon = require('material-ui/svg-icons/alert/warning').default;\nconst WorkIcon = require('material-ui/svg-icons/action/work').default;\n\n// settings-ethernet\n// graphic-eq\n// linear-scale\n// more-horiz\n\nconst map = {\n  'add': AddIcon,\n  'airplanemode-active': AirplaneModeActiveIcon,\n  'arrow-back': ArrowBackIcon,\n  'arrow-drop-down-circle': ArrowDropDownCircleIcon,\n  'arrow-drop-down': ArrowDropDownIcon,\n  'arrow-forward': ArrowForwardIcon,\n  'assignment': AssignmentIcon,\n  'attach-money': AttachMoneyIcon,\n  'business': BusinessIcon,\n  'card-travel': CardTravelIcon,\n  'check': CheckIcon,\n  'chevron-left': ChevronLeftIcon,\n  'chevron-right': ChevronRightIcon,\n  'contacts': ContactsIcon,\n  'content-copy': ContentCopyIcon,\n  'create': CreateIcon,\n  'dashboard': DashboardIcon,\n  'date-range': DateRangeIcon,\n  'delete': DeleteIcon,\n  'details': DetailsIcon,\n  'directions-car': DirectionsCarIcon,\n  'edit': EditIcon,\n  'email': EmailIcon,\n  'error': ErrorIcon,\n  'event-note': EventNoteIcon,\n  'expand-less': ExpandLessIcon,\n  'expand-more': ExpandMoreIcon,\n  'folder': FolderIcon,\n  'format-quote': FormatQuoteIcon,\n  'flight': FlightIcon,\n  'ground': DirectionsCarIcon,\n  'group': GroupIcon,\n  'hotel': HotelIcon,\n  'info': InfoIcon,\n  'info-outline': InfoOutlineIcon,\n  'language': LanguageIcon,\n  'library-books': LibraryBooksIcon,\n  'link': LinkIcon,\n  'location-on': LocationOnIcon,\n  'local-offer': LocalOfferIcon,\n  'lock': LockIcon,\n  'menu': MenuIcon,\n  'message': MessageIcon,\n  'more-horiz': MoreHorizIcon,\n  'more-vert': MoreVertIcon,\n  'my-location': MyLocationIcon,\n  'perm-contact-calendar': PermContactCalendarIcon,\n  'person': PersonIcon,\n  'person-add': PersonAddIcon,\n  'phone': PhoneIcon,\n  'playlist-add-check': PlaylistAddCheckIcon,\n  'save': SaveIcon,\n  'search': SearchIcon,\n  'send': SendIcon,\n  'settings': SettingsIcon,\n  'smartphone': SmartPhoneIcon,\n  'speaker-notes': SpeakerNotesIcon,\n  'today': TodayIcon,\n  'text-fields': TextFieldsIcon,\n  'thumb-up': ThumbUpIcon,\n  'undo': UndoIcon,\n  'videocam': VideoCamIcon,\n  'warning': WarningIcon,\n  'work': WorkIcon\n};\n\nconst getIcon = (key) => {\n  return map[key];\n}\n\nconst getElement = (key, props) => {\n  const icon = getIcon(key);\n\n  if (!icon)\n    return null;\n\n  return createElement(icon, props);\n}\n\nconst getButton = (key, btnProps, elProps) => {\n  return <IconButton {...btnProps}>{getElement(key, elProps)}</IconButton>;\n}\n\nconst getFormIcon = (key) => {\n  return <IconButton style={{\n    top: '12px',\n    padding: '12px 0px',\n    margin: '12px 0px'\n  }}>{getElement(key)}</IconButton>;\n}\n\n// export {\n//   map,\n//   getIcon(key) {\n//     return map[key];\n//   },\n//   getElement(key, props) {\n//     const icon = this.getIcon(key);\n//\n//     if (!icon)\n//       return null;\n//\n//     return createElement(icon, props);\n//   },\n//   getButton(key, btnProps, elProps) {\n//     return <IconButton {...btnProps}>{this.getElement(key, elProps)}</IconButton>;\n//   },\n//   getFormIcon(key) {\n//     return <IconButton style={{\n//       top: '12px',\n//       padding: '12px 0px',\n//       margin: '12px 0px'\n//     }}>{this.getElement(key)}</IconButton>;\n//   }\n// };\n\nexport {\n  map,\n  getIcon,\n  getElement,\n  getButton,\n  getFormIcon\n};","/**\n * Generates a ActivityCard component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ActivityCardFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // enums\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        selectEvent,\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateAvatar;\n    let _generateSecondaryText;\n    let _goToEvent;\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {activity} = inst.props;\n\n        const status = activity.get('st');\n\n        return <Avatar\n            backgroundColor={mainTheme.getStatusColor(status)}\n        />;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _generateSecondaryText = (inst) => {\n        const {activity} = inst.props;\n\n        let date = DateTools.convertFromBalboaTrunkTimestamp(activity.get('date'));\n\n        let formattedDate;\n\n        if (date) {\n            formattedDate = esUtils.format_date(date, esUtils.format_date.masks.mediumDate);\n        }\n\n        if (activity.get('st') && activity.get('st').length) {\n            return getText('became %1$s on %2$s', {\n                params: [activity.get('st'), formattedDate]\n            });\n        }\n\n        return formattedDate;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _goToEvent = (inst) => {\n        const {activity, dispatch} = inst.props;\n\n        dispatch(selectEvent({\n            event: {\n                eid: activity.get('eid')\n            }\n        }));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            activity: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ActivityCard',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {activity} = this.props;\n\n            return <ListItem\n                leftAvatar={_generateAvatar(this)}\n                primaryText={activity.get('dsc')}\n                secondaryText={_generateSecondaryText(this)}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _goToEvent(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ActivityCardFactory }","/**\n * Creates and ContactCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AddressMixin\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst ContactCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        ContactActionsFactory,\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        deleteContact,\n        selectContact\n    } = ContactActionsFactory({});\n    const {\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildHeadingMap;\n    let _deleteHandler;\n    let _editHandler;\n\n    /**\n     *\n     * @param {object} spec\n     * @property {Record} spec.record\n     * @property {object} spec.inst\n     * @property {object} spec.map\n     * @returns {{}}\n     * @private\n     */\n    _buildHeadingMap = (spec) => {\n        let map = {};\n        let inst = spec.inst;\n        let contact = spec.record;\n\n        let addressString = inst.buildLocationString(contact.toJS());\n\n        if (!_.isEmpty(addressString)) {\n            map['address'] = {\n                subHeading: addressString,\n                iconClass: 'fa-map-marker'\n            };\n        }\n\n        return map;\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _deleteHandler = (inst) => {\n        const {\n            contact,\n            dispatch\n        } = inst.props;\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(deleteContact({\n            id: contact.get('id')\n        }));\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _editHandler = (inst) => {\n        const {\n            contact,\n            dispatch\n        } = inst.props;\n\n        dispatch(selectContact({\n            id: contact.get('id')\n        }));\n    };\n\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            contact: PropTypes.object.isRequired,\n            showDetails: PropTypes.bool\n        },\n        propsPriority: [\n            'showDetails',\n            'contact',\n            'event'\n        ],\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'title',\n            iconClass: ''\n        }, {\n            key: 'email',\n            iconClass: 'fa-envelope-o'\n        }, {\n            key: 'phone',\n            iconClass: 'fa-phone'\n        }, {\n            key: 'mobile',\n            iconClass: 'fa-mobile'\n        }, {\n            key: 'company',\n            iconClass: 'fa-building'\n        }],\n        additionalMapFunc: _buildHeadingMap\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ContactCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AddressMixin, AutoShouldUpdateMixin, CardMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                contact,\n                showDetails\n            } = this.props;\n\n            let dataId = contact.get('id');\n            let name = contact.get('cname');\n\n            let subHeadingCollection = [];\n\n            let headingMap = this.buildHeadingMap({\n                record: contact,\n                inst: this\n            });\n\n            if (!showDetails) {\n                // determine slot 3 based on a priority\n                subHeadingCollection = this.extractHeadings(headingMap, [\n                    'email',\n                    'phone',\n                    'mobile',\n                    'company',\n                    'title',\n                    'address'\n                ], 3);\n            }\n            else {\n                // if we are showing details then change the priorities\n                // and remove 3 line limit\n                subHeadingCollection = this.extractHeadings(headingMap, [\n                    'company',\n                    'title',\n                    'email',\n                    'phone',\n                    'mobile',\n                    'fax',\n                    'address'\n                ]);\n            }\n\n            let subHeadingOne = '';\n            if (subHeadingCollection && subHeadingCollection.length) {\n                subHeadingOne = subHeadingCollection[0].subHeading;\n            }\n\n            const groupCodes = contact.get('groupcodes');\n\n            let groupCode;\n\n            if (groupCodes) {\n                groupCode = groupCodes.first();\n            }\n\n            const menuItems = this.getMenuItems(['expand', 'edit', 'delete'], {\n                onEdit: () => {\n                    _editHandler(this);\n                },\n                onDelete: () => {\n                    _deleteHandler(this);\n                }\n            }, this);\n\n            return <ListCard\n                leftAvatarText={groupCode || ' '}\n                menuItems={menuItems}\n                primaryText={name}\n                secondaryText={_.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                })}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _editHandler(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ContactCardFactory }","/**\n * Creates an EventHeaderCard component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AddressMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst EventHeaderCardFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Actions\n    const {\n        SpeakerInfoActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {BaseHeaderCardFactory} = require('./BaseHeaderCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        AddressMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = require('../../util/DateTools').default({});\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        determineMsm\n    } = SpeakerInfoActionsFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const BaseHeaderCard = BaseHeaderCardFactory({});\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'EventHeaderCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, AddressMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                event,\n                speakerInfo\n            } = this.props;\n\n            let heading = event.get('selectedEvent').get('organization');\n            let subHeadingCollection = [];\n\n            if (determineMsm(speakerInfo)) {\n                subHeadingCollection.push(speakerInfo.get('selectedSpeaker').get('name_full'));\n            }\n\n            // get earliest stagetime\n            const selectedEvent = event.get('selectedEvent');\n            let stageTimes;\n            let venues;\n\n            if (selectedEvent) {\n                stageTimes = selectedEvent.get('Stagetime');\n\n                if (stageTimes && stageTimes.size) {\n\n                    let firstStartTime = stageTimes.sortBy((stageTime) => {\n                        return (stageTime ? stageTime.get('starttime') : null);\n                    }).first().get('starttime');\n\n                    let formattedDate = esUtils.format_date(convertFromBalboaTrunkTimestamp(firstStartTime), esUtils.format_date.masks.mediumDate);\n\n                    subHeadingCollection.push(formattedDate);\n                }\n\n                venues = selectedEvent.get('Venue');\n\n                if (venues && venues.size >= 1) {\n                    let addressString = this.buildLocationString(venues.first().toJS(), ['city', 'st']);\n                    if (!_.isEmpty(addressString)) {\n                        subHeadingCollection.push(addressString);\n                    }\n                }\n            }\n\n            return <BaseHeaderCard\n                heading={heading || ''}\n                subHeading={subHeadingCollection.slice(0, 2).join(' | ')}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { EventHeaderCardFactory }","/**\n * Generates a JobCard component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobCardFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n    const Chip = require('material-ui/Chip').default;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // enums\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getBudget,\n        getTopics,\n        selectJob\n    } = JobBoardActionsFactory();\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _formatBudgetText;\n    let _generateAvatar;\n    let _generateLocationText;\n    let _goToJob;\n\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {job} = inst.props;\n\n        const status = job.get('status');\n        const deliveryMethod = job.get('deliverymethod');\n        const allowNewApplicants = job.get('allow_new_applicants');\n\n        const dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod];\n        let avIcon;\n        let bgColor;\n\n        if (dmIcon) {\n            avIcon = IconMap.getElement(dmIcon.icon);\n        }\n\n        if(allowNewApplicants === false) {\n            return <Avatar\n                backgroundColor=\"#D0D0D0\"\n                color={mainTheme.errorBackgroundColor}\n                style={{\n                    fontSize: '12px'\n                }}>\n                {getText('FULL')}\n            </Avatar>;\n        }\n\n        return <Avatar\n            backgroundColor={mainTheme.getStatusColor(status)}\n            icon={avIcon}/>;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _generateLocationText = (inst) => {\n        const {job} = inst.props;\n\n        let date = DateTools.convertFromBalboaTrunkTimestamp(job.get('starttime'));\n\n        let formattedDate;\n\n        if (date) {\n            formattedDate = esUtils.format_date(date, esUtils.format_date.masks.mediumDate);\n        }\n\n        if (job.get('location') && job.get('location').length) {\n            return getText('%1$s - %2$s', {\n                params: [formattedDate, job.get('location')]\n            });\n        }\n\n        return formattedDate;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _goToJob = (inst) => {\n        const {job, dispatch} = inst.props;\n\n        dispatch(selectJob(job));\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            job: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface / React Component\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobCard',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {job} = this.props;\n\n            let allowNewApplications = job.get('allow_new_applicants');\n\n            const chipStyles = {\n                fontSize: \"9px\",\n                lineHeight: \"14px\",\n                paddingLeft: \"6px\",\n                paddingRight: \"6px\"\n            };\n\n            let style = {};\n\n            if(allowNewApplications === false) {\n                style = _.assign({}, style, {\n                    opacity: '0.75'\n                });\n            }\n\n            return <ListItem\n                style={style}\n                leftAvatar={_generateAvatar(this)}\n                primaryText={job.get('event_name')}\n                secondaryText={<div>\n                    <div>\n                        {_generateLocationText(this)}\n                    </div>\n                    <div style={{display: 'flex',\n                        flexWrap: 'wrap'}}>\n                        <span>\n                            {getBudget(job)}\n                        </span>\n                        {_.map(getTopics(job), (topic, i) => {\n                            return <Chip key={i} style={{\n                                margin: '4px'\n                            }} labelStyle={chipStyles}>{topic}</Chip>;\n                        })}\n                    </div>\n                </div>}\n                secondaryTextLines={2}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    if(allowNewApplications === true) {\n                        // open job detail\n                        _goToJob(this);\n                    }\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobCardFactory }","/**\n * Generates a LeadOfferCard component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst LeadOfferCardFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n    const Chip = require('material-ui/Chip').default;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // enums\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getOfferStatusDisplay,\n        getOfferStatusIndexByJob,\n        selectJob\n    } = JobBoardActionsFactory();\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _generateAvatar;\n    let _generateStatusChip;\n    let _goToEvent;\n\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {job} = inst.props;\n\n        const status = job.get('status');\n        const deliveryMethod = job.get('deliverymethod');\n        const allowNewApplicants = job.get('allow_new_applicants');\n\n        const dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod];\n        let avIcon;\n        let bgColor;\n\n        if (dmIcon) {\n            avIcon = IconMap.getElement(dmIcon.icon);\n        }\n\n        return <Avatar\n            backgroundColor={mainTheme.getStatusColor(status)}\n            icon={avIcon}/>;\n    };\n\n    _generateStatusChip = (myInfo) => {\n        let avatar;\n        let backgroundColor = mainTheme.offerChipColor;\n        let statusText = getOfferStatusDisplay(myInfo);\n        let statusIndex = getOfferStatusIndexByJob(myInfo);\n\n        const chipStyles = {\n            fontSize: \"10px\",\n            lineHeight: \"18px\",\n            paddingLeft: \"6px\",\n            paddingRight: \"6px\"\n        };\n\n        if(statusIndex === 1) {\n            avatar = <Avatar size={10} style={{\n                width: 15,\n                height: 15,\n                fontSize: 10\n            }} backgroundColor={mainTheme.errorBackgroundColor}>{myInfo.n_unread}</Avatar>;\n\n            if(myInfo.n_unread > 1) {\n                statusText += 's';\n            }\n\n            backgroundColor = mainTheme.errorBackgroundColorLighter;\n        }\n\n        return <Chip\n            labelStyle={chipStyles}\n            labelColor={mainTheme.offerChipFontColor}\n            backgroundColor={backgroundColor}>\n            {avatar}\n            {getOfferStatusDisplay(myInfo)}\n        </Chip>;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _goToEvent = (inst) => {\n        const {dispatch, job} = inst.props;\n\n        dispatch(selectJob(job, VIEWS.jobSubViews.LEAD_OFFER_DETAIL_VIEW));\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            job: PropTypes.object.isRequired,\n            myInfo: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface / React Component\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'LeadOfferCard',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {job, myInfo} = this.props;\n\n            let style = {};\n            let self = this;\n\n            return <ListItem\n                style={style}\n                leftAvatar={_generateAvatar(this)}\n                primaryText={job.get('event_name')}\n                secondaryText={(getOfferStatusIndexByJob(myInfo) > 0) ?\n                    <div style={{display: 'flex',\n                        flexWrap: 'wrap'}}>\n                        {_generateStatusChip(myInfo)}\n                    </div> : null}\n                secondaryTextLines={1}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _goToEvent(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LeadOfferCardFactory }","/**\n * Creates and LibraryFileCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst LibraryFileCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    const {\n        isPhoneGap\n    } = require('../../util/Platform').default;\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const file_type_icon_map = {\n        pdf: 'fa-file-pdf-o',\n        ps: 'fa-file-pdf-o',\n\n        txt: 'fa-file-text-o',\n\n        doc: 'fa-file-word-o',\n        docx: 'fa-file-word-o',\n        odt: 'fa-file-word-o',\n        rtf: 'fa-file-word-o',\n        eml: 'fa-envelope-o',\n\n        ppt: 'fa-file-powerpoint-o',\n        pptx: 'fa-file-powerpoint-o',\n        odp: 'fa-file-powerpoint-o',\n\n        xls: 'fa-file-excel-o',\n        xlsx: 'fa-file-excel-o',\n        ods: 'fa-file-excel-o',\n\n        mp3: 'fa-file-audio-o',\n        wma: 'fa-file-audio-o',\n        wav: 'fa-file-audio-o',\n\n        png: 'fa-file-image-o',\n        gif: 'fa-file-image-o',\n        jpg: 'fa-file-image-o',\n        bmp: 'fa-file-image-o',\n\n        mp4: 'fa-file-video-o',\n        mpg: 'fa-file-video-o',\n        mpeg: 'fa-file-video-o',\n        wmv: 'fa-file-video-o',\n        mov: 'fa-file-video-o',\n        avi: 'fa-file-video-o',\n        vob: 'fa-file-video-o',\n\n        zip: 'fa-file-archive-o',\n        tgz: 'fa-file-archive-o',\n        tar: 'fa-file-archive-o',\n        rar: 'fa-file-archive-o',\n        '7z': 'fa-file-archive-o'\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildAvatar;\n    let _buildUserAndDate;\n    let _fileDownloadHandler;\n    let _getFileTypeIcon;\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _buildAvatar = (inst) => {\n        const {file} = inst.props;\n\n        return <Avatar><i className={`fa ${_getFileTypeIcon(file.get('originalfilename'))}`}/></Avatar>;\n    };\n\n    /**\n     *\n     * @param {object} spec\n     * @property {Record} spec.record\n     * @property {object} spec.inst\n     * @property {object} spec.map\n     * @private\n     */\n    _buildUserAndDate = (spec) => {\n        const {\n            record\n        } = spec;\n\n        const uploadedby = record.get('uploadedby');\n        const postdate = record.get('postdate');\n\n        return {\n            'uploadInfo': {\n                subHeading: `${DateTools.convertFromBalboaToDateString(postdate)} by ${uploadedby}`,\n                iconClass: 'fa-calendar'\n            }\n        };\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _fileDownloadHandler = (inst) => {\n        const {\n            file\n        } = inst.props;\n\n        const url = file.get('url');\n\n        if (url && url.length) {\n            if (isPhoneGap()) {\n                window.open(url, '_blank', 'location=no,closebuttoncaption=Close,enableViewportScale=yes');\n            }\n            else {\n                window.open(file.get('url'), '_system');\n            }\n        }\n    };\n\n    /**\n     *\n     * @param {string} file_name\n     * @return {string}\n     */\n    _getFileTypeIcon = (file_name) => {\n        let parts = /\\.[0-9a-z]+$/i.exec(file_name);\n        let extension = ((parts && parts[0]) || '').replace(/\\./, '').toLowerCase();\n        return file_type_icon_map[extension] || 'fa-file-o';\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            file: PropTypes.object.isRequired,\n            showDetails: PropTypes.bool\n        },\n        propsPriority: [\n            'showDetails',\n            'file'\n        ]\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'description',\n            iconClass: ''\n        }],\n        additionalMapFunc: _buildUserAndDate\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'LibraryFileCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                file,\n                showDetails\n            } = this.props;\n\n            let subHeadingCollection;\n            let limit = 3;\n\n            let headingMap = this.buildHeadingMap({\n                record: file,\n                inst: this\n            });\n\n            if (showDetails) {\n                limit = null;\n            }\n\n            subHeadingCollection = this.extractHeadings(headingMap, [\n                'description',\n                'uploadInfo'\n            ], limit);\n\n            let heading = '';\n            if (subHeadingCollection && subHeadingCollection.length) {\n                heading = subHeadingCollection[0].subHeading;\n            }\n\n            return <ListCard\n                leftAvatar={_buildAvatar(this)}\n                primaryText={heading}\n                secondaryText={_.flatMap(subHeadingCollection.slice(1), (s) => {\n                    return s.subHeading;\n                })}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _fileDownloadHandler(this);\n                }}\n            />;\n        }\n    });\n}\n\nexport { LibraryFileCardFactory }","/**\n * Creates an MainHeaderCard component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst MainHeaderCardFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Actions\n    const {\n        SpeakerInfoActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {BaseHeaderCardFactory} = require('./BaseHeaderCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        determineMsm\n    } = SpeakerInfoActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const BaseHeaderCard = BaseHeaderCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            nav: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MainHeaderCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                nav,\n                speakerInfo\n            } = this.props;\n\n            const mainView = nav.get('mainView');\n\n            let heading = mainView.get('label');\n            let subHeading;\n\n            if (determineMsm(speakerInfo)) {\n                heading = '';\n\n                const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n                if (selectedSpeaker) {\n                    heading = selectedSpeaker.get('name_full');\n                }\n                subHeading = mainView.get('label');\n            }\n            else {\n                heading = mainView.get('label');\n                subHeading = '';\n            }\n\n            return <BaseHeaderCard\n                heading={heading}\n                subHeading={subHeading}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { MainHeaderCardFactory }","/**\n * Creates an MessageCard React Component\n *\n * @constructor\n * @param {spec} - Collection of named parameters\n * @return {function} - React Component\n * @mixes MessagesMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst MessageCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        MessagesMixin\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /******************************************************************************\n     *\n     * Private Members\n     *\n     *****************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateAvatar;\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {\n            message\n        } = inst.props;\n\n        return <Avatar icon={IconMap.getElement(inst.determineIcon(message))}/>;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            message: PropTypes.object.isRequired\n        }\n    });\n\n    /******************************************************************************\n     *\n     * React / Public Interface\n     *\n     *****************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MessageCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, MessagesMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {JSX|XML}\n         */\n        render() {\n            const {\n                message\n            } = this.props;\n\n            return <ListItem\n                leftAvatar={_generateAvatar(this)}\n                primaryText={message.get('text')}/>;\n        }\n    });\n}\n\nexport { MessageCardFactory }","/**\n * Creates and NoteCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst NoteCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = require('../../util/DateTools').default({});\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NoteActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        selectNote\n    } = NoteActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _editHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _editHandler = (inst) => {\n        const {dispatch, note} = inst.props;\n\n        dispatch(selectNote({\n            id: note.get('id')\n        }));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            note: PropTypes.object.isRequired,\n            isSystem: PropTypes.bool.isRequired,\n            showDetails: PropTypes.bool\n        },\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'NoteCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                note,\n                isSystem\n            } = this.props;\n\n            const showDetails = (this.props.showDetails || this.state.showDetails);\n\n            let stageDate = convertFromBalboaTrunkTimestamp(note.get('datetime'));\n            let formattedDate = esUtils.format_date(stageDate, esUtils.format_date.masks.mediumDate);\n            let dataId = note.get('id');\n            let content = note.get('content');\n            let enteredBy = note.get('enteredby');\n\n\n            const menuItems = this.getMenuItems(['expand', 'edit'], {\n                onEdit: () => {\n                    _editHandler(this);\n                }\n            }, this);\n\n            const baseStyle = {\n                display: 'block',\n                maxWidth: '100%',\n                height: '35px',\n                margin: '0 auto',\n                lineHeight: '1.2em',\n                WebkitLineClamp: '3',\n                WebkitBoxOrient: 'vertical',\n                overflow: 'hidden',\n                'textOverflow': 'ellipsis'\n            };\n\n            const detailsStyle = {\n                overflow: 'visible',\n                whiteSpace: 'pre-wrap',\n                textOverflow: 'inherit',\n                height: 'auto'\n            };\n\n            let appliedStyle = _.assign({}, baseStyle);\n\n            if (showDetails) {\n                appliedStyle = _.assign({\n                    paddingTop: '10px'\n                }, detailsStyle);\n            }\n\n            return <ListCard\n                menuItems={menuItems}\n                secondaryText={<p style={appliedStyle}>{content}</p>}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _editHandler(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { NoteCardFactory }","/**\n * Creates PipelineCard React Component\n *\n * @param {object} spec - Container for named parameters\n * @returns {function} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst PipelineCardFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const ListItem = require('material-ui/List').ListItem;\n    const Avatar = require('material-ui/Avatar').default;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Enums\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NavActionsFactory,\n        SearchActionsFactory\n    } = require('../../actions');\n\n    /******************************************************************************\n     *\n     * Private Members\n     *\n     *****************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        changeMainView\n    } = NavActionsFactory({});\n\n    const {\n        autoSearch\n    } = SearchActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildAvatar;\n    let _determineBackgroundColor;\n    let _searchHandler;\n\n    /**\n     *\n     * @param {object} inst\n     * @returns {XML}\n     * @private\n     */\n    _buildAvatar = (inst) => {\n        const {pipelineData} = inst.props;\n\n        return <Avatar\n            backgroundColor={_determineBackgroundColor(inst)}>\n\n            {pipelineData.get('qty')}\n\n        </Avatar>;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _determineBackgroundColor = (inst) => {\n        const {searchTerm} = inst.props;\n\n        switch (searchTerm) {\n            case 'pipeline:confirmed':\n                return mainTheme.confirmedColor;\n            case 'pipeline:held':\n                return mainTheme.heldColor;\n            case 'pipeline:lead':\n                return mainTheme.leadColor;\n        }\n\n        return '';\n    };\n\n    /**\n     *\n     * @param searchTerm\n     * @param inst\n     * @private\n     */\n    _searchHandler = (searchTerm, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        if (searchTerm) {\n            dispatch(autoSearch(searchTerm));\n\n            dispatch(changeMainView(VIEWS.mainViews.SEARCH_VIEW));\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            label: PropTypes.string.isRequired,\n            searchTerm: PropTypes.string.isRequired,\n            pipelineData: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'label',\n            'searchTerm',\n            'pipelineData'\n        ]\n    });\n\n    /******************************************************************************\n     *\n     * React / Public Interface\n     *\n     ****************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'PipelineCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                label,\n                searchTerm,\n                pipelineData\n            } = this.props;\n\n            return <ListItem\n                leftAvatar={_buildAvatar(this)}\n                primaryText={label}\n                secondaryText={esUtils.format_currency(pipelineData.get('val'), 0)}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _searchHandler(searchTerm, this);\n                }}/>;\n        }\n    });\n\n    return connect()(component);\n}\n\nexport { PipelineCardFactory }","/**\n * Creates and ProductCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst ProductCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        ProductActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        deleteProduct,\n        selectProduct\n    } = ProductActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteHandler;\n    let _editHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _deleteHandler = (inst) => {\n        const {\n            dispatch,\n            product\n        } = inst.props;\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(deleteProduct({\n            id: product.get('id')\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _editHandler = (inst) => {\n        const {\n            dispatch,\n            product\n        } = inst.props;\n\n        dispatch(selectProduct({\n            id: product.get('id')\n        }));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            product: PropTypes.object.isRequired,\n            showDetails: PropTypes.bool\n        },\n        propsPriority: [\n            'showDetails',\n            'product'\n        ],\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'description',\n            iconClass: ''\n        }, {\n            key: 'qtysold',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Sold: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'qtyshipped',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Shipped: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'priceeach',\n            labelFunc: (value) => {\n                return esUtils.format_currency(value, 2);\n            }\n        }]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ProductCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                product\n            } = this.props;\n\n            const showDetails = (this.props.showDetails || this.state.showDetails);\n\n            let subHeadingCollection;\n\n            let headingMap = this.buildHeadingMap({\n                record: product,\n                inst: this\n            });\n\n            subHeadingCollection = this.extractHeadings(headingMap, [\n                'description',\n                'qtysold',\n                'qtyshipped',\n                'priceeach'\n            ]);\n\n            let heading = '';\n            if (subHeadingCollection && subHeadingCollection.length) {\n                heading = subHeadingCollection.shift().subHeading;\n            }\n\n            const groupCode = product.get('groupcode');\n\n            const menuItems = this.getMenuItems(['expand', 'edit', 'delete'], {\n                onEdit: () => {\n                    _editHandler(this);\n                },\n                onDelete: () => {\n                    _deleteHandler(this);\n                }\n            }, this);\n\n            if (!showDetails) {\n                subHeadingCollection = subHeadingCollection.slice(0, 2);\n            }\n\n            return <ListCard\n                leftAvatarText={groupCode}\n                menuItems={menuItems}\n                primaryText={heading}\n                secondaryText={_.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                })}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _editHandler(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ProductCardFactory }","/**\n * Creates an SearchResultCard React Component\n *\n * @constructor\n * @param {object} spec - Collection of named parameters\n *\n * @return {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst SearchResultCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    const _ = require('lodash');\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const {connect} = require('react-redux');\n\n    // enums\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    const {MultiLineSecondaryTextFactory} = require('./MultiLineSecondaryText');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        MessageActionsFactory,\n        NavActionsFactory\n    } = require('../../actions');\n\n    /******************************************************************************\n     *\n     * Private Members\n     *\n     *****************************************************************************/\n\n    /**********************************ª\n     * Actions\n     *********************************/\n\n    const {\n        selectEvent,\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        clearMessages\n    } = MessageActionsFactory({});\n\n    const {\n        checkForDirty\n    } = NavActionsFactory({});\n\n    const MultiLineSecondaryText = MultiLineSecondaryTextFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _actionEventDetail;\n    let _buildLocation;\n    let _generateAvatar;\n    let _generateSecondaryText;\n\n    /**\n     *\n     *\n     * @param item\n     * @private\n     */\n    _actionEventDetail = (eid, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        checkForDirty(_.assign(_.pick(inst.props, ['dispatch', 'event', 'view']), {\n            changeViewCallback: () => {\n                if (eid) {\n                    dispatch(clearMessages());\n\n                    dispatch(selectEvent({\n                        event: {\n                            eid\n                        }\n                    }));\n                }\n            }\n        }));\n    };\n\n    /**\n     * Generates a single location from multiple parts\n     *\n     * @param {string} city\n     * @param {string} state\n     * @param {string} country\n     * @returns {string}\n     * @private\n     */\n    _buildLocation = (city, state, country) => {\n        let parts = [];\n\n        if (city && state) {\n            parts.push(`${city}, ${state}`);\n        }\n        else if (state) {\n            parts.push(state);\n        }\n\n        if (country) {\n            parts.push(country);\n        }\n\n        return parts.join(' ');\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {deliveryMethod, status} = inst.props;\n\n        let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod];\n        let avIcon;\n        let bgColor;\n\n        if (dmIcon) {\n            avIcon = IconMap.getElement(dmIcon.icon);\n        }\n\n        bgColor = mainTheme.getStatusColor(status) || mainTheme[`${status}Color`];\n\n        if(_.includes(['ground', 'flight', 'hotel'], status)) {\n            bgColor = mainTheme['travelColor'];\n\n            avIcon = IconMap.getElement(status, {\n                style: {\n                    color: mainTheme.fontColor,\n                    fill: mainTheme.fontColor\n                }\n            });\n        }\n\n        if(status === 'call') {\n            bgColor = mainTheme['callColor'];\n\n            avIcon = IconMap.getElement('phone');\n        }\n\n        if(status === 'coaching') {\n            bgColor = mainTheme['coachingColor'];\n        }\n\n        if(status === 'daily') {\n            bgColor = mainTheme['dailyColor'];\n\n            avIcon = IconMap.getElement('date-range');\n        }\n\n        return <Avatar\n            backgroundColor={bgColor}\n            icon={avIcon}/>;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateSecondaryText = (inst) => {\n        const {\n            formattedDate,\n            city,\n            state,\n            country\n        } = inst.props;\n\n        let textItems = [];\n\n        if (formattedDate) {\n            textItems.push(formattedDate);\n        }\n\n        if (city || state || country) {\n            textItems.push(_buildLocation(city, state, country));\n        }\n\n        return textItems;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            formattedDate: PropTypes.string,\n            status: PropTypes.string.isRequired,\n            organization: PropTypes.string.isRequired,\n            deliveryMethod: PropTypes.string,\n            disabled: PropTypes.bool,\n            city: PropTypes.string,\n            state: PropTypes.string,\n            country: PropTypes.string,\n            dataEid: PropTypes.string.isRequired,\n            event: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        }\n    });\n\n    /******************************************************************************\n     *\n     * React / Public Interface\n     *\n     *****************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SearchResultCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                formattedDate,\n                organization,\n                city,\n                state,\n                country,\n                dataEid,\n                disabled\n            } = this.props;\n\n            return <ListItem\n                leftAvatar={_generateAvatar(this)}\n                primaryText={organization}\n                secondaryText={<MultiLineSecondaryText textItems={_generateSecondaryText(this)}/>}\n                style={(disabled) ? {\n                        opacity: '0.50'\n                    } : null}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    if (!disabled)\n                        _actionEventDetail(dataEid, this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SearchResultCardFactory }","/**\n * Creates and ServiceCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst ServiceCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const moment = require('moment');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateTools = require('../../util/DateTools').default({});\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        ServiceActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        deleteService,\n        selectService\n    } = ServiceActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildHeadingMap;\n    let _deleteHandler;\n    let _editHandler;\n\n    /**\n     *\n     * @param {object} spec\n     * @property {Record} spec.record\n     * @property {object} spec.inst\n     * @property {object} spec.map\n     * @param inst\n     * @returns {object}\n     * @private\n     */\n    _buildHeadingMap = (spec) => {\n        let map = spec.map || {};\n        const service = spec.record;\n\n        let due = service.get('due');\n        const flagList = service.get('flags_as_map');\n\n        if (_.isDate(due) || (_.isNumber(due) && due > 0)) {\n            let dueDate = DateTools.convertFromBalboaTrunkTimestamp(due);\n\n            let formattedDueDate = moment(dueDate).format(DateTools.masks.DATE_STRING);\n\n            map['due'] = {\n                subHeading: getText('Due: %1$s', {\n                    params: [formattedDueDate]\n                }),\n                iconClass: 'fa-calendar'\n            };\n        }\n\n        if (flagList && flagList.size) {\n            flagList.map((flag, key) => {\n                if (key === 'bill_later') {\n                    if (flag.get('is_set')) {\n                        if (_.has(map, 'amount')) {\n                            map['amount'].subHeading = getText('Actual');\n                        }\n\n                        if (_.has(map, 'fee')) {\n                            map['fee'].subHeading = getText('Actual');\n                        }\n                    }\n                }\n\n                if (key === 'free') {\n                    if (flag.get('is_set')) {\n                        if (_.has(map, 'amount')) {\n                            map['amount'].subHeading = getText('Free');\n                        }\n\n                        if (_.has(map, 'fee')) {\n                            map['fee'].subHeading = getText('Free');\n                        }\n                    }\n                }\n            });\n        }\n\n        return map;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _deleteHandler = (inst) => {\n        const {\n            dispatch,\n            service\n        } = inst.props;\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(deleteService({\n            id: service.get('id')\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _editHandler = (inst) => {\n        const {\n            dispatch,\n            service\n        } = inst.props;\n\n        dispatch(selectService({\n            id: service.get('id')\n        }));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            service: PropTypes.object.isRequired,\n            showDetails: PropTypes.bool\n        },\n        propsPriority: [\n            'showDetails',\n            'service'\n        ],\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'description',\n            iconClass: ''\n        }, {\n            key: 'fee',\n            labelFunc: (value) => {\n                return esUtils.format_currency(value, 2);\n            }\n        }, {\n            key: 'amount',\n            labelFunc: (value) => {\n                return esUtils.format_currency(value, 2);\n            }\n        }],\n        additionalMapFunc: _buildHeadingMap\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ServiceCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                service\n            } = this.props;\n\n            const showDetails = (this.props.showDetails || this.state.showDetails);\n\n            let subHeadingCollection;\n\n            let headingMap = this.buildHeadingMap({\n                record: service,\n                inst: this\n            });\n\n            subHeadingCollection = this.extractHeadings(headingMap, [\n                'description',\n                'due',\n                'fee',\n                'amount'\n            ]);\n\n            let heading = '';\n            if (subHeadingCollection && subHeadingCollection.length) {\n                heading = subHeadingCollection.shift().subHeading;\n            }\n\n            const groupCode = service.get('groupcode');\n\n            const menuItems = this.getMenuItems(['edit', 'delete'], {\n                onEdit: () => {\n                    _editHandler(this);\n                },\n                onDelete: () => {\n                    _deleteHandler(this);\n                }\n            }, this);\n\n            return <ListCard\n                leftAvatarText={groupCode}\n                menuItems={menuItems}\n                primaryText={heading}\n                secondaryText={_.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                })}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _editHandler(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ServiceCardFactory }","/**\n * Creates and SpeakerCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AddressMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst SpeakerCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Enums\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NavActionsFactory,\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        changeMainView\n    } = NavActionsFactory({});\n\n    const {\n        clearSpeakerData,\n        selectSpeakerBySid\n    } = SpeakerInfoActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _selectHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _selectHandler = (inst) => {\n        const {\n            auth,\n            dispatch,\n            displayData,\n            speaker\n        } = inst.props;\n\n        dispatch(clearSpeakerData());\n        dispatch(selectSpeakerBySid(speaker.get('sid'), auth, displayData));\n        dispatch(changeMainView(VIEWS.mainViews.CALENDAR_VIEW));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired,\n            speaker: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'speaker',\n            'displayData',\n            'auth'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'StageTimeCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                speaker\n            } = this.props;\n\n            return <ListCard\n                leftAvatarIcon='person'\n                primaryText={speaker.get('name_full')}\n                secondaryText={speaker.get('sid').toString()}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _selectHandler(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SpeakerCardFactory }","/**\n * Creates and StageTimeCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AddressMixin\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst StageTimeCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const moment = require('moment');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = require('../../util/DateTools').default({});\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateTools = require('../../util/DateTools').default({});\n    const {\n        isSolutionTree\n    } = require('../../util/Platform').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        StageTimeActionsFactory,\n        TranslateActionsFactory,\n        VenueActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        isMarketPlaceEvent,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        deleteStageTime,\n        selectStageTime\n    } = StageTimeActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        extractSelectedVenue\n    } = VenueActionsFactory({});\n\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteHandler;\n    let _editHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _deleteHandler = (inst) => {\n        const {dispatch, stageTime} = inst.props;\n\n        dispatch(deleteStageTime({\n            id: stageTime.get('id')\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _editHandler = (inst) => {\n        const {dispatch, stageTime} = inst.props;\n\n        dispatch(selectStageTime({\n            id: stageTime.get('id')\n        }));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            showDetails: PropTypes.bool,\n            stageTime: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'showDetails',\n            'stageTime',\n            'event'\n        ],\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'StageTimeCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, AddressMixin, CardMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                stageTime,\n                event\n            } = this.props;\n\n            const showDetails = (this.props.showDetails === true || this.state.showDetails === true);\n\n            let stageDate = convertFromBalboaTrunkTimestamp(stageTime.get('starttime'));\n            let formattedDate = esUtils.format_date(stageDate, esUtils.format_date.masks.mediumDate);\n            let description = stageTime.get('description');\n            const modifiedEvent = event.get('modifiedEvent');\n            const isPersonal = modifiedEvent.get('isPersonal');\n\n            let subHeadingCollection = [];\n\n            // we need to get the venue first\n            const venue = extractSelectedVenue(event, stageTime.get('venueid'));\n\n            if (venue) {\n                let addressString = this.buildLocationString(venue.toJS());\n\n                if (!_.isEmpty(addressString)) {\n                    subHeadingCollection.push({\n                        subHeading: addressString,\n                        iconClass: 'fa-map-marker'\n                    });\n                }\n            }\n\n\n            if (showDetails) {\n                if (!_.isEmpty(stageTime.get('room'))) {\n                    subHeadingCollection.push({\n                        subHeading: getText('Room: %1$s', {\n                            params: [stageTime.get('room')]\n                        })\n                    });\n                }\n\n                const avchecktime = stageTime.get('avchecktime');\n                let avDate = null;\n                if (_.isDate(avchecktime) || _.isNumber(avchecktime)) {\n\n                    avDate = DateTools.convertFromBalboaTrunkTimestamp(avchecktime);\n\n                    let formattedAvChecktime = moment(avDate).format(DateTools.masks.DATE_TIME_STRING);\n\n                    subHeadingCollection.push({\n                        subHeading: getText('A/V: %1$s', {\n                            params: [formattedAvChecktime]\n                        }),\n                        iconClass: 'fa-calendar'\n                    });\n                }\n            }\n\n            let menuItems = this.getMenuItems(\n                ['edit', 'delete'],\n                {\n                    onEdit: () => {\n                        _editHandler(this);\n                    },\n                    onDelete: () => {\n                        _deleteHandler(this);\n                    }\n                },\n                this\n            );\n\n            if ((isSolutionTree() && isPersonal === false)\n                || isMarketPlaceEvent(event.modifiedEvent)) {\n                menuItems = this.getMenuItems(\n                    ['expand'],\n                    {},\n                    this\n                );\n            }\n\n            return <ListCard\n                leftAvatarIcon='perm-contact-calendar'\n                menuItems={menuItems}\n                primaryText={description}\n                secondaryText={_.concat([formattedDate], _.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                }))}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    if (!isSolutionTree() || (isSolutionTree() && isPersonal)) {\n                        _editHandler(this);\n                    }\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { StageTimeCardFactory }","/**\n * Creates a StoryCard React Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n *\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst StoryCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Factories\n    const {ListCardFactory} = require('./ListCard');\n\n    // Material UI\n    const Checkbox = require('material-ui/Checkbox').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        mergeModifiedEvent\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _completeHandler;\n    let _generateCheckbox;\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _completeHandler = (inst, value) => {\n        const {\n            dispatch,\n            event,\n            story\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const storiesToldString = modifiedEvent.get('storiesToldList') || '';\n        let storiesToldList = storiesToldString.split('|');\n\n        if (value && !_.includes(storiesToldList, story.get('id'))) {\n            storiesToldList.push(story.get('id'));\n        }\n        else if (!value && _.includes(storiesToldList, story.get('id'))) {\n            storiesToldList = _.filter(storiesToldList, (toldId) => {\n                return toldId !== story.get('id');\n            });\n        }\n\n        dispatch(mergeModifiedEvent({\n            storiesToldList: storiesToldList.join('|')\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateCheckbox = (inst) => {\n        const {event, story} = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const storiesToldString = modifiedEvent.get('storiesToldList') || '';\n        const storiesToldList = storiesToldString.split('|');\n\n        let matchedId = _.includes(storiesToldList, story.get('id').toString());\n\n        return <Checkbox\n            checked={matchedId}\n            onCheck={(e, v) => {\n                _completeHandler(inst, v);\n            }}/>;\n    };\n\n\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            story: PropTypes.object.isRequired\n        }\n    });\n\n    const CardMixin = CardMixinFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'StoryCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                story\n            } = this.props;\n\n            return <ListCard\n                primaryText={story.get('ti') || story.get('name')}\n                leftCheckbox={_generateCheckbox(this)}/>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { StoryCardFactory }","/**\n * Creates an SubHeaderCard component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SubHeaderCardFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Components\n    const {BaseHeaderCardFactory} = require('./BaseHeaderCard');\n\n    const {\n        NavActionsFactory\n    } = require('../../actions');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    const {\n        getCurrentSubView\n    } = NavActionsFactory();\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const BaseHeaderCard = BaseHeaderCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            nav: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'SubHeaderCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                nav,\n                view\n            } = this.props;\n\n            const headerText = view.get('headerText');\n            const subView = getCurrentSubView(nav);\n\n            let heading = headerText || subView.get('label');\n\n            return <BaseHeaderCard\n                heading={heading}\n                headingStyle={{\n                    fontSize: '18px'\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SubHeaderCardFactory }","/**\n * Generates a TripCard component.\n *\n * @param {object} spec\n * @returns {object}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst TipCardFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {\n        connect\n    } = require('react-redux');\n\n    // Components\n    const {ListCardFactory} = require('../cards/ListCard');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const ListCard = ListCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _actionTipOfTheDay;\n\n    /**\n     *\n     * @param {Record} tip\n     * @private\n     */\n    _actionTipOfTheDay = (tip) => {\n        if (tip && tip.get('link')) {\n            window.open(tip.get('link'), '_system');\n        }\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TipCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                displayData\n            } = this.props;\n\n            // just the tip\n            const tip = displayData && displayData.get('displayLists') && displayData.get('displayLists').get('tip');\n\n            if (!tip) {\n                return null;\n            }\n\n            return (\n                <div className=\"quote\">\n                    <SectionHeader label={getText('Tip of the Day')}/>\n\n                    <p onClick={(e) => {\n                        stopProp(e);\n\n                        _actionTipOfTheDay(tip);\n                    }}>\n                        {tip.get('tiptext').trim()}\n                    </p>\n\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TipCardFactory }","/**\n * Generates a TodoCard component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst TodoCardFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Enums\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Material UI\n    const Checkbox = require('material-ui/Checkbox').default;\n\n    const {ListCardFactory} = require('./ListCard');\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory,\n        TodoActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        deleteTodo,\n        getUndo,\n        saveTodo,\n        selectTodo,\n        setUndo\n    } = TodoActionsFactory({});\n    const {\n        selectEvent,\n        stopProp,\n        toggleEventDirty\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _completeHandler;\n    let _deleteHandler;\n    let _editHandler;\n    let _generateCheckbox;\n    let _generateSecondaryText;\n    let _generateStyle;\n    let _goToActions;\n\n    /**\n     *\n     * @param {object} inst - Reference to React\n     * @private\n     */\n    _completeHandler = (inst) => {\n        const {\n            event,\n            auth,\n            todo,\n            view\n        } = inst.props;\n        const {\n            dispatch\n        } = inst.props;\n\n        const sessionData = auth.get('sessionData');\n\n        let selectedTodo = todo;\n\n        let status = selectedTodo.get('status') || \"0\";\n        let newStatus = (status.toString() === \"1\" ? \"0\" : \"1\");\n\n        let updateObj = {\n            status: newStatus\n        };\n\n        dispatch(toggleEventDirty(true));\n        if (newStatus === '1') {\n            dispatch(setUndo(selectedTodo));\n\n            updateObj = _.assign(updateObj, {\n                statusdate: new Date(),\n                assignedto: sessionData.get('username').toUpperCase()\n            });\n        }\n        else {\n            selectedTodo = getUndo(selectedTodo, view) || selectedTodo;\n        }\n        dispatch(saveTodo(_.assign({}, selectedTodo.toJS(), updateObj)));\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _deleteHandler = (inst) => {\n        const {\n            dispatch,\n            todo\n        } = inst.props;\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(deleteTodo({\n            id: todo.get('id')\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _editHandler = (inst) => {\n        const {\n            dispatch,\n            todo\n        } = inst.props;\n\n        dispatch(selectTodo({\n            id: todo.get('id')\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {null|XML|JSX}\n     * @private\n     */\n    _generateCheckbox = (inst) => {\n        const {canComplete, todo} = inst.props;\n        let status = todo.get('status') || '0';\n\n        if (!canComplete)\n            return null;\n\n        return <Checkbox\n            checked={status.toString() === '1'}\n            onCheck={() => {\n                _completeHandler(inst);\n            }}/>;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _generateSecondaryText = (inst) => {\n        const {todo} = inst.props;\n\n        let date = todo.get('date') || todo.get('statusdate');\n        let formattedDate;\n\n        if (date) {\n            formattedDate = DateTools.convertFromBalboaToDateString(date);\n        }\n\n        if (todo.get('assignedto') && todo.get('assignedto').length) {\n            return getText('%1$s - %2$s', {\n                params: [formattedDate, todo.get('assignedto')]\n            });\n        }\n\n        return formattedDate;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _generateStyle = (inst) => {\n        const {todo} = inst.props;\n\n        let status = todo.get('status') || '0';\n        const date = todo.get('date') || todo.get('statusdate');\n\n        if (_.isString(status)) {\n            status = DateTools.parseNum(status);\n        }\n\n        if (status > 0) {\n            return {backgroundColor: mainTheme.todoCompleteColor};\n        }\n\n        let today = new Date();\n        let todoDate = new Date(date);\n\n        if (today.getTime() > todoDate.getTime()) {\n            return {backgroundColor: mainTheme.todoOverdueColor};\n        }\n\n        return {};\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _goToActions = (inst) => {\n        const {dispatch, todo} = inst.props;\n\n        dispatch(selectEvent({\n            event: {\n                eid: todo.get('eid')\n            },\n            view: VIEWS.eventViews.TODO_LIST_VIEW\n        }));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            todo: PropTypes.object.isRequired,\n            canComplete: PropTypes.bool.isRequired,\n            auth: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'canComplete',\n            'todo',\n            'view',\n            'event',\n            'auth'\n        ]\n    });\n\n    const CardMixin = CardMixinFactory({});\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TodoCard',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {canComplete, todo} = this.props;\n\n            const menuItems = this.getMenuItems(['edit', 'delete'], {\n                onEdit: () => {\n                    _editHandler(this);\n                },\n                onDelete: () => {\n                    _deleteHandler(this);\n                }\n            }, this);\n\n            return <ListCard\n                primaryText={todo.get('description') || todo.get('dsc')}\n                menuItems={(canComplete ? menuItems : null)}\n                secondaryText={_generateSecondaryText(this)}\n                leftCheckbox={_generateCheckbox(this)}\n                style={_generateStyle(this)}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    if (canComplete) {\n                        _completeHandler(this);\n                    } else {\n                        _goToActions(this);\n                    }\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TodoCardFactory }","/**\n * Creates and TotalCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst TotalCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            total: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string\n            ]).isRequired,\n            description: PropTypes.string\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TotalCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            let {\n                total,\n                description\n            } = this.props;\n\n            if (_.isNumber(total)) {\n                total = esUtils.format_currency(total, 2);\n            }\n\n            return <ListCard\n                leftAvatarIcon=\"attach-money\"\n                primaryText={getText('Total')}\n                secondaryText={[total, description]}\n            />;\n        }\n    });\n}\n\nexport { TotalCardFactory }","/**\n * Creates and TravelCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst TravelCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {TravelFlightCardFactory} = require('./TravelFlightCard');\n    const {TravelGroundCardFactory} = require('./TravelGroundCard');\n    const {TravelHotelCardFactory} = require('./TravelHotelCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const TravelFlightCard = TravelFlightCardFactory({});\n    const TravelGroundCard = TravelGroundCardFactory({});\n    const TravelHotelCard = TravelHotelCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            travel: PropTypes.object.isRequired,\n            showDetails: PropTypes.bool\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TravelCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Invoked once and cached when the class is created. Values in\n         * the mapping will be set on this.props if that prop is not\n         * specified by the parent component\n         *\n         * @returns {object}\n         */\n        getDefaultProps() {\n            return {\n                showDetails: false\n            };\n        },\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                travel\n            } = this.props;\n\n            if (travel.get('flight')) {\n                return <TravelFlightCard {...this.props}/>;\n            }\n\n            if (travel.get('ground')) {\n                return <TravelGroundCard {...this.props}/>;\n            }\n\n            if (travel.get('hotel')) {\n                return <TravelHotelCard {...this.props}/>;\n            }\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TravelCardFactory }","/**\n * Generates a UpcomingConfirmedCard component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst UpcomingConfirmedCardFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // enums\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        selectEvent,\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateAvatar;\n    let _generateSecondaryText;\n    let _goToEvent;\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {item} = inst.props;\n\n        const deliveryMethod = item.get('dm').toString();\n\n        let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod];\n        let avIcon;\n\n        if (dmIcon) {\n            avIcon = IconMap.getElement(dmIcon.icon);\n        }\n\n        return <Avatar\n            backgroundColor={mainTheme.confirmedColor}\n            icon={avIcon}/>;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _generateSecondaryText = (inst) => {\n        const {item} = inst.props;\n\n        let date = DateTools.convertFromBalboaTrunkTimestamp(item.get('date'));\n\n        let formattedDate;\n\n        if (date) {\n            formattedDate = esUtils.format_date(date, esUtils.format_date.masks.mediumDate);\n        }\n\n        if (item.get('vnu') && item.get('vnu').length) {\n            return getText('%1$s - %2$s', {\n                params: [formattedDate, item.get('vnu')]\n            });\n        }\n\n        return formattedDate;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _goToEvent = (inst) => {\n        const {dispatch, item} = inst.props;\n\n        dispatch(selectEvent({\n            event: {\n                eid: item.get('eid')\n            }\n        }));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            item: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'UpcomingConfirmedCard',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {item} = this.props;\n\n            return <ListItem\n                leftAvatar={_generateAvatar(this)}\n                primaryText={item.get('dsc')}\n                secondaryText={_generateSecondaryText(this)}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    _goToEvent(this);\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { UpcomingConfirmedCardFactory }","/**\n *\n * @param spec\n * @returns {XML}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SectionHeaderFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Components\n    const Subheader = require('material-ui/Subheader').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            label: PropTypes.string,\n            children: PropTypes.string\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    return createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'SectionHeader',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                label,\n                children\n            } = this.props;\n\n            return (\n                <Subheader style={{\n                    borderBottom: '2px solid rgba(66, 137, 201, 0.75)'\n                }}>{children || label}</Subheader>\n            );\n        }\n    });\n}\n\nexport { SectionHeaderFactory }","/**\n * Generates a FooterNav component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst FooterNavFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        is\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Components\n    const BottomNavigation = require('material-ui/BottomNavigation').BottomNavigation;\n    const Paper = require('material-ui/Paper').default;\n    const FontIcon = require('material-ui/FontIcon').default;\n\n    const {FooterNavItemFactory} = require('./FooterNavItem');\n    const {FooterMessageInputFactory} = require('./FooterMessageInput');\n\n    const mainTheme = require('../theme/mainTheme').default;\n\n    // Enums\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Factories\n    const {AutoShouldUpdateMixinFactory} = require('../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        NavActionsFactory,\n        SearchActionsFactory\n    } = require('../actions');\n\n    const {\n        isPhone\n    } = require('../util/Platform').default;\n\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Variables\n    //---------------------------------\n\n    let jobMessage = null;\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    const {showConfirmedEventsDialog} = DialogActionsFactory();\n\n    const {checkForDirty, changeMainView, getCurrentSubView} = NavActionsFactory({});\n\n    const {\n        autoSearch\n    } = SearchActionsFactory({});\n\n    const FooterNavItem = FooterNavItemFactory({});\n    const FooterMessageInput = FooterMessageInputFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _determineSelected;\n    let _onMainNavChange;\n\n    /**\n     *\n     * @param view\n     * @returns {number}\n     * @private\n     */\n    _determineSelected = (view, includeSearch) => {\n        if(_.includes(VIEWS.jobViews, view)) {\n            view = VIEWS.mainViews.JOBS_VIEW;\n        }\n\n        return _.indexOf(VIEWS.getFooterNavItems(includeSearch), view);\n    };\n\n    /**\n     * Changes the top level view\n     *\n     * @param {string} newView\n     * @param {object} inst - Reference to the React Component\n     * @private\n     */\n    _onMainNavChange = (newView, inst) => {\n        inst = inst || this;\n\n        const {\n            dispatch\n        } = inst.props;\n\n        if(newView.id === VIEWS.mainViews.JOBS_VIEW.id) {\n            // display a menu\n        }\n\n        checkForDirty(_.assign(_.pick(inst.props, ['dispatch', 'event', 'view']), {\n            changeViewCallback: () => {\n                dispatch(changeMainView(newView));\n            }\n        }));\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            includeSearch: PropTypes.bool.isRequired,\n            browser: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'includeSearch',\n            'nav',\n            'view',\n            'event',\n            'jobBoard',\n            'speakerInfo',\n            'browser'\n        ]\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'FooterNav',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getDefaultProps() {\n            return {\n                includeSearch: true\n            };\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            let {\n                includeSearch,\n                nav,\n                view,\n                speakerInfo,\n                jobBoard,\n                dispatch,\n                browser\n            } = this.props;\n\n            const keyboardActive = view.get('keyboardActive');\n\n            const currentView = nav.get('mainView');\n            const currentSubView = getCurrentSubView(nav);\n\n            let footerItems = VIEWS.getFooterNavItems(includeSearch);\n\n            if(currentSubView && currentSubView.id === VIEWS.jobSubViews.JOB_MESSAGES_VIEW.id) {\n                return (\n                    <div className='footer-nav'>\n                        <Paper zDepth={1} style={{\n                            padding: 5\n                        }}>\n                            <FooterMessageInput/>\n                        </Paper>\n                    </div>\n                );\n            }\n\n            if (keyboardActive) {\n                return <div></div>;\n            }\n\n            return <div className='footer-nav'>\n                <Paper zDepth={1}>\n                    <BottomNavigation\n                        selectedIndex={_determineSelected(currentView, includeSearch)}>\n\n                        {_.map(footerItems, (navItem, i) => {\n                            return <FooterNavItem\n                                speakerInfo={speakerInfo}\n                                jobBoard={jobBoard}\n                                key={`footer-nav-item-${i}`}\n                                viewItem={navItem}\n                                iconClass={navItem.iconClass}\n                                onClick={(childNavItem) => {\n                                    const currentNavItem = childNavItem || navItem;\n\n                                    if(currentNavItem.id === VIEWS.jobViews.CONFIRMED_EVENTS_VIEW.id) {\n                                        dispatch(showConfirmedEventsDialog({\n                                            onContinue: () => {\n                                                dispatch(autoSearch({\n                                                    marketplaceOnly: true,\n                                                    futureOnly: true\n                                                }));\n\n                                                if(isPhone(browser)) {\n                                                    dispatch(changeMainView(VIEWS.mainViews.SEARCH_VIEW));\n                                                }\n                                            }\n                                        }));\n                                    } else {\n                                        _onMainNavChange(currentNavItem, this);\n                                    }\n                                }}\n                            />;\n                        })}\n\n                    </BottomNavigation>\n                </Paper>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { FooterNavFactory }","/**\n * Generates a Header component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst HeaderFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Factories\n    const {CSSTransistorFactory} = require('../components/CSSTransistor');\n    const {\n        EventHeaderCardFactory,\n        MainHeaderCardFactory,\n        SubHeaderCardFactory\n    } = require('./cards');\n\n    // Material UI\n    const AppBar = require('material-ui/AppBar').default;\n    const {Toolbar, ToolbarGroup} = require('material-ui/Toolbar');\n    const IconMenu = require('material-ui/IconMenu').default;\n    const MenuItem = require('material-ui/MenuItem').default;\n    const IconButton = require('material-ui/IconButton').default;\n\n    const IconMap = require('../theme/IconMap');\n    const mainTheme = require('../theme/mainTheme').default;\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../mixins');\n\n    // Radio\n    const {\n        radio\n    } = require('react-pubsub-via-radio.js');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        OverlayActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory,\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const CSSTransistor = CSSTransistorFactory({});\n\n    const EventHeaderCard = EventHeaderCardFactory({});\n    const MainHeaderCard = MainHeaderCardFactory({});\n    const SubHeaderCard = SubHeaderCardFactory({});\n\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        showExitDirtyConfirmation\n    } = DialogActionsFactory({});\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        checkForDirty,\n        getCurrentSubView,\n        popSubView,\n        toggleDrawer,\n    } = NavActionsFactory({});\n    const {\n        clearOverlay,\n        updateOverlayStore\n    } = OverlayActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _backHandler;\n    let _determineActionIcon;\n    let _determineActionLabel;\n    let _determineActions;\n    let _determineLabel;\n    let _determineNavAction;\n\n    /**\n     * Handles the Back navigation\n     *\n     * @param inst\n     * @private\n     */\n    _backHandler = (inst) => {\n        const {\n            dispatch,\n            nav,\n            view\n        } = inst.props;\n\n        // clear subView\n        let viewDirty = view.get('dirty');\n\n        if (viewDirty) {\n            dispatch(showExitDirtyConfirmation({\n                onContinue: () => {\n                    // We are just leaving a sub view, so only View Dirty is relevant\n                    dispatch(toggleViewDirty(false));\n                    dispatch(popSubView());\n                }\n            }));\n        }\n        else {\n            dispatch(popSubView());\n        }\n    };\n\n    /**\n     *\n     * @param {object} action\n     * @returns {string}\n     * @private\n     */\n    _determineActionIcon = (action) => {\n        let iconClass = action.get('iconClass');\n        let type = action.get('type');\n\n        if (_.isString(iconClass) && iconClass.length > 1)\n            return iconClass;\n\n        if (type === BTN.SUBMIT || type === BTN.SAVE) {\n            iconClass = 'check';\n        }\n        else if (type === BTN.DISCARD) {\n            iconClass = 'undo';\n        }\n        else if (type === BTN.MORE_VERTICAL) {\n            iconClass = 'fa-ellipsis-v';\n        }\n        else if (type === BTN.DELETE) {\n            iconClass = 'delete';\n        }\n\n        return iconClass;\n    };\n\n    /**\n     *\n     * @param {Record} action\n     * @returns {string}\n     * @private\n     */\n    _determineActionLabel = (action) => {\n        let label = action.get('label');\n        let type = action.get('type');\n\n        if (_.isString(label) && label.length) {\n            return label;\n        }\n\n        if (type === BTN.SUBMIT || type === BTN.SAVE) {\n            label = getText('Save Changes');\n        }\n        else if (type === BTN.DISCARD) {\n            label = getText('Discard Changes');\n        }\n        else if (type === BTN.DELETE) {\n            label = getText('Delete');\n        }\n\n        return label;\n    };\n\n    /**\n     * Determines what action button to display\n     *\n     * @param {array} actions\n     * @returns {*}\n     * @private\n     */\n    _determineActions = (inst, props) => {\n        props = props || inst.props;\n\n        const {dispatch, nav, view} = props;\n\n        const actions = view.get('actions');\n        const eventView = nav.get('eventView');\n\n        let primaryActions = [];\n        let overflowActions = [];\n        let totalActions = [];\n        let maxActions = 2;\n\n        if (eventView) {\n            maxActions = 4;\n        }\n\n        actions.map((action, i) => {\n            if (actions.size <= maxActions) {\n                primaryActions.push(action);\n            } else if (i < maxActions - 1) {\n                primaryActions.push(action);\n            } else {\n                overflowActions.push(action);\n            }\n        });\n\n        primaryActions.map((action) => {\n            if(action.get('type') === 'custom') {\n                totalActions.push(action.get('node').toJS());\n            } else {\n                totalActions.push(IconMap.getButton(\n                    _determineActionIcon(action),\n                    {\n                        onClick: (e) => {\n                            stopProp(e);\n\n                            if (_.isFunction(action.get('onClick'))) {\n                                action.get('onClick')();\n                            }\n                        }\n                    },\n                    {\n                        color: mainTheme.headerIconColor\n                    }\n                ));\n            }\n\n        });\n\n        if (overflowActions && overflowActions.length) {\n            // Add in the overflow\n            totalActions.push(\n                <IconMenu\n                    onRequestChange={(open) => {\n                        if (!open) {\n                            dispatch(clearOverlay());\n                        } else {\n                            dispatch(updateOverlayStore({\n                                show: true,\n                                mode: 'translucent',\n                                onClick: (e) => {\n                                    stopProp(e);\n\n                                    dispatch(clearOverlay());\n                                }\n                            }));\n                        }\n                    }}\n                    iconButtonElement={\n                        IconMap.getButton('more-vert', {\n                            onClick: (e) => {\n                                stopProp(e);\n\n                                dispatch(updateOverlayStore({\n                                    show: true,\n                                    mode: 'translucent',\n                                    onClick: (e) => {\n                                        stopProp(e);\n\n                                        dispatch(clearOverlay());\n                                    }\n                                }));\n                            }\n                        }, {\n                            color: mainTheme.headerIconColor\n                        })\n                    }\n                    targetOrigin={{horizontal: 'right', vertical: 'top'}}\n                    anchorOrigin={{horizontal: 'right', vertical: 'top'}}>\n                    {overflowActions.map((action, i) => {\n\n                        return <MenuItem\n                            key={`action-${i}`}\n                            primaryText={_determineActionLabel(action)}\n                            leftIcon={IconMap.getElement(_determineActionIcon(action))}\n                            onClick={(e) => {\n                                stopProp(e);\n\n                                dispatch(clearOverlay());\n\n                                if (_.isFunction(action.get('onClick'))) {\n                                    action.get('onClick')();\n                                }\n                            }}\n                        />;\n                    })}\n                </IconMenu>\n            );\n        }\n\n        return totalActions;\n    };\n\n    /**\n     *\n     * @param {object} inst - Reference to React component\n     * @returns {*}\n     * @private\n     */\n    _determineLabel = (inst) => {\n        const {\n            nav\n        } = inst.props;\n\n        const mainView = nav.get('mainView');\n        const eventView = nav.get('eventView');\n        const subView = getCurrentSubView(nav);\n\n        if (subView) {\n            return <SubHeaderCard/>;\n        }\n\n        if (eventView) {\n            return <p/>;\n        }\n\n        if (mainView) {\n            return <MainHeaderCard/>;\n        }\n    };\n\n    /**\n     * Determines what action to display in the navigation section\n     *\n     * @param inst\n     * @returns {null|*}\n     * @private\n     */\n    _determineNavAction = (inst) => {\n        const {\n            dispatch,\n            nav\n        } = inst.props;\n\n        // default to true\n        const includeDrawer = (inst.props.includeDrawer === undefined) ? true : inst.props.includeDrawer;\n\n        const eventView = nav.get('eventView');\n        const subView = getCurrentSubView(nav);\n        const onReturn = nav.get('onReturn');\n\n        if (subView) {\n            return IconMap.getButton('arrow-back', {\n                onClick: (e) => {\n                    stopProp(e);\n\n                    _backHandler(inst);\n                }\n            }, {\n                color: mainTheme.headerIconColor\n            });\n        }\n\n        // this will use the default left icon, which is hamburger\n        if (eventView && !subView) {\n            let actions = [];\n\n            if (_.isFunction(onReturn)) {\n                actions.push(\n                    IconMap.getButton('arrow-back', {\n                        key: 'nav-action-2',\n                        onClick: (e) => {\n                            stopProp(e);\n\n                            checkForDirty(_.assign(_.pick(inst.props, ['dispatch', 'event', 'view']), {\n                                changeViewCallback: () => {\n                                    dispatch(onReturn());\n                                }\n                            }));\n                        }\n                    }, {\n                        color: mainTheme.headerIconColor\n                    })\n                );\n            }\n\n            if (includeDrawer) {\n                actions.push(IconMap.getButton('menu', {\n                    key: 'nav-action-1',\n                    onClick: (e) => {\n                        stopProp(e);\n\n                        radio(RADIOS.ui.OPEN_EVENT_NAV).broadcast();\n\n                        dispatch(toggleDrawer(true));\n                    }\n                }, {\n                    color: mainTheme.headerIconColor\n                }));\n            }\n\n            return actions;\n        }\n\n        // this will tell it to not use any left icon\n        return <div style={{width: '48px'}}></div>;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            view: PropTypes.object,\n            includeDrawer: PropTypes.bool\n        },\n        propsPriority: [\n            'includeDrawer',\n            'nav',\n            'view',\n            'event'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'Header',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Invoked once and cached when the class is created. Values in\n         * the mapping will be set on this.props if that prop is not\n         * specified by the parent component\n         *\n         * @returns {object}\n         */\n        getDefaultProps() {\n            return {\n                includeDrawer: true\n            };\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                dispatch\n            } = this.props;\n\n            return (\n                <Toolbar style={{\n                    justifyContent: 'flex-start'\n                }}>\n                    <ToolbarGroup firstChild={true}>\n                        {_determineNavAction(this)}\n                    </ToolbarGroup>\n\n                    <ToolbarGroup style={{\n                        flexGrow: 1,\n                        flexShrink: 1,\n                        overflow: 'hidden',\n                        flexBasis: '100%'\n                    }}>\n                        {_determineLabel(this)}\n                    </ToolbarGroup>\n\n                    <ToolbarGroup\n                        lastChild={true}\n                        style={{\n                            justifyContent: 'flex-end',\n                            flexGrow: 1,\n                            flexShrink: 0,\n                            minWidth: '100px'\n                        }}>\n                        {_.map(_determineActions(this), (action, i) => {\n                            return <div key={`header-action-${i}`}>{action}</div>;\n                        })}\n                    </ToolbarGroup>\n                </Toolbar>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { HeaderFactory }","/**\n * Creates a LinkCollapseArea Component for showing and hiding content via a Link\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst LinkCollapseAreaFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require(\"lodash\");\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Components\n    const {CSSTransistorFactory} = require('./CSSTransistor');\n    const {LinkFactory} = require('./Link');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    let _advancedOptionsShowing = false;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _advancedClickHandler;\n\n    /**\n     * Handles the Advanced Options click/touch event.  Toggles visibility of\n     * Advanced options.\n     *\n     * @private\n     */\n    _advancedClickHandler = (event, inst) => {\n        if (_advancedOptionsShowing) {\n            inst.refs.cssTransistor.performLeave();\n        }\n        else {\n            inst.refs.cssTransistor.performEnter();\n        }\n\n        _advancedOptionsShowing = !_advancedOptionsShowing;\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const CSSTransistor = CSSTransistorFactory({});\n    const Link = LinkFactory({});\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used for debug messaging\n         */\n        displayName: 'LinkCollapseArea',\n\n        /**\n         * Collapses the area, if it is showing.\n         */\n        hide() {\n            if (_advancedOptionsShowing) {\n                this.refs.cssTransistor.performLeave();\n            }\n        },\n\n        /**\n         * Expands the area, if it is collapsed.\n         */\n        show() {\n            if (!_advancedOptionsShowing) {\n                this.refs.cssTransistor.performEnter();\n            }\n        },\n\n        /**\n         * Generates virtual HTML/DOM\n         *\n         * @returns {XML|JSX}\n         */\n        render() {\n            const {\n                children,\n                linkTitle\n            } = this.props;\n\n            return (<div className='advanced-link mbsc-padding'>\n                <Link\n                    onClick={(e) => {\n                        stopProp(e);\n\n                        _advancedClickHandler(e, this);\n                    }}>\n                {(linkTitle ? linkTitle : getText('Advanced Options'))}</Link>\n\n                <CSSTransistor\n                        ref='cssTransistor'\n                        transitionName='advanced-options'\n                        transitionEnterTimeout={500}\n                        transitionLeaveTimeout={500}>\n                    <div className='advanced-options' style={{\n                        overflowY: 'hidden',\n                        overflowX: 'hidden'\n                    }}>\n                        {children}\n                    </div>\n                </CSSTransistor>\n            </div>);\n        }\n    });\n}\n\nexport { LinkCollapseAreaFactory }\n","/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default {\n    SAVE: 'save',\n    SUBMIT: 'submit',\n    CANCEL: 'cancel',\n    DELETE: 'delete',\n    DISCARD: 'discard',\n    EXCHANGE: 'exchange',\n    MORE_VERTICAL: 'more_v',\n    RAISED: 'raised',\n    FLAT: 'flat',\n    ICON: 'icon',\n    ACTION: 'action'\n};","/**\n * Creates and ListCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst ListCardFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const {is} = require('immutable');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n    const IconButton = require('material-ui/IconButton').default;\n    const IconMenu = require('material-ui/IconMenu').default;\n    const MenuItem = require('material-ui/MenuItem').default;\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // Components\n    const {MultiLineSecondaryTextFactory} = require('./MultiLineSecondaryText');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Utils\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildAvatar;\n    let _buildMenu;\n    let _buildSecondaryText;\n\n    /**\n     *\n     * @param inst\n     * @returns {null|object}\n     * @private\n     */\n    _buildAvatar = (inst) => {\n        const {leftAvatarIcon, leftAvatarText, leftAvatarBackgroundColor} = inst.props;\n\n        let leftAvatarElement;\n\n        if (!leftAvatarIcon && !leftAvatarText)\n            return null;\n\n        if (_.isString(leftAvatarText) && leftAvatarText.length) {\n            let styleOverride = {};\n\n            if (leftAvatarText.length >= 3) {\n                styleOverride['fontSize'] = '10px';\n            }\n\n            leftAvatarElement = <Avatar\n                style={styleOverride}\n                backgroundColor={leftAvatarBackgroundColor}>\n\n                {leftAvatarText}\n            </Avatar>;\n        }\n\n        if (leftAvatarIcon) {\n            if (_.isString(leftAvatarIcon)) {\n                leftAvatarElement = <Avatar icon={IconMap.getElement(leftAvatarIcon)}/>;\n            } else {\n                leftAvatarElement = <Avatar icon={leftAvatarIcon}/>;\n            }\n        }\n\n\n        return {\n            leftAvatar: leftAvatarElement\n        };\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {null|object}\n     * @private\n     */\n    _buildMenu = (inst) => {\n        const {menuItems} = inst.props;\n\n        if (!menuItems || !menuItems.length) {\n            return null;\n        }\n\n        const iconButtonElement = (\n            <IconButton\n                touch={true}\n                tooltip=\"more\"\n                tooltipPosition=\"bottom-left\">\n                {IconMap.getElement('more-vert')}\n            </IconButton>\n        );\n\n        const rightIconMenu = (\n            <IconMenu iconButtonElement={iconButtonElement}>\n                {_.map(menuItems, (item, i) => {\n                    const {leftIcon, onClick, label} = item;\n\n                    let leftIconElement = leftIcon;\n\n                    if (_.isString(leftIcon)) {\n                        leftIconElement = IconMap.getElement(leftIcon);\n                    }\n\n                    return <MenuItem\n                        key={`menu-item-${i}`}\n                        leftIcon={leftIconElement}\n                        onClick={(e) => {\n                            stopProp(e);\n\n                            if (_.isFunction(onClick)) {\n                                onClick(e);\n                            }\n                        }}>\n                        {label}\n                    </MenuItem>;\n                })}\n            </IconMenu>\n        );\n\n        return {\n            rightIconButton: rightIconMenu\n        };\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {null|object}\n     * @private\n     */\n    _buildSecondaryText = (inst) => {\n        const {secondaryText} = inst.props;\n\n        // This covers string and element\n        let secondaryTextElement = secondaryText;\n\n        if (!secondaryText)\n            return null;\n\n        if (_.isArray(secondaryText)) {\n            if (!secondaryText.length)\n                return null;\n\n            // TODO: allow this to be a more complex object\n            secondaryTextElement = <MultiLineSecondaryText\n                textItems={secondaryText}\n            />;\n        }\n\n        return {\n            secondaryText: secondaryTextElement\n        };\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MultiLineSecondaryText = MultiLineSecondaryTextFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            menuItems: PropTypes.arrayOf(PropTypes.shape({\n                leftIcon: PropTypes.oneOfType([\n                    PropTypes.string,\n                    PropTypes.element\n                ]).isRequired,\n                onClick: PropTypes.func.isRequired,\n                label: PropTypes.oneOfType([\n                    PropTypes.string,\n                    PropTypes.element\n                ]).isRequired\n            })),\n            leftAvatarIcon: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element\n            ]),\n            leftAvatarText: PropTypes.string,\n            leftAvatarBackgroundColor: PropTypes.string,\n            primaryText: PropTypes.string,\n            secondaryText: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.array,\n                PropTypes.element\n            ])\n        },\n        additionalComparison(nextProps, nextState, inst) {\n            // this handles the extra props in-case nothing else is set to change\n            // TODO: optimize this\n            // TODO: We should be able to compare the post-omitted property set\n            if (is(nextProps, inst.props) === false) {\n                return true;\n            }\n\n            return false;\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ListCard',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                primaryText\n            } = this.props;\n\n            // some properties will need to be excluded so we'll build an additonal prop map\n            const avatarObj = _buildAvatar(this);\n            const secondaryTextObj = _buildSecondaryText(this);\n            const menuObj = _buildMenu(this);\n\n            const builtProps = _.assign({}, avatarObj, secondaryTextObj, menuObj);\n\n            // throw on any extra props provided that isn't in our propTypes, so they can override ListItem\n            // Props directly\n            let omitList = ['dispatch'];\n\n            _.each(AutoShouldUpdateMixin.propTypes, (v, k) => {\n                omitList.push(k);\n            });\n\n            const extraProps = _.omit(this.props, omitList);\n\n            return <ListItem\n                primaryText={primaryText}\n                innerDivStyle={{\n                    borderBottom: '1px solid rgb(224, 224, 224)'\n                }}\n                {...builtProps}\n                {...extraProps}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ListCardFactory }","const {TranslateActionsFactory} = require('../actions');\n\nconst {getText} = TranslateActionsFactory({});\n\nconst _ = require('lodash');\n\n/**\n * Provides methods to help validate React Forms\n * @mixin\n */\nconst ValidationMixin = {\n    /**\n     * Verifies a valid phone formatting\n     *\n     * @param {string} value\n     *\n     * @return {boolean}\n     */\n    phonePlus(value) {\n        if (/^([(,),\\ \\.\\-,\\+,0-9]+)$/.test(value) === false) {\n            return getText('Please enter a valid phone number');\n        }\n\n        return true;\n    },\n    /**\n     * Verifies a valid formatted time\n     *\n     * @param {string} value\n     *\n     * @return {boolean}\n     */\n    time(value) {\n        if (/^([0-9]{0,2}\\:[0-9]{0,2}[\\ ]?(AM|PM))$/.test(value) === false) {\n            return getText('Please enter a valid time');\n        }\n\n        return true;\n    },\n    /**\n     * If a condition is met, then it will run a validator\n     *\n     * @param {boolean|function} condition\n     * @param {function} validator\n     * @returns {Function}\n     */\n    validateIf(condition, validator) {\n        let shouldValidate = false;\n\n        if (typeof condition === 'function') {\n            shouldValidate = condition.call();\n        } else if (typeof  condition === 'boolean') {\n            shouldValidate = condition;\n        }\n\n        if (shouldValidate && typeof validator === 'function') {\n            return (value) => {\n                return validator(value);\n            };\n        }\n    },\n    /**\n     * Similar to blankOr but supports more than just strings\n     * @param {function} validator\n     * @returns {function(*=)}\n     */\n    emptyOr(validator) {\n        return (value) => {\n            if (value === undefined || value === null) {\n                return true;\n            }\n\n            if (_.isString(value)) {\n                return this.blankOr(value, validator);\n            } else if (_.isDate(value)) {\n                return validator(value);\n            }\n        };\n    }\n};\n\nexport default ValidationMixin;","/**\n *\n * @param spec\n * @returns {*}\n * @constructor\n */\nconst FormLoadingFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const {connect} = require('react-redux');\n\n    // Theme\n    const IconMap = require('../theme/IconMap');\n\n    const Platform = require('../util/Platform').default;\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    const component = createClass({\n\n        /**\n         * Sets up the components initial state\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                showStatic: true\n            };\n        },\n\n        /**\n         * Invoked once immediately after the initial rendering occurs.\n         */\n        componentDidMount() {\n            const {showStatic} = this.state;\n\n            if (showStatic) {\n                setTimeout(() => {\n                    this.setState({\n                        showStatic: false\n                    });\n                }, 25);\n            }\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {XML|JSX|Element}\n         */\n        render() {\n            const {showStatic} = this.state;\n            const {browser, children} = this.props;\n\n            let width = '100%';\n\n            if (Platform.isTablet(browser)) {\n                width = 'calc(100% - 256px)';\n            }\n\n            if (showStatic) {\n                return IconMap.getElement('more-horiz', {\n                    style: {\n                        height: '64px',\n                        fontSize: '48px',\n                        fontWeight: 'bold',\n                        margin: 'auto',\n                        position: 'absolute',\n                        top: '50%',\n                        width,\n                        textAlign: 'center',\n                        marginTop: '-50px'\n                    }\n                });\n            }\n\n            return <div>{children}</div>;\n        }\n    });\n\n    return connect((state) => {\n        return {\n            browser: state.browser\n        };\n    })(component);\n}\n\nexport { FormLoadingFactory }","import TranslateActionsFactory from \"../actions/TranslateActions\";\n\nconst {getText} = TranslateActionsFactory({});\n\nconst icons = {\n\t'on-site': {\n\t\ticon: 'group',\n\t\tlabel: getText('on-site')\n\t},\n\t'1': {\n\t\ticon: 'group',\n\t\tlabel: getText('on-site')\n\t},\n\t'video/web': {\n\t\ticon: 'videocam',\n\t\tlabel: getText('video/web')\n\t},\n\t'2': {\n\t\ticon: 'videocam',\n\t\tlabel: getText('video/web')\n\t},\n\t'phone': {\n\t\ticon: 'phone',\n\t\tlabel: getText('phone')\n\t},\n\t'3': {\n\t\ticon: 'phone',\n\t\tlabel: getText('phone')\n\t},\n\t'not set': {\n\t\ticon: 'none',\n\t\tlabel: getText('not set')\n\t},\n\t'0': {\n\t\ticon: 'none',\n\t\tlabel: getText('not set')\n\t}\n};\n\nexport default icons;","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    type: '',\n    text: ''\n});","/**\n *\n * @param spec\n * @constructor\n * @mixes AddressMixin\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst EventInfoCardFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const {fromJS} = require('immutable');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Util\n    const _ = require('lodash');\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = require('../../util/DateTools').default({});\n\n    // Enums\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n\n    // Mixins\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        SpeakerInfoActionsFactory\n    } = require('../../actions');\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // Components\n    const Avatar = require('material-ui/Avatar').default;\n    const {IconLabelFactory} = require('../IconLabel');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        determineMsm\n    } = SpeakerInfoActionsFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _buildHeadingMap;\n    let _determineStatusColor;\n    let _generateAvatar;\n\n    /**\n     *\n     * @param {object} spec\n     * @property {Record} spec.record\n     * @property {object} spec.inst\n     * @property {object} spec.map\n     * @returns {{}}\n     * @private\n     */\n    _buildHeadingMap = (spec) => {\n        let map = {};\n        let inst = spec.inst;\n        let record = spec.record;\n        let stageTimes;\n        let venues;\n\n        stageTimes = record.get('Stagetime');\n\n        if (stageTimes && stageTimes.size) {\n\n            let firstStartTime = stageTimes.sortBy((stageTime) => {\n                return (stageTime ? stageTime.get('starttime') : null);\n            }).first().get('starttime');\n\n            let formattedDate = esUtils.format_date(convertFromBalboaTrunkTimestamp(firstStartTime), esUtils.format_date.masks.mediumDate);\n\n            map['strdate'] = {\n                subHeading: formattedDate,\n                iconClass: 'date-range'\n            };\n        }\n\n        venues = record.get('Venue');\n\n        if (venues && venues.size >= 1) {\n            let addressString = inst.buildLocationString(venues.first().toJS(), ['city', 'st']);\n            if (!_.isEmpty(addressString)) {\n                map['address'] = {\n                    subHeading: addressString,\n                    iconClass: 'location-on'\n                };\n            }\n        }\n\n        const deliveryMethod = record.get('deliveryMethod') || 'none';\n\n        let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod.toString()] || DELIVERY_METHOD_ICONS['0'];\n\n        map['deliveryMethod'] = {\n            subHeading: dmIcon.label,\n            iconClass: dmIcon.icon\n        };\n\n        map['speaker'] = {\n            subHeading: `${record.get('name_full')}`,\n            iconClass: 'person'\n        };\n\n        return map;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {string}\n     * @private\n     */\n    _determineStatusColor = (inst) => {\n        const {\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const status = modifiedEvent.get('status');\n\n        return mainTheme.getStatusColor(status) || mainTheme[`${status}Color`];\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const deliveryMethod = modifiedEvent.get('deliveryMethod') || 'none';\n\n        let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod];\n        let avIcon;\n        let bgColor;\n\n        if (dmIcon) {\n            avIcon = IconMap.getElement(dmIcon.icon);\n        }\n\n        bgColor = _determineStatusColor(inst);\n\n        return <Avatar\n            backgroundColor={bgColor}\n            icon={avIcon}/>;\n    };\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const IconLabel = IconLabelFactory({});\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: {},\n        additionalMapFunc: _buildHeadingMap\n    });\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'EventInfoCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AddressMixin, AutoShouldUpdateMixin, CardMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                event,\n                speakerInfo\n            } = this.props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n            const organization = modifiedEvent.get('organization');\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n            const status = modifiedEvent.get('status');\n\n            let subHeadingCollection;\n\n            let headingMap = this.buildHeadingMap({\n                record: fromJS(_.assign(modifiedEvent.toJS(), selectedSpeaker.toJS())),\n                inst: this\n            });\n\n            let mapKeys = [\n                'strdate',\n                'address',\n                'deliveryMethod',\n                (determineMsm(speakerInfo) ? 'speaker' : null)\n            ];\n\n            subHeadingCollection = this.extractHeadings(headingMap, mapKeys);\n\n            // Wait for event to be fully loaded before displaying partial data\n            if (modifiedEvent.size === 1) {\n                subHeadingCollection = [];\n            }\n\n            return (\n                <div style={{\n                    backgroundColor: mainTheme.darkBackgroundColor,\n                    minHeight: '80px',\n                    color: 'white',\n                    display: 'flex',\n                    padding: '10px'\n                }}>\n\n                    <div style={{\n                        order: 1\n                    }}>\n                        {_generateAvatar(this)}\n                    </div>\n\n                    <div style={{\n                        order: 2,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        flexShrink: 1,\n                        flexGrow: 1\n                    }}>\n\n                        <div style={{\n                            order: 1,\n                            paddingTop: '5px',\n                            paddingLeft: '5px',\n                            fontWeight: 'bold'\n                        }}>\n                            {organization}\n                        </div>\n\n                        <div style={{\n                            order: 2,\n                            display: 'flex',\n                            paddingTop: '10px',\n                            paddingLeft: '5px'\n                        }}>\n\n                            <div style={{\n                                order: 1,\n                                flexGrow: 1,\n                                fontSize: '12px',\n                                color: '#87c5ff',\n                                fontWeight: 'bold'\n                            }}>\n                                {_.map(subHeadingCollection, (s, i) => {\n                                    return <div key={i} style={{\n                                        marginTop: '2px',\n                                        marginBottom: '2px'\n                                    }}>\n                                        <IconLabel fontSize=\"12px\" color=\"#87c5ff\" iconClass={s.iconClass}\n                                                   label={s.subHeading}/>\n                                    </div>;\n                                })}\n                            </div>\n\n                            <div style={{\n                                order: 2,\n                                textAlign: 'right',\n                                color: _determineStatusColor(this),\n                                fontSize: '12px',\n                                fontWeight: 'bold'\n                            }}>\n                                {status && status.toUpperCase()}\n                            </div>\n\n                        </div>\n\n                        <div style={{\n                            order: 3\n                        }}></div>\n\n                    </div>\n\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { EventInfoCardFactory }","/**\n * Builds an AutoShouldUpdate Mixin.  This Mixin will build your propTypes and\n * shouldComponentUpdate checks based on passed in parameters\n *\n * @param spec\n * @param {object} spec.propTypes - (required) Same definitions you'd normally put in propTypes\n * @param {array} spec.propsPriority - (optional) Optional ordering of how to compare the propTypes\n * @param {boolean} spec.compareState - (optional) Compare state\n * @param {array} spec.statePriority - (optional) Optional ordering of how to compare the state\n * @param {function} spec.additionalComparison - (optional) Custom function for additional comparison\n *\n * @property {object} propTypes\n * @property {function} shouldComponentUpdate\n * @property {function} mapStateToProps\n *\n * @returns {{propTypes: object, shouldComponentUpdate: function, mapStateToProps: function}}}\n * @constructor\n * @mixin\n */\nconst AutoShouldUpdateMixinFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const {\n        is,\n        Iterable,\n        Record\n    } = require('immutable');\n    const deepEqual = require('deep-equal');\n\n    // Utils\n    const {\n        log,\n        warn\n    } = require('../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    const {\n        propTypes,\n        propsPriority,\n        compareState,\n        statePriority,\n        additionalComparison\n    } = spec;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _compareObjectAndPriorities;\n    let _comparePropsAndPriorities;\n    let _compareStateAndPriorities;\n    let _determineEquals;\n\n    /**\n     * Compares an object's properties and an array of keys to see if there are any\n     * differences.\n     *\n     * @param {object} obj\n     * @param {array} priorities\n     * @returns {boolean}\n     * @private\n     */\n    _compareObjectAndPriorities = (obj, priorities) => {\n        let equals = true;\n\n        if (!priorities) {\n            return equals;\n        }\n\n        if (_.size(obj) !== _.size(priorities)) {\n            return false;\n        }\n\n        _.map(obj, (value, key) => {\n            if (equals && !_.includes(priorities, key)) {\n                equals = false;\n            }\n        });\n\n        if (!equals) {\n            return equals;\n        }\n\n        _.map(priorities, (key) => {\n            if (equals && !_.has(obj, key)) {\n                equals = false;\n            }\n        });\n\n        return equals;\n    };\n\n    /**\n     * Compares propTypes and propPriorities to make sure they are compatible\n     *\n     * @param {object} props\n     * @param {array} priorities\n     * @private\n     */\n    _comparePropsAndPriorities = (props, priorities) => {\n        let equals = true;\n\n        equals = _compareObjectAndPriorities(props, priorities);\n\n        if (!equals) {\n            warn(`WARNING: Your propsPriority does not match your propTypes (AutoShouldUpdateMixinFactory)`);\n        }\n    };\n\n    /**\n     * Compares state and statePriorities to make sure they are compatible\n     *\n     * @param {object} props\n     * @param {array} priorities\n     * @private\n     */\n    _compareStateAndPriorities = (props, priorities) => {\n        let equals = true;\n\n        equals = _compareObjectAndPriorities(props, priorities);\n\n        if (!equals) {\n            warn(`WARNING: Your statePriority does not match your state (AutoShouldUpdateMixinFactory)`);\n        }\n    };\n\n    /**\n     * Equals can be complicated depending on the type of object we are looking at\n     *\n     * @param {*} a\n     * @param {*} b\n     * @returns {boolean}\n     * @private\n     */\n    _determineEquals = (a, b) => {\n        if (Iterable.isIterable(a)) {\n            return is(a, b);\n        }\n\n        // Functions will always return false causing it to always update so we just set them to match (as they would\n        // in almost all cases anyway)\n        if (_.isFunction(a)) {\n            return true;\n        }\n\n        return deepEqual(a, b);\n    };\n\n    /**********************************\n     * Validation\n     *********************************/\n\n    if (!propTypes || !_.size(propTypes)) {\n        warn('WARNING: You did not include a propTypes (AutoShouldUpdateMixinFactory)');\n    }\n\n    if (propsPriority && _.size(propTypes) !== _.size(propsPriority)) {\n        warn(`WARNING: Your propsPriority does not match your propTypes (AutoShouldUpdateMixinFactory)`);\n    }\n\n    _comparePropsAndPriorities(propTypes, propsPriority);\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        /**\n         * Specifies what we expect in 'this.props'. Allows you to validate\n         * props being passed to your components.\n         */\n        propTypes,\n        /**\n         * Invoked before rendering when new props or state are being received. This method\n         * is not called for the initial render or when forceUpdate is used.\n         *\n         * Use this as an opportunity to return false when you're certain that the transition\n         * to the new props and state will not require a component update.\n         *\n         * Should first check the properties it cares about, then check it's children's\n         * shouldComponentUpdate() to determine if it needs to render down the line.\n         *\n         * is() check with Immutable should be fast and should be set to return true\n         * at easiest to most expensive check.\n         *\n         * @param nextProps\n         * @param nextState\n         * @returns {boolean}\n         */\n        shouldComponentUpdate(nextProps, nextState) {\n            let shouldUpdate = false;\n\n            /* If no propTypes were provided then don't even bother with an expensive\n             * deep check of props, just assume always true, as is the default behavior */\n            if (!propTypes || !_.size(propTypes)) {\n                return true;\n            }\n\n            // Compare the state first, as it should be rarely used, small, and would\n            // generally mean there are going to be UI interactions that will change more\n            // often than external data\n            if (!shouldUpdate && compareState) {\n                if (statePriority && _.size(statePriority)) {\n                    // this can't happen above because we don't have access to state yet\n                    _compareStateAndPriorities(nextState, statePriority);\n\n                    _.map(statePriority, (prop) => {\n                        if (!shouldUpdate &&\n                            _.has(nextState, prop) && !_determineEquals(nextState[prop], this.state[prop])) {\n\n                            shouldUpdate = true;\n                        }\n                    });\n                }\n                else {\n                    // doing a property by property check may give a false negative\n                    // as you can technically add new items onto a state.  And most\n                    // states should be relatively flat/simple and so this check\n                    // shouldn't be costly\n                    if (!_determineEquals(nextState, this.state)) {\n                        shouldUpdate = true;\n                    }\n                }\n            }\n\n            // If we  have been provided a props priority, then iterate over that\n            // in the set order.  Only continue checks until we find a mismatch\n            if (!shouldUpdate && propsPriority && _.size(propsPriority)) {\n                _.map(propsPriority, (prop) => {\n                    if (!shouldUpdate &&\n                        _.has(propTypes, prop) && !_determineEquals(nextProps[prop], this.props[prop])) {\n\n                        shouldUpdate = true;\n\n                        // we can't be in perf mode but we don't want minor view changes to trigger re-renders\n                        // we only want a re-render if the viewport changes notably, such as keyboard coming up\n                        if (prop === 'browser') {\n                            const nextBrowser = nextProps[prop];\n                            const currentBrowser = this.props[prop];\n\n                            shouldUpdate = ((Math.abs(nextBrowser.height - currentBrowser.height) >= 50) || (Math.abs(nextBrowser.width - currentBrowser.width) >= 50));\n                        }\n                    }\n                });\n            }\n            else {\n                // otherwise just iterate over propTypes and compare each specified\n                // prop in whatever order was given.  Only continue checks until we find\n                // a mismatch\n                _.map(propTypes, (value, key) => {\n                    if (!shouldUpdate && !_determineEquals(nextProps[key], this.props[key])) {\n                        shouldUpdate = true;\n                    }\n                });\n            }\n\n            // If they provided a custom checker, run that if we still haven't found\n            // a mismatch.\n            if (!shouldUpdate && _.isFunction(additionalComparison)) {\n                shouldUpdate = additionalComparison(nextProps, nextState, this);\n            }\n\n            return shouldUpdate;\n        },\n        /**\n         * Takes in the application state and extracts the properties from it that it\n         * would like to have passed in as props.  It will be added as a listener\n         * for these items when they are changed.\n         *\n         * @param {object} state\n         * @returns {object}\n         * @private\n         */\n        mapStateToProps(state) {\n            let inject = {};\n            _.map(propTypes, (val, key) => {\n                if (_.has(state, key)) {\n                    inject[key] = state[key];\n                }\n            });\n            return inject;\n        }\n    };\n}\n\nexport default AutoShouldUpdateMixinFactory;","/**\n *\n * @param spec\n * @returns {XML}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ViewHeaderFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Components\n    const Subheader = require('material-ui/Subheader').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            label: PropTypes.string,\n            children: PropTypes.string\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    return createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ExampleComp',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                label,\n                children\n            } = this.props;\n\n            return (\n                <Subheader style={{\n                    fontWeight: 'bold',\n                    textAlign: 'center',\n                    textTransform: 'uppercase',\n                    borderBottom: '1px solid rgb(224, 224, 224)'\n                }}>{children || label}</Subheader>\n            );\n        }\n    });\n}\n\nexport { ViewHeaderFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst DisplayFieldFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const _ = require('lodash');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            label: PropTypes.string,\n            displayText: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n            labelStyle: PropTypes.object,\n            displayTextStyle: PropTypes.string,\n            children: PropTypes.oneOfType([PropTypes.object, PropTypes.func])\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'DisplayField',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                label,\n                displayText,\n                labelStyle,\n                displayTextStyle,\n                children\n            } = this.props;\n\n            return (\n                <div style={{\n                    padding: '8px 15px'\n                }}>\n                    {!_.isEmpty(label) ?\n                    <label style={_.assign({\n                        fontWeight: 'bold'\n                    }, labelStyle)}>{label}</label> : null}\n\n                    {_.isArray(displayText) && !_.isEmpty(displayText) ? _.map(displayText, (text, i) => {\n                        return <div key={i} style={_.assign({\n                            padding: '8px 0px'\n                        }, displayTextStyle)}>{text}</div>;\n                    }) : null}\n\n                    {_.isString(displayText) && !_.isEmpty(displayText) ? <div style={_.assign({\n                        padding: '8px 0px'\n                    }, displayTextStyle)}>{displayText}</div> : null}\n\n                    {children ? <div>{children}</div> : null}\n                </div>\n            );\n        }\n    });\n\n    return component;\n}\n\nexport { DisplayFieldFactory }","/**\n * Generates a ActivityList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ActivityListFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {ActivityCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {getText} = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const ActivityCard = ActivityCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dashboard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface / React Component\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ActivityList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {dashboard, speakerInfo} = this.props;\n            const activityList = dashboard.get('activity');\n            let filteredList;\n\n            if(activityList) {\n                filteredList = activityList.filter((a) => {\n                    if(speakerInfo && speakerInfo.selectedSpeaker && a && a.get('sids')) {\n                        return a.get('sids').includes(speakerInfo.selectedSpeaker.get('sid'));\n                    }\n                });\n            }\n\n            if(!filteredList || !filteredList.size) {\n                return <div></div>;\n            }\n\n            return <List>\n                <SectionHeader label={getText('Recent Activity')}/>\n\n                {filteredList ? filteredList.map((activity, i) => {\n                    return <div key={`activity-${i}`}>\n                        <ActivityCard\n                            activity={activity}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ActivityListFactory }","/**\n * Generates a CalendarEventList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst CalendarEventListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const _ = require('lodash');\n    const {fromJS} = require('immutable');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Components\n    const {SearchResultCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../../components/SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Actions\n    const {\n        CalendarActionsFactory\n    } = require('../../actions');\n\n    const esUtils = require('ES/utils/esUtils');\n    const DateToolsFactory = require('../../util/DateTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        extractMonthData\n    } = CalendarActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const SearchResultCard = SearchResultCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateListDataSortedResults;\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateListDataSortedResults = (inst) => {\n        const {\n            calendar\n        } = inst.props;\n\n        let data = [];\n        let id = 0;\n\n\n        // Process calendar data\n        const monthData = extractMonthData(calendar);\n        const selectedDay = calendar.get('selectedDay').toString();\n\n        let calData;\n        let calDetails;\n        let dayData;\n        let details;\n\n        if (monthData) {\n            calData = monthData.data;\n            calDetails = monthData.details;\n\n            dayData = _.has(calData, selectedDay) ? calData[selectedDay] : {};\n\n            details = _.uniqBy(_.reject(_.map(dayData.detail_ids, (detail_id) => {\n                return calDetails && calDetails[detail_id];\n            }), _.isEmpty), (detail) => {\n                if (detail.eid && detail.eid > 0) {\n                    return [detail.eid, detail.type].join(\"$\");\n                }\n                return [detail.desc, detail.type].join(\"$\");\n            });\n        }\n\n        let results = fromJS(details);\n        let lastDate = null;\n        let sortedResults;\n        let dailyMap = {};\n\n        sortedResults = results.sort((resultA, resultB) => {\n            let stampA = resultA.get('str');\n            let stampB = resultB.get('str');\n\n            if (stampA && !_.isNumber(stampA)) {\n                stampA = DateTools.convertToBalboaTrunkTimestamp(esUtils.convertFromISO8601(stampA));\n            }\n\n            if (stampB && !_.isNumber(stampB)) {\n                stampB = DateTools.convertToBalboaTrunkTimestamp(esUtils.convertFromISO8601(stampB));\n            }\n\n            if (stampA < 0 && stampB > 0) {\n                return -1;\n            }\n            else if (stampB < 0 && stampA > 0) {\n                return 1;\n            }\n            else if (stampA < stampB) {\n                return 1;\n            }\n            else if (stampB < stampA) {\n                return -1;\n            }\n\n            return 0;\n        });\n\n        if (sortedResults && sortedResults.size) {\n            sortedResults.map((item) => {\n                let date = null;\n                let formattedDate;\n\n                let stamp = item.get('str');\n\n                if (stamp && !_.isNumber(stamp)) {\n                    stamp = DateTools.convertToBalboaTrunkTimestamp(esUtils.convertFromISO8601(stamp));\n                }\n\n                if (stamp > 0) {\n                    date = DateTools.convertFromBalboaTrunkTimestamp(stamp);\n                }\n\n                if (date) {\n                    formattedDate = esUtils.format_date(date, esUtils.format_date.masks.mediumDate);\n                }\n\n                if (!_.isEmpty(item.get('eid')) || item.get('type') === 'daily') {\n                    // we only want to show one daily per day\n                    if (item.get('type') === 'daily' && dailyMap[`${formattedDate}-${item.get('desc')}`] === item.get('desc')) {\n                        return;\n                    }\n\n                    dailyMap[`${formattedDate}-${item.get('desc')}`] = item.get('desc');\n\n                    data.push({\n                        id: id += 1,\n                        key: [item.get(\"eid\"), item.get(\"type\")].join(\"$\"),\n                        eid: item.get(\"eid\"),\n                        card: SearchResultCard,\n                        props: {\n                            formattedDate: (date ? formattedDate : null),\n                            status: item.get('sta') || item.get('type') || '',\n                            organization: item.get('desc'),\n                            deliveryMethod: item.get('dm'),\n                            city: item.get('vcty'),\n                            state: item.get('vst'),\n                            country: item.get('vcnt'),\n                            dataEid: item.get('eid'),\n                            disabled: (item.get('type') === 'daily')\n                        }\n                    });\n                }\n            });\n        }\n        // Only show 1 event per day...even if it has multiple stagetimes\n        data = _.uniqBy(data, \"key\");\n        return data;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'CalendarEventList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const sortedResults = _generateListDataSortedResults(this);\n\n            return (\n                <List>\n                    {sortedResults ? _.map(sortedResults, (result) => {\n                        let key = `calendar-event-${result.id}`;\n\n                        if (result.header) {\n                            return <SectionHeader key={key}>{result.title}</SectionHeader>;\n                        }\n\n                        return <div key={key}>\n                            <SearchResultCard {...result.props}/>\n\n                            <Divider/>\n                        </div>;\n                    }) : null}\n                </List>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CalendarEventListFactory }","/**\n * Generates a JobList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobListFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const moment = require('moment');\n    const _ = require('lodash');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        JobBoardActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {JobCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateTools = require('../../util/DateTools').default({});\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        getMyInfo,\n        isJobLead,\n        sortJobs\n    } = JobBoardActionsFactory({});\n    const {getText} = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const JobCard = JobCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface / React Component\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {jobBoard, speakerInfo} = this.props;\n            const jobList = jobBoard.jobs;\n            let filteredList = undefined;\n            let sortedList = undefined;\n\n            if(jobList) {\n                filteredList = jobList.filter((job) => {\n                    return isJobLead({jobBoard, speakerInfo, job});\n                });\n            }\n\n            if(filteredList) {\n                sortedList = sortJobs(filteredList);\n            }\n\n            return <List>\n                <SectionHeader label={getText('Job Board')}/>\n\n                {sortedList ? sortedList.map((job, i) => {\n                    return <div key={`job-${i}`}>\n                        <JobCard job={job}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobListFactory }","/**\n * Generates a JobList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst LeadOfferListFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const moment = require('moment');\n    const _ = require('lodash');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const ListItem = require('material-ui/List').ListItem;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        JobBoardActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {LeadOfferCardFactory, MessageCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    const {MessageModel} = require('../../stores/models');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateTools = require('../../util/DateTools').default({});\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        getMyInfo,\n        isJobOffer,\n        sortJobs\n    } = JobBoardActionsFactory({});\n    const {getText} = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const LeadOfferCard = LeadOfferCardFactory();\n    const MessageCard = MessageCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _buildEmptyMessage = undefined;\n\n    _buildEmptyMessage = () => {\n        return MessageModel({\n            type: 'info',\n            text: getText(\"Once you are on the client's shortlist for an engagement, it will appear here and you can work toward an offer.\")\n        });\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface / React Component\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'LeadOfferList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {jobBoard, speakerInfo} = this.props;\n            const jobList = jobBoard.jobs;\n            let filteredList = undefined;\n            let sortedList = undefined;\n\n            if(jobList) {\n                filteredList = jobList.filter((job) => {\n                    return isJobOffer({jobBoard, speakerInfo, job});\n                });\n            }\n\n            if(filteredList) {\n                sortedList = sortJobs(filteredList);\n            }\n\n            if(!jobBoard.get('lastUpdated')) {\n                return null;\n            }\n\n            return <List>\n                <SectionHeader label={getText('Leads & Offers')}/>\n\n                {sortedList && sortedList.count() ? sortedList.map((job, i) => {\n                    return <div key={`job-${i}`}>\n                        <LeadOfferCard\n                            job={job}\n                            myInfo={_.get(jobBoard.toJS(), [\"per_sid\", speakerInfo.selectedSpeaker.get('sid'), job.get('event_id')], {})}\n                        />\n\n                        <Divider/>\n                    </div>;\n                }) : <MessageCard message={_buildEmptyMessage()}/>}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LeadOfferListFactory }","/**\n * Generates a ActivityList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst MessageListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {MessageCardFactory} = require('../cards');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            messages: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MessageList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {messages} = this.props;\n\n            return <List>\n                {messages ? messages.map((message, i) => {\n                    return <div key={`message-${i}`}>\n                        <MessageCard\n                            message={message}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { MessageListFactory }","/**\n * Generates a NotesList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst NotesListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    const MessageModel = require('../../stores/models/MessageModel').default;\n\n    // Material UI\n    const {List, ListItem} = require('material-ui/List');\n    const Divider = require('material-ui/Divider').default;\n    const Toggle = require('material-ui/Toggle').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {MessageCardFactory, NoteCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n    const NoteCard = NoteCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateNoteListData;\n    let _isSystemNote;\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateNoteListData = (inst) => {\n        const {\n            event\n        } = inst.props;\n        const {\n            showSystemNotes,\n            toggledNoteId,\n            expandAllNotes,\n        } = inst.state;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const notesList = modifiedEvent.get('Note');\n\n        let fullNotesList = null;\n\n        let id = 0;\n        let data = [];\n\n        if (notesList && notesList.size) {\n            if (showSystemNotes) {\n                fullNotesList = notesList;\n            }\n            else {\n                fullNotesList = notesList.filter((note) => {\n                    return !_isSystemNote(note);\n                });\n            }\n\n            fullNotesList = fullNotesList.sortBy((note) => {\n                return note.get('datetime');\n            }, (a, b) => {\n                if (a && !b) {\n                    return -1;\n                }\n                else if (b && !a) {\n                    return 1;\n                }\n                else if (!a && !b) {\n                    return 0;\n                }\n                else if (a.getDate() < b.getDate()) {\n                    return 1;\n                }\n                else if (b.getDate() > a.getDate()) {\n                    return -1;\n                }\n\n                return 0;\n            });\n        }\n\n        return fullNotesList;\n    };\n\n    /**\n     * Determines if a note was generated by the system\n     *\n     * @param {Map|Record} note\n     * @returns {boolean}\n     * @private\n     */\n    _isSystemNote = (note) => {\n        return (/^\\*/.test(note.get('enteredby')) || /^Event created as a/.test(note.get('content')));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'NotesList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getInitialState() {\n            return {\n                showSystemNotes: false\n            };\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {showSystemNotes} = this.state;\n            const filteredNotesList = _generateNoteListData(this);\n\n            const showNotesHelp = (!filteredNotesList || !filteredNotesList.size);\n\n            return <List>\n                <SectionHeader>{getText('Notes')}</SectionHeader>\n\n                <ListItem>\n                    <Toggle\n                        label={getText(\"Show System Notes\")}\n                        toggled={showSystemNotes}\n                        onToggle={(e, val) => {\n                            this.setState({\n                                showSystemNotes: val\n                            });\n                        }}/>\n                </ListItem>\n\n                {(showNotesHelp) ? <MessageCard message={MessageModel({\n                    type: 'info',\n                    text: getText('Tap the Add button below to create a new %1$s.', {\n                        params: [getText('Note')]\n                    })\n                })}/> : null}\n\n                {filteredNotesList ? filteredNotesList.map((item, i) => {\n                    return <div key={`notes-${i}`}>\n                        <NoteCard\n                            note={item}\n                            isSystem={_isSystemNote(item)}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { NotesListFactory }","/**\n * Generates a PipelineList component\n *\n * @param {object} spec\n * @constructor\n * @returns {function|*} - Redux 'connected'\n */\nconst PipelineListFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {PipelineCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generatePipelineData;\n\n    /**\n     *\n     * @param inst\n     * @returns {Record|Map}\n     * @private\n     */\n    _generatePipelineData = (inst) => {\n        const {\n            dashboard,\n            speakerInfo\n        } = inst.props;\n        const pipeline = dashboard.get('pipeline');\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n        let pipelineData = null;\n\n        if (selectedSpeaker && pipeline) {\n            if (pipeline.get(`sid${selectedSpeaker.get('sid')}`)) {\n                pipelineData = pipeline.get(`sid${selectedSpeaker.get('sid')}`);\n            }\n            else if (pipeline.get('sid0')) {\n                pipelineData = pipeline.get('sid0');\n            }\n        }\n\n        return pipelineData;\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    let PipelineCard = PipelineCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dashboard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'PipelineList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const pipelineData = _generatePipelineData(this);\n\n            return <List>\n                <SectionHeader>{getText('Events Pipeline')}</SectionHeader>\n\n                {(pipelineData && pipelineData.get('s1') && pipelineData.get('s1').size) ?\n                    <div>\n                        <PipelineCard\n                            label={getText('Confirmed')}\n                            searchTerm='pipeline:confirmed'\n                            pipelineData={pipelineData.get('s1')}/>\n\n                        <Divider/>\n                    </div>\n                    : null}\n\n                {(pipelineData && pipelineData.get('s0') && pipelineData.get('s0').size) ?\n                    <div>\n                        <PipelineCard\n                            label={getText('Held')}\n                            searchTerm='pipeline:held'\n                            pipelineData={pipelineData.get('s0')}/>\n\n                        <Divider/>\n                    </div>\n                    : null}\n\n                {(pipelineData && pipelineData.get('s10') && pipelineData.get('s10').size) ?\n                    <div>\n                        <PipelineCard\n                            label={getText('Leads')}\n                            searchTerm='pipeline:lead'\n                            pipelineData={pipelineData.get('s10')}/>\n                        <Divider/>\n                    </div>\n                    : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { PipelineListFactory }","/**\n * Generates a ProductList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ProductListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    const MessageModel = require('../../stores/models/MessageModel').default;\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {\n        MessageCardFactory,\n        ProductCardFactory,\n        TotalCardFactory\n    } = require('../cards');\n\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n    const ProductCard = ProductCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n    const TotalCard = TotalCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ProductList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getInitialState() {\n            return {};\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {event} = this.props;\n            const modifiedEvent = event.get('modifiedEvent');\n            const productList = modifiedEvent.get('ProductSale');\n            let productTotal = 0;\n\n            return <List>\n                <SectionHeader>{getText('Products')}</SectionHeader>\n\n                {productList && productList.size === 0 ?\n                    <MessageCard message={new MessageModel({\n                        type: 'info',\n                        text: getText('Tap the Add button below to create a new %1$s.', {\n                            params: [getText('Product')]\n                        })\n                    })}/>\n                    : null}\n\n                {productList ? productList.map((product) => {\n                    const qty = product.get('qtysold');\n                    const price = product.get('priceeach');\n\n                    let qtyFloat;\n                    let priceFloat;\n\n                    if (qty) {\n                        qtyFloat = parseFloat(qty);\n                    }\n\n                    if (price) {\n                        priceFloat = parseFloat(price);\n                    }\n\n                    if (qtyFloat && priceFloat) {\n                        productTotal += (qtyFloat * priceFloat);\n                    }\n\n                    return <div key={`product-${product.get('id')}`}>\n                        <ProductCard\n                            product={product}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n\n                {productList && productList.size ? <TotalCard\n                    description={getText('Qty x Price')}\n                    total={productTotal}/> : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ProductListFactory }","/**\n * Generates a SearchList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SearchListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const {fromJS} = require('immutable');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Components\n    const {SearchResultCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Actions\n    const {\n        CalendarActionsFactory\n    } = require('../../actions');\n\n    const esUtils = require('ES/utils/esUtils');\n    const DateToolsFactory = require('../../util/DateTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        extractMonthData\n    } = CalendarActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const SearchResultCard = SearchResultCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateListDataSortedResults;\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateListDataSortedResults = (inst) => {\n        const {\n            calendar,\n            search\n        } = inst.props;\n\n        let data = [];\n        let id = 0;\n\n        const selectedYear = calendar.get('selectedYear');\n        const selectedMonth = calendar.get('selectedMonth');\n        const monthData = extractMonthData(calendar);\n\n        let calData;\n        let calDetails;\n        let dayData;\n        let details = [];\n\n        if (monthData) {\n            calData = monthData.data;\n            calDetails = monthData.details;\n\n            const dayCount = esUtils.get_n_days_in_month(selectedYear, selectedMonth);\n\n            _.map(_.range(1, dayCount + 1), (day) => {\n                dayData = _.has(calData, day) ? calData[day] : {};\n\n                details = details.concat(_.uniqBy(_.reject(_.map(dayData.detail_ids, (detail_id) => {\n                    return calDetails && calDetails[detail_id];\n                }), _.isEmpty), (detail) => {\n                    if (detail.eid && detail.eid > 0) {\n\n                      return [detail.eid, detail.type].join(\"$\");\n                    }\n                    return [detail.desc, detail.type].join(\"$\");\n                }));\n            });\n        }\n\n        const noResults = search.get('noResults');\n        const searchTerm = search.get('searchTerm');\n\n        let results = search.get('results');\n        let lastDate = null;\n        let sortedResults;\n\n        if ((!results || !results.size) &&\n            (!searchTerm || !searchTerm.length) &&\n            (!noResults)) {\n\n            results = fromJS(details);\n        }\n\n        sortedResults = results.sort((resultA, resultB) => {\n            let stampA = resultA.get('str');\n            let stampB = resultB.get('str');\n\n            if (stampA && !_.isNumber(stampA)) {\n                stampA = DateTools.convertToBalboaTrunkTimestamp(esUtils.convertFromISO8601(stampA));\n            }\n\n            if (stampB && !_.isNumber(stampB)) {\n                stampB = DateTools.convertToBalboaTrunkTimestamp(esUtils.convertFromISO8601(stampB));\n            }\n\n            if (stampA < 0 && stampB > 0) {\n                return -1;\n            }\n            else if (stampB < 0 && stampA > 0) {\n                return 1;\n            }\n            else if (stampA < stampB) {\n                return 1;\n            }\n            else if (stampB < stampA) {\n                return -1;\n            }\n\n            return 0;\n        });\n\n        if (sortedResults && sortedResults.size) {\n            sortedResults.map((item) => {\n                let date = null;\n                let formattedDate;\n                let formattedLastDate;\n                let dateChanged = false;\n\n                if (_.isEmpty(item.get('eid'))) {\n                    return item;\n                }\n\n                let stamp = item.get('str');\n\n                if (stamp && !_.isNumber(stamp)) {\n                    stamp = DateTools.convertToBalboaTrunkTimestamp(esUtils.convertFromISO8601(stamp));\n                }\n\n                if (stamp > 0) {\n                    date = DateTools.convertFromBalboaTrunkTimestamp(stamp);\n                }\n\n                if (date) {\n                    if (!lastDate) {\n                        lastDate = date;\n                        dateChanged = true;\n                    }\n\n                    formattedLastDate = esUtils.format_date(lastDate, esUtils.format_date.masks.mediumDate);\n                    formattedDate = esUtils.format_date(date, esUtils.format_date.masks.mediumDate);\n\n                    if (formattedDate !== formattedLastDate) {\n                        lastDate = date;\n                        dateChanged = true;\n                    }\n                }\n\n                if (dateChanged) {\n                    data.push({\n                        id: id += 1,\n                        header: true,\n                        title: formattedDate\n                    });\n                }\n\n                data.push({\n                    id: id += 1,\n                    card: SearchResultCard,\n                    props: {\n                        formattedDate: (date ? formattedDate : null),\n                        status: item.get('sta') || item.get('type') || '',\n                        organization: item.get('desc'),\n                        deliveryMethod: item.get('dm'),\n                        city: item.get('vcty'),\n                        state: item.get('vst'),\n                        country: item.get('vcnt'),\n                        dataEid: item.get('eid')\n                    }\n                });\n            });\n        }\n\n        return data;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired,\n            search: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SearchList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const sortedResults = _generateListDataSortedResults(this);\n\n            return (\n                <List>\n                    {sortedResults ? _.map(sortedResults, (result) => {\n                        let key = `search-result-${result.id}`;\n\n                        if (result.header) {\n                            return <SectionHeader key={key}>{result.title}</SectionHeader>;\n                        }\n\n                        return <div key={key}>\n                            <SearchResultCard {...result.props}/>\n\n                            <Divider/>\n                        </div>;\n                    }) : null}\n                </List>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SearchListFactory }","/**\n * Generates a ServiceList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ServiceListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    const MessageModel = require('../../stores/models/MessageModel').default;\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {\n        MessageCardFactory,\n        ServiceCardFactory,\n        TotalCardFactory\n    } = require('../cards');\n\n    const {ViewHeaderFactory} = require('../ViewHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n    const ViewHeader = ViewHeaderFactory({});\n    const ServiceCard = ServiceCardFactory({});\n    const TotalCard = TotalCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ServiceList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getInitialState() {\n            return {};\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {event} = this.props;\n            const modifiedEvent = event.get('modifiedEvent');\n            const serviceList = modifiedEvent.get('Service');\n            let serviceTotal = 0;\n\n            return <List>\n                <ViewHeader>{getText('Services')}</ViewHeader>\n\n                {serviceList && serviceList.size === 0 ?\n                    <MessageCard message={new MessageModel({\n                        type: 'info',\n                        text: getText('Tap the Add button below to create a new %1$s.', {\n                            params: [getText('Service')]\n                        })\n                    })}/>\n                    : null}\n\n                {serviceList ? serviceList.map((service) => {\n                    const fee = service.get('fee');\n\n                    if (fee !== 'Free' || fee !== 'Actual' && fee && fee.length) {\n                        serviceTotal += parseFloat(fee);\n                    }\n\n                    return <div key={`service-${service.get('id')}`}>\n                        <ServiceCard\n                            service={service}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n\n                {serviceList && serviceList.size ? <TotalCard total={serviceTotal}/> : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ServiceListFactory }","/**\n * Generates a StageTimeList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst StageTimeListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    const MessageModel = require('../../stores/models/MessageModel').default;\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {MessageCardFactory, StageTimeCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n    const StageTimeCard = StageTimeCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'StageTimeList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getInitialState() {\n            return {};\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {event} = this.props;\n            const modifiedEvent = event.get('modifiedEvent');\n            const stageTimeList = modifiedEvent.get('Stagetime');\n\n            return <List>\n                <SectionHeader>{getText('Stagetimes')}</SectionHeader>\n\n                {stageTimeList && stageTimeList.size === 0 ?\n                    <MessageCard message={new MessageModel({\n                        type: 'info',\n                        text: getText('Tap the Add button below to create a new %1$s.', {\n                            params: [getText('Stagetime')]\n                        })\n                    })}/>\n                    : null}\n\n                {stageTimeList ? stageTimeList.map((item, i) => {\n                    return <div key={`stage-time-${i}`}>\n                        <StageTimeCard\n                            stageTime={item}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { StageTimeListFactory }","/**\n * Generates a TravelList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst TravelListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    const {fromJS} = require('immutable');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    const MessageModel = require('../../stores/models/MessageModel').default;\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {\n        MessageCardFactory,\n        TravelCardFactory\n    } = require('../cards');\n\n    const {SectionHeaderFactory} = require('../SectionHeader');\n    const {ViewHeaderFactory} = require('../ViewHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildSortedTravelList;\n\n    /**\n     *\n     * @param {Record|EventModel} event\n     * @returns {List}\n     * @private\n     */\n    _buildSortedTravelList = (event) => {\n        /**\n         * Need to iterate over each list and compile a new list of items\n         * based on multiple date items per each current item.  For example,\n         * each Leg of a Flight or check-in an check-out are two different entries.\n         *\n         * Then attach the original data to those new items.\n         *\n         * Then sort that new collection by date.\n         */\n        const modifiedEvent = event.get('modifiedEvent');\n        const flightList = modifiedEvent.get('Flight');\n        const groundList = modifiedEvent.get('Ground');\n        const hotelList = modifiedEvent.get('Hotel');\n\n        let travelList = flightList.map((flight) => {\n            return fromJS({\n                date: flight.get('legs').map((leg) => {\n                    return leg.get('legleave');\n                }).sort().first(),\n                description: flight.get('description'),\n                flight: flight\n            });\n        });\n\n        groundList.map((ground) => {\n            return fromJS({\n                date: ground.get('starttime'),\n                description: ground.get('description'),\n                ground: ground\n            });\n        }).map((item) => {\n            travelList = travelList.push(item);\n        });\n\n        hotelList.map((hotel) => {\n            return fromJS([{\n                date: hotel.get('checkindate'),\n                description: getText('Check-in %1$s', {\n                    params: [hotel.get('name')]\n                }),\n                hotel: hotel\n            }, {\n                date: hotel.get('checkoutdate'),\n                description: getText('Check-out %1$s', {\n                    params: [hotel.get('name')]\n                }),\n                hotel: hotel\n            }]);\n        }).map((item) => {\n            item.map((subItem) => {\n                travelList = travelList.push(subItem);\n            });\n        });\n\n        travelList = travelList.sortBy((item) => {\n            let date = item.get('date');\n\n            if (!date)\n                return null;\n\n            date = DateTools.convertFromBalboaTrunkTimestamp(date);\n\n            return date;\n        });\n\n        return travelList;\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n    const ViewHeader = ViewHeaderFactory({});\n    const TravelCard = TravelCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TravelList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getInitialState() {\n            return {};\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {event} = this.props;\n            const travelList = _buildSortedTravelList(event);\n            let lastDate;\n\n            return <List>\n                <ViewHeader>{getText('Itinerary')}</ViewHeader>\n\n                {travelList && travelList.size === 0 ?\n                    <MessageCard message={new MessageModel({\n                        type: 'info',\n                        text: getText('You do not currently have any Travel items.')\n                    })}/>\n                    : null}\n\n                {travelList ? travelList.map((travel, i) => {\n                    let date = travel.get('date');\n                    let formattedDate;\n                    let formattedLastDate;\n                    let dateChanged = false;\n\n                    if (date) {\n                        date = DateTools.convertFromBalboaTrunkTimestamp(date);\n\n                        if (DateTools.convertToBalboaTrunkTimestamp(date) < 0) {\n                            date = null;\n                        }\n\n                        if (!lastDate) {\n                            lastDate = date;\n                            dateChanged = true;\n                        }\n\n                        formattedLastDate = esUtils.format_date(lastDate, esUtils.format_date.masks.mediumDate);\n                        formattedDate = esUtils.format_date(date, esUtils.format_date.masks.mediumDate);\n\n                        if (formattedDate !== formattedLastDate) {\n                            lastDate = date;\n                            dateChanged = true;\n                        }\n                    }\n\n                    return <div key={`travel-${i}`}>\n\n                        {dateChanged ? <SectionHeader>{formattedDate}</SectionHeader> : null}\n\n                        <TravelCard\n                            travel={travel}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TravelListFactory }","/**\n * Generates a UpcomingConfirmedList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst UpcomingConfirmedListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {SectionHeaderFactory} = require('../SectionHeader');\n    const {UpcomingConfirmedCardFactory} = require('../cards');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const SectionHeader = SectionHeaderFactory({});\n    const UpcomingConfirmedCard = UpcomingConfirmedCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dashboard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'UpcomingConfirmedList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {dashboard, speakerInfo} = this.props;\n            const upcomingList = dashboard.get('upcoming');\n            let filteredList;\n\n            if(upcomingList) {\n                filteredList = upcomingList.filter((u) => {\n                    if(speakerInfo && speakerInfo.selectedSpeaker && u && u.get('sids')) {\n                        return u.get('sids').includes(speakerInfo.selectedSpeaker.get('sid'));\n                    }\n                });\n            }\n\n            if(!filteredList || !filteredList.size) {\n                return <div></div>;\n            }\n\n            return <List>\n                <SectionHeader>{getText('Upcoming Confirmed')}</SectionHeader>\n\n                {filteredList ? filteredList.map((item, i) => {\n                    return <div key={`activity-${i}`}>\n                        <UpcomingConfirmedCard\n                            item={item}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { UpcomingConfirmedListFactory }","/**\n * Creates an ContactForm component\n *\n * @param {object} spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AddressMixin\n */\nconst ContactFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const moment = require('moment');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory,\n        SubViewMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Forms\n    const {\n        PanelFactory\n    } = require('../components');\n\n    // Actions\n    const {\n        ContactActionsFactory,\n        DialogActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateTools = require('../util/DateTools').default({});\n\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        extractSelectedContact,\n        deleteContact\n    } = ContactActionsFactory({});\n    const {\n        showDeleteConfirmation\n    } = DialogActionsFactory({});\n    const {\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _actionDeleteContact;\n    let _buildContactSchema;\n    let _updateHeaderActions;\n\n    /**\n     * Handles the Delete button.  Sends delete request to service\n     *\n     * @param {object} inst\n     * @private\n     */\n    _actionDeleteContact = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showDeleteConfirmation({\n            onContinue: () => {\n                const {\n                    dispatch,\n                    event\n                } = inst.props;\n                const selectedContact = event.get('selectedContact');\n\n                dispatch(toggleEventDirty(true));\n                dispatch(deleteContact({\n                    id: selectedContact.get('id')\n                }));\n                dispatch(toggleViewDirty(false));\n                dispatch(popSubView());\n            },\n            text: getText('Are you sure you want to delete this %1$s?', {\n                params: [getText('Contact')]\n            })\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {object}\n     * @private\n     */\n    _buildContactSchema = (inst) => {\n        const {\n            state\n        } = inst;\n\n        const {\n            email,\n            phone,\n            mobile\n        } = state.data;\n\n        return {\n            cname: {\n                name: 'cname',\n                label: getText('Name'),\n                type: 'text',\n                iconClass: 'fa-user'\n            },\n            company: {\n                name: 'company',\n                label: getText('Company'),\n                type: 'text',\n                iconClass: 'fa-building'\n            },\n            title: {\n                name: 'title',\n                label: getText('Title'),\n                type: 'text',\n                iconClass: 'fa-tag'\n            },\n            'phone': {\n                name: 'phone',\n                label: getText('Phone'),\n                type: 'phone',\n                iconClass: 'phone',\n                iconTel: phone\n            },\n            'mobile': {\n                name: 'mobile',\n                label: getText('Mobile'),\n                type: 'phone',\n                iconClass: 'smartphone',\n                iconTel: mobile\n            },\n            fax: {\n                name: 'fax',\n                label: getText('Fax'),\n                type: 'fax',\n                iconClass: 'fa-fax'\n            },\n            'email': {\n                name: 'email',\n                label: getText('Email'),\n                type: 'email',\n                iconClass: 'email',\n                iconMailTo: email\n            },\n            contnotes: {\n                name: 'contnotes',\n                label: getText('Notes'),\n                type: 'textarea',\n                iconClass: 'fa-pencil-square'\n            },\n            groupcodes: {\n                name: 'groupcodes',\n                label: getText('Group Code'),\n                placeholder: getText('Group Code'),\n                type: 'select',\n                options: inst.generateGroupCodeOptions('contactcodes'),\n                iconClass: 'fa-group'\n            }\n        };\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _updateHeaderActions = (inst, props) => {\n        let currentProps = props || inst.props;\n\n        const {\n            dispatch,\n            event\n        } = currentProps;\n\n        const selectedContact = event.get('selectedContact');\n\n        let actions = inst.determineSaveAction(currentProps);\n\n        if (selectedContact.get('id') && DateTools.parseNum(selectedContact.get('id')) !== 0) {\n            actions.push({\n                type: BTN.DELETE,\n                onClick: (event) => {\n                    stopProp(event);\n\n                    _actionDeleteContact(inst);\n                }\n            });\n        }\n\n        dispatch(setHeaderActions(actions));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'nav',\n            'event',\n            'displayData'\n        ]\n    });\n\n    const SubViewMixin = SubViewMixinFactory({});\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions(props) {\n                // This is called inside ViewMixin, so 'this' references the react component\n                _updateHeaderActions(this, props);\n            }\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ContactForm',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin, AddressMixin, ViewMixin, SubViewMixin],\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            const {\n                event\n            } = this.props;\n            const {\n                data\n            } = this.state;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            return _.assign({}, _buildContactSchema(this), this.buildAddressSchema(data));\n        },\n\n        getInitialValues() {\n            const {\n                event\n            } = this.props;\n\n            const selectedContact = event.get('selectedContact');\n            const modifiedEvent = event.get('modifiedEvent');\n            const contact = extractSelectedContact(event, selectedContact.get('id'));\n\n            let initialValues = _.assign(_.pick(contact.toJS(), [\n                'cname',\n                'title',\n                'company',\n                'phone',\n                'email',\n                'contnotes',\n                'fax',\n                'mobile',\n                'address',\n                'city',\n                'st',\n                'country',\n                'zip'\n            ]), {\n                groupcodes: contact.get('groupcodes').first(),\n                country: contact.get('country') || 'US'\n            });\n\n            _.map(initialValues, (value, key) => {\n                if (_.isBoolean(value) && value === false) {\n                    initialValues[key] = '';\n                }\n            });\n\n            return initialValues;\n        },\n\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            dispatch(toggleViewDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                event\n            } = this.props;\n\n            const selectedContact = event.get('selectedContact');\n\n            let mode = this.determineMode(selectedContact.get('id'));\n\n            return (\n                <form\n                    ref='contact-form'\n                    onSubmit={this.Form_onSubmit}>\n                    <Panel headingText={getText('%1$s Contact', {params: [mode]})}\n                           headingIconClass='fa-book'>\n                        {this.generateFields({\n                            fields: _buildContactSchema(this)\n                        })}\n                    </Panel>\n                    <Panel headingText={getText('Address')}\n                           headingIconClass='fa-map-marker'>\n                        {this.generateFields({fields: this.buildAddressSchema(this.state.data)})}\n                    </Panel>\n                </form>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ContactFormFactory }\n","/**\n * Generates a TravelForm component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes EventMixin\n */\nconst TravelFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {\n        PanelFactory\n    } = require('../components');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildNotesSchema;\n\n    /**\n     * Builds form input instructions for the Notes section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildNotesSchema = () => {\n        return {\n            nearestAirport: {\n                name: 'nearestAirport',\n                type: 'text',\n                iconClass: 'fa-plane',\n                label: getText('Nearest Airport')\n            },\n            travelAgent: {\n                name: 'travelAgent',\n                type: 'text',\n                iconClass: 'fa-female',\n                label: getText('Travel Agent')\n            },\n            travelNotes: {\n                name: 'travelNotes',\n                type: 'textarea',\n                iconClass: 'fa-pencil',\n                label: getText('Travel Notes')\n            }\n        };\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const EventMixin = EventMixinFactory({});\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TravelForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Combines and returns all schemas to build the form inputs\n         *\n         * @return {object}\n         */\n        buildSchema() {\n            return _.assign({}, _buildNotesSchema());\n        },\n\n        /**\n         * Returns pre-filled values for the form based on the props\n         *\n         * @param props\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        getInitialValues(props) {\n            const {\n                event\n            } = props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            let initialValues = {\n                nearestAirport: modifiedEvent.get('nearestAirport'),\n                travelAgent: modifiedEvent.get('travelAgent'),\n                travelNotes: modifiedEvent.get('travelNotes')\n            };\n\n            return initialValues;\n        },\n\n        /**\n         *\n         *\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            // TODO: this would definitely get the model updated, but might be too expensive\n            // mergeModifiedEvent(this.state.data);\n            dispatch(toggleEventDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return <form\n                ref='travel-form'\n                onSubmit={this.Form_onSubmit}>\n                <Panel\n                    headingText={getText('Notes')}\n                    headingIconClass='fa-pencil-square'>\n\n                    {this.generateFields({fields: _buildNotesSchema()})}\n                </Panel>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TravelFormFactory }","/**\n * Creates an AddNoteForm component\n *\n * @param {object} spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n */\nconst AddNoteFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory,\n        SubViewMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Actions\n    const {\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const DateToolsFactory = require('../util/DateTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _updateHeaderActions;\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _updateHeaderActions = (inst, props) => {\n        let currentProps = props || inst.props;\n\n        const {\n            dispatch\n        } = currentProps;\n\n        dispatch(setHeaderActions(inst.determineSaveAction(currentProps)));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            view: PropTypes.object.isRequired,\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'nav',\n            'event'\n        ]\n    });\n\n    const SubViewMixin = SubViewMixinFactory({});\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions(props) {\n                // This is called inside ViewMixin, so 'this' references the react component\n                _updateHeaderActions(this, props);\n            }\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'AddNoteForm',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin, ViewMixin, SubViewMixin],\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            return {\n                'content': {\n                    name: 'content',\n                    type: 'textarea',\n                    showIcon: false,\n                    placeholder: getText('Enter a note about this event'),\n                    validate: v.required\n                }\n            };\n        },\n\n        getInitialValues() {\n            const {\n                event\n            } = this.props;\n            const selectedNote = event.get('selectedNote');\n            const modifiedEvent = event.get('modifiedEvent');\n            const notesList = modifiedEvent.get('Note');\n\n            let values = {};\n\n            if (selectedNote) {\n                notesList.map((note) => {\n                    if (note.get('id') === selectedNote.get('id')) {\n                        values['content'] = note.get('content');\n                    }\n                });\n            }\n\n            return values;\n        },\n\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            dispatch(toggleViewDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return (\n                <form\n                    ref='add-note-form'\n                    onSubmit={this.Form_onSubmit}>\n                    {this.generateFields({fields: this.buildSchema()})}\n                </form>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { AddNoteFormFactory }\n","/**\n * Creates an EmailCoworkersForm component\n *\n * @param {object} spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n */\nconst EmailCoworkersFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory,\n        SubViewMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const DateToolsFactory = require('../util/DateTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateCoworkerCheckboxes;\n    let _updateHeaderActions;\n\n    /**\n     * Generates all the checkboxes for the co-workers\n     *\n     * @param {object} schema - Reference to the form's schema\n     * @param {object} inst - Reference to the React instance\n     * @private\n     */\n    _generateCoworkerCheckboxes = (schema, inst) => {\n        const {\n            speakerInfo\n        } = inst.props;\n\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n        const coworkers = selectedSpeaker.get('coworkers');\n\n        coworkers.map((worker) => {\n            schema[worker.get('id')] = {\n                name: worker.get('id'),\n                type: 'checkbox',\n                label: worker.get('name')\n            };\n        });\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _updateHeaderActions = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(setHeaderActions([{\n            onClick: (event) => {\n                stopProp(event);\n\n                if (_.isFunction(inst.Form_onSubmit)) {\n                    inst.Form_onSubmit();\n                }\n            },\n            label: 'Send',\n            iconClass: 'send'\n        }]));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'nav',\n            'event',\n            'speakerInfo'\n        ]\n    });\n\n    const SubViewMixin = SubViewMixinFactory({});\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions(props) {\n                // This is called inside ViewMixin, so 'this' references the react component\n                _updateHeaderActions(this, props);\n            }\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'EmailCoworkersForm',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin, ViewMixin, SubViewMixin],\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            let schema = {};\n\n            _generateCoworkerCheckboxes(schema, this);\n\n            schema['subject'] = {\n                name: 'subject',\n                label: getText('Subject'),\n                type: 'textarea',\n                validate: v.required,\n                icon: false\n            };\n\n            schema['note'] = {\n                name: 'note',\n                type: 'textarea',\n                label: getText('Note'),\n                icon: false\n            };\n\n            return schema;\n        },\n\n        getInitialValues() {\n\n            const {\n                event\n            } = this.props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            let subject = getText('Event for %1$s', {\n                params: [modifiedEvent.get('organization')]\n            });\n\n            const stageTimes = modifiedEvent.get('Stagetime');\n            let startDateTime = null;\n\n            if (stageTimes) {\n                stageTimes.map((stageTime) => {\n                    let startTime = stageTime.get('starttime');\n\n                    if (startTime > 0) {\n                        startDateTime = convertFromBalboaTrunkTimestamp(startTime);\n                    }\n                });\n            }\n\n            if (_.isDate(startDateTime)) {\n                subject += getText(' on %1$s', {\n                    params: [esUtils.format_date(startDateTime, esUtils.format_date.masks.mediumDate)]\n                });\n            }\n\n            return {\n                subject: subject\n            };\n        },\n\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            dispatch(toggleViewDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return (\n                <form\n                    id=\"email-coworkers-form\"\n                    ref='email-coworkers-form'\n                    onSubmit={this.Form_onSubmit}>\n                    {this.generateFields({fields: this.buildSchema()})}\n                </form>\n\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { EmailCoworkersFormFactory }\n","/**\n * Creates an ProductForm component\n *\n * @param {object} spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n */\nconst ProductFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory,\n        SubViewMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Forms\n    const {\n        PanelFactory\n    } = require('../components');\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        ProductActionsFactory,\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateTools = require('../util/DateTools').default({});\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        showDeleteConfirmation\n    } = DialogActionsFactory({});\n    const {\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        extractSelectedProduct,\n        deleteProduct\n    } = ProductActionsFactory({});\n    const {\n        extractSpeakerProduct\n    } = SpeakerInfoActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _actionDeleteProduct;\n    let _buildProductSchema;\n    let _updateHeaderActions;\n\n    /**\n     * Handles the Delete button.  Sends delete request to service\n     *\n     * @param {object} inst\n     * @private\n     */\n    _actionDeleteProduct = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showDeleteConfirmation({\n            onContinue: () => {\n                const {\n                    dispatch,\n                    event\n                } = inst.props;\n                const selectedProduct = event.get('selectedProduct');\n\n                dispatch(toggleEventDirty(true));\n                dispatch(deleteProduct({\n                    id: selectedProduct.get('id')\n                }));\n                dispatch(toggleViewDirty(false));\n                dispatch(popSubView());\n            },\n            text: getText('Are you sure you want to delete this %1$s?', {\n                params: [getText('Product')]\n            })\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {object}\n     * @private\n     */\n    _buildProductSchema = (inst) => {\n        return {\n            groupcode: {\n                name: 'groupcode',\n                label: getText('Code'),\n                type: 'select',\n                options: inst.generateGroupCodeOptions('productcodes'),\n                validate: v.required,\n                iconClass: 'fa-group'\n            },\n            description: {\n                name: 'description',\n                label: getText('Description'),\n                type: 'text',\n                iconClass: 'fa-pencil-square'\n            },\n            qtysold: {\n                name: 'qtysold',\n                label: getText('Number Sold'),\n                type: 'number',\n                iconClass: 'fa-balance-scale',\n                validate: v.blankOr(v.integer)\n            },\n            qtyshipped: {\n                name: 'qtyshipped',\n                label: getText('Number Shipped'),\n                type: 'number',\n                iconClass: 'fa-ship',\n                validate: v.blankOr(v.integer)\n            },\n            priceeach: {\n                name: 'priceeach',\n                label: getText('Price'),\n                type: 'number',\n                iconClass: 'attach-money',\n                validate: v.blankOr(v.currency)\n            }\n        };\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _updateHeaderActions = (inst, props) => {\n        let currentProps = props || inst.props;\n\n        const {\n            dispatch,\n            event\n        } = currentProps;\n\n        const selectedProduct = event.get('selectedProduct');\n\n        let actions = inst.determineSaveAction(currentProps);\n\n        if (selectedProduct.get('id') && DateTools.parseNum(selectedProduct.get('id')) !== 0) {\n            actions.push({\n                type: BTN.DELETE,\n                onClick: (event) => {\n                    stopProp(event);\n\n                    _actionDeleteProduct(inst);\n                }\n            });\n        }\n\n        dispatch(setHeaderActions(actions));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'nav',\n            'event',\n            'speakerInfo'\n        ]\n    });\n\n    const SubViewMixin = SubViewMixinFactory({});\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions(props) {\n                // This is called inside ViewMixin, so 'this' references the react component\n                _updateHeaderActions(this, props);\n            }\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ProductForm',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin, ViewMixin, SubViewMixin],\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            return _buildProductSchema(this);\n        },\n\n        /**\n         * @returns {object}\n         */\n        getInitialValues() {\n            const {\n                event\n            } = this.props;\n\n            const selectedProduct = event.get('selectedProduct');\n            const modifiedEvent = event.get('modifiedEvent');\n            const product = extractSelectedProduct(event, selectedProduct.get('id'));\n\n            let initialValues = {};\n\n            _.map([\n                'groupcode',\n                'description',\n                'qtysold',\n                'qtyshipped',\n                'priceeach'\n            ], (key) => {\n                initialValues[key] = (product.get(key) ? product.get(key).toString() : null);\n            });\n\n            return initialValues;\n        },\n\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            if (name === 'groupcode') {\n                // find the group code data and pre-populate form\n                const product = extractSpeakerProduct(this.props.speakerInfo, value);\n\n                let updatedState = {\n                    description: '',\n                    qtysold: '',\n                    qtyshipped: '',\n                    priceeach: ''\n                };\n\n                if (product) {\n                    updatedState = _.assign(updatedState, product.toJS());\n                }\n\n                this.setState({\n                    data: _.assign({}, this.state.data, updatedState)\n                });\n            }\n\n            dispatch(toggleViewDirty(true));\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                event\n            } = this.props;\n\n            const selectedProduct = event.get('selectedProduct');\n\n            let mode = this.determineMode(selectedProduct.get('id'));\n\n            return <form\n                ref='product-form'\n                onSubmit={this.Form_onSubmit}>\n\n                <Panel\n                    headingText={getText('%1$s Product', {params: [mode]})}\n                    headingIconClass='fa-dollar'>\n                    {this.generateFields({\n                        fields: this.buildSchema()\n                    })}\n                </Panel>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ProductFormFactory }\n","/**\n * Creates an ServiceForm component\n *\n * @param {object} spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n */\nconst ServiceFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const moment = require('moment');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory,\n        SubViewMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Components\n    const {\n        LinkCollapseAreaFactory,\n        PanelFactory\n    } = require('../components');\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        ServiceActionsFactory,\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateToolsFactory = require('../util/DateTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        showDeleteConfirmation\n    } = DialogActionsFactory({});\n    const {\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        extractSelectedService,\n        deleteService\n    } = ServiceActionsFactory({});\n    const {\n        extractSpeakerService\n    } = SpeakerInfoActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _actionDeleteService;\n    let _buildServiceSchema;\n    let _updateHeaderActions;\n\n    /**\n     * Handles the Delete button.  Sends delete request to service\n     *\n     * @param {object} inst\n     * @private\n     */\n    _actionDeleteService = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showDeleteConfirmation({\n            onContinue: () => {\n                const {\n                    dispatch,\n                    event\n                } = inst.props;\n                const selectedService = event.get('selectedService');\n\n                dispatch(toggleEventDirty(true));\n                dispatch(deleteService({\n                    id: selectedService.get('id')\n                }));\n                dispatch(toggleViewDirty(false));\n                dispatch(popSubView());\n            },\n            text: getText('Are you sure you want to delete this %1$s?', {\n                params: [getText('Service')]\n            })\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {object}\n     * @private\n     */\n    _buildServiceSchema = (inst) => {\n        const {\n            data\n        } = inst.state;\n\n        return {\n            groupcode: {\n                name: 'groupcode',\n                label: getText('Code'),\n                type: 'select',\n                options: inst.generateGroupCodeOptions('servicecodes'),\n                iconClass: 'fa-group'\n            },\n            due: {\n                name: 'due',\n                label: getText('Due Date'),\n                type: 'date',\n                iconClass: 'fa-calendar',\n                minDate: inst.getSystemMinDate(),\n                maxDate: inst.getSystemMaxDate()\n            },\n            description: {\n                name: 'description',\n                label: getText('Description'),\n                type: 'text',\n                iconClass: 'fa-pencil-square'\n            },\n            amount: {\n                name: 'amount',\n                label: getText('Amount'),\n                type: 'number',\n                iconClass: 'attach-money',\n                validate: v.validateIf((data.amountType === 'specified'), v.currency),\n                disabled: (data.amountType !== 'specified')\n            },\n            amountType: {\n                name: 'amountType',\n                type: 'radioGroup',\n                options: [{\n                    label: getText('Specified'),\n                    description: getText('Use the amount specified above.'),\n                    value: 'specified'\n                }, {\n                    label: getText('Free'),\n                    description: getText('You can choose Free to indicate there is no charge for this item'),\n                    value: 'free'\n                }, {\n                    label: getText('Actual'),\n                    description: getText('You can choose Actual Cost to indicate you will provide the amount later'),\n                    value: 'bill_later'\n                }]\n            }\n        };\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _updateHeaderActions = (inst, props) => {\n        let currentProps = props || inst.props;\n\n        const {\n            dispatch,\n            event\n        } = currentProps;\n\n        const selectedService = event.get('selectedService');\n\n        let actions = inst.determineSaveAction(currentProps);\n\n        if (selectedService.get('id') && DateTools.parseNum(selectedService.get('id')) !== 0) {\n            actions.push({\n                type: BTN.DELETE,\n                onClick: (event) => {\n                    stopProp(event);\n\n                    _actionDeleteService(inst);\n                }\n            });\n        }\n\n        dispatch(setHeaderActions(actions));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const LinkCollapseArea = LinkCollapseAreaFactory({});\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'nav',\n            'event',\n            'speakerInfo'\n        ]\n    });\n\n    const SubViewMixin = SubViewMixinFactory({});\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions(props) {\n                // This is called inside ViewMixin, so 'this' references the react component\n                _updateHeaderActions(this, props);\n            }\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ServiceForm',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin, ViewMixin, SubViewMixin],\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            return _buildServiceSchema(this);\n        },\n\n        /**\n         * @returns {object}\n         */\n        getInitialValues() {\n            const {\n                event\n            } = this.props;\n\n            const selectedService = event.get('selectedService');\n            const modifiedEvent = event.get('modifiedEvent');\n            const service = extractSelectedService(event, selectedService.get('id'));\n\n            let initialValues = _.assign(_.pick(service.toJS(), [\n                'groupcode',\n                'description'\n            ]));\n\n            const due = service.get('due');\n            const fee = service.get('fee');\n\n            if (due) {\n                initialValues['due'] = DateTools.convertFromBalboaToDateString(due);\n            }\n\n            const flagList = service.get('flags_as_map');\n\n            initialValues['amountType'] = 'specified';\n\n            if (flagList && flagList.size) {\n                flagList.map((flag, key) => {\n                    if (key === 'free' && flag.get('is_set')) {\n                        initialValues['amountType'] = 'free';\n                    }\n\n                    if (key === 'bill_later' && flag.get('is_set')) {\n                        initialValues['amountType'] = 'bill_later';\n                    }\n                });\n            }\n\n            initialValues['amount'] = fee;\n\n            return initialValues;\n        },\n\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n            let updatedState;\n\n            if (name === 'amountType' && value !== 'specified') {\n\n                updatedState = {\n                    amount: '0'\n                };\n\n            }\n            else if (name === 'groupcode') {\n                // find the group code data and pre-populate form\n                const service = extractSpeakerService(this.props.speakerInfo, value);\n\n                updatedState = {\n                    amount: '',\n                    amountFree: false,\n                    amountActual: false,\n                    description: ''\n                };\n\n                if (service) {\n                    const fee = service.get('fee');\n                    const due = service.get('due');\n\n                    updatedState = _.assign(updatedState, service.toJS());\n\n                    updatedState = _.assign(updatedState, {\n                        amount: fee\n                    });\n\n                    if (fee === 'Free' || fee === 'Actual') {\n                        updatedState = _.assign(updatedState, {\n                            amount: '',\n                            amountFree: (fee === 'Free'),\n                            amountActual: (fee === 'Actual')\n                        });\n                    }\n\n                    if (due) {\n                        updatedState.due = DateTools.convertFromBalboaToDateString(due);\n                    }\n                }\n            }\n\n            if (updatedState) {\n                this.setState({\n                    data: _.assign({}, this.state.data, updatedState)\n                });\n            }\n\n            dispatch(toggleViewDirty(true));\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                event\n            } = this.props;\n\n            const selectedService = event.get('selectedService');\n\n            let mode = this.determineMode(selectedService.get('id'));\n\n            return <form\n                ref='service-form'\n                onSubmit={this.Form_onSubmit}>\n\n                <Panel\n                    headingText={getText('%1$s Service', {params: [mode]})}\n                    headingIconClass='fa-dollar'>\n                    {this.generateFields({\n                        fields: _.pick(this.buildSchema(), ['groupcode', 'due', 'description'])\n                    })}\n                </Panel>\n\n                <Panel\n                    headingText={getText('Amount')}\n                    headingIconClass='fa-dollar'>\n                    {this.generateFields({\n                        fields: _.pick(this.buildSchema(), ['amount'])\n                    })}\n\n                    <LinkCollapseArea ref='amountTypeOptionsArea'>\n                        {this.generateFields({\n                            fields: _.pick(this.buildSchema(), ['amountType'])\n                        })}\n                    </LinkCollapseArea>\n                </Panel>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ServiceFormFactory }\n","/**\n * Creates an StageTimeForm component\n *\n * @param {object} spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n */\nconst StageTimeFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const moment = require('moment');\n    const {\n        is\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory,\n        SubViewMixinFactory,\n        VenueMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Forms\n    const {\n        PanelFactory\n    } = require('../components');\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        StageTimeActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateTools = require('../util/DateTools').default({});\n\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        showDeleteConfirmation\n    } = DialogActionsFactory({});\n    const {\n        isMarketPlaceEvent,\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        deleteStageTime\n    } = StageTimeActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _actionDeleteStageTime;\n    let _avCheckDateRequired;\n    let _generateVenueOptions;\n    let _updateHeaderActions;\n\n    /**\n     * Handles the Delete button.  Sends delete request to service\n     *\n     * @param {object} inst\n     * @private\n     */\n    _actionDeleteStageTime = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showDeleteConfirmation({\n            onContinue: () => {\n                const {\n                    dispatch,\n                    event\n                } = inst.props;\n                const selectedStageTime = event.get('selectedStageTime');\n\n                dispatch(toggleEventDirty(true));\n                dispatch(deleteStageTime({\n                    id: selectedStageTime.get('id')\n                }));\n                dispatch(toggleViewDirty(false));\n                dispatch(popSubView());\n            },\n            text: getText('Are you sure you want to delete this %1$s?', {\n                params: [getText('Stagetime')]\n            })\n        }));\n    };\n\n    /**\n     *\n     * @param data\n     * @returns {boolean}\n     * @private\n     */\n    _avCheckDateRequired = (data) => {\n        const {\n            avchecktime\n        } = data;\n\n        if (_.isDate(avchecktime)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     *\n     * @param {List} venueList\n     * @returns {Array}\n     * @private\n     */\n    _generateVenueOptions = (venueList) => {\n        let options = [];\n\n        venueList.map((venue) => {\n            options.push({\n                text: esUtils.venue_to_string(venue.toJS()),\n                value: venue.get('id')\n            });\n        });\n\n        return options;\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _updateHeaderActions = (inst, props) => {\n        let currentProps = props || inst.props;\n\n        const {\n            dispatch,\n            event\n        } = currentProps;\n\n        const selectedStageTime = event.get('selectedStageTime');\n\n        let actions = inst.determineSaveAction(currentProps);\n\n        if (selectedStageTime.get('id')\n            && DateTools.parseNum(selectedStageTime.get('id')) !== 0\n            && !isMarketPlaceEvent(event.get('modifiedEvent'))) {\n            actions.push({\n                iconClass: 'delete',\n                label: getText('Delete'),\n                onClick: (event) => {\n                    stopProp(event);\n\n                    _actionDeleteStageTime(inst);\n                }\n            });\n        }\n\n        dispatch(setHeaderActions(actions));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n    const VenueMixin = VenueMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            view: PropTypes.object.isRequired,\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'nav',\n            'event',\n            'displayData'\n        ]\n    });\n\n    const SubViewMixin = SubViewMixinFactory({});\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions(props) {\n                // This is called inside ViewMixin, so 'this' references the react component\n                _updateHeaderActions(this, props);\n            }\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'StageTimeForm',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin, VenueMixin, ViewMixin, SubViewMixin],\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            const {\n                event\n            } = this.props;\n            const {\n                data\n            } = this.state;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            const schema =  _.assign({}, this.buildStartStopDateTimeSchema(data), this.buildVenueSchema(data), {\n                description: {\n                    name: 'description',\n                    label: getText('Description'),\n                    type: 'text',\n                    iconClass: 'mbsc-ic-none'\n                },\n                avcheckdate: {\n                    name: 'avcheckdate',\n                    label: getText('A/V Check Date'),\n                    type: 'date',\n                    iconClass: 'date-range',\n                    maxDate: this.mergeDate(data.startDate, data.startTime),\n                    validate: v.validateIf(_avCheckDateRequired(data), v.date)\n                },\n                avchecktime: {\n                    name: 'avchecktime',\n                    label: getText('A/V Check Time'),\n                    type: 'time',\n                    iconClass: 'fa-clock-o',\n                    maxDate: this.mergeDate(data.startDate, data.startTime),\n                    validate: v.blankOr(v.date)\n                },\n                room: {\n                    name: 'room',\n                    label: getText('Room'),\n                    type: 'text',\n                    iconClass: 'fa-key'\n                },\n                venueid: {\n                    name: 'venueid',\n                    label: getText('Venue'),\n                    placeholder: getText('-- Add new Venue --'),\n                    type: 'select',\n                    options: _generateVenueOptions(modifiedEvent.get('Venue')),\n                    iconClass: 'fa-building-o'\n                }\n            });\n\n            if(isMarketPlaceEvent(modifiedEvent)) {\n                _.map(schema, (field) => {\n                    field['disabled'] = true;\n\n                    return field;\n                });\n            }\n\n            return schema;\n        },\n\n        getInitialValues() {\n            const {\n                event\n            } = this.props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            const selectedStageTime = event.get('selectedStageTime');\n\n            const stageTimeList = modifiedEvent.get('Stagetime');\n\n            let formStageTime = selectedStageTime;\n\n            if (selectedStageTime) {\n                stageTimeList.map((stageTime) => {\n                    if (stageTime.get('id') === selectedStageTime.get('id')) {\n                        formStageTime = stageTime;\n                    }\n                });\n            }\n\n            const venueValues = this.getInitialVenueValues(formStageTime.get('venueid'));\n\n            // we need to only convert dates if they are set\n            let initialValues = {};\n\n            initialValues = _.assign(initialValues, venueValues);\n\n            initialValues = _.assign(initialValues, {\n                description: formStageTime.get('description'),\n                room: formStageTime.get('room'),\n                venueid: (formStageTime.get('venueid') || '0').toString()\n            });\n\n            if (this.isBalboaDate(formStageTime.get('starttime'))) {\n                initialValues = _.assign(initialValues, {\n                    startDate: this.convertFromBalboaToDate(formStageTime.get('starttime')),\n                    startTime: this.convertFromBalboaToTime(formStageTime.get('starttime'))\n                });\n            }\n\n            if (this.isBalboaDate(formStageTime.get('stoptime'))) {\n                initialValues = _.assign(initialValues, {\n                    stopDate: this.convertFromBalboaToDate(formStageTime.get('stoptime')),\n                    stopTime: this.convertFromBalboaToTime(formStageTime.get('stoptime'))\n                });\n            }\n\n            if (this.isBalboaDate(formStageTime.get('avchecktime'))) {\n                initialValues = _.assign(initialValues, {\n                    avcheckdate: this.convertFromBalboaToDate(formStageTime.get('avchecktime')),\n                    avchecktime: this.convertFromBalboaToTime(formStageTime.get('avchecktime'))\n                });\n            }\n\n            return initialValues;\n        },\n\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            let updatedData;\n\n            updatedData = _.assign({},\n                this.state.data,\n                this.onFormChangedStartStopDateTime(name, value),\n                this.onFormChangedVenue(name, value));\n\n\n            if (!is(this.state.data, updatedData)) {\n                this.setState({\n                    data: updatedData\n                });\n            }\n\n            dispatch(toggleViewDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         * Invoked once immediately after the initial rendering occurs.\n         */\n        componentDidMount() {\n            // Trigger updating the rest of the form with the selected venue\n            this.onFormChanged('venueid', this.getInitialValues().venueid);\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const schema = this.buildSchema();\n\n            const {\n                event\n            } = this.props;\n\n            const selectedStageTime = event.get('selectedStageTime');\n\n            let mode = this.determineMode(selectedStageTime.get('id'));\n\n            return <form\n                ref='stage-time-form'\n                onSubmit={this.Form_onSubmit}>\n\n                <Panel\n                    headingText={getText('%1$s Stage Time', {params: [mode]})}\n                    headingIconClass='fa-calendar'>\n                    {this.generateFields({\n                        fields: _.pick(schema, [\n                            'description',\n                            'startDate',\n                            'startTime',\n                            'stopDate',\n                            'stopTime',\n                            'avcheckdate',\n                            'avchecktime',\n                            'room'])\n                    })}\n                </Panel>\n\n                <Panel\n                    headingText={getText('Venue')}\n                    headingIconClass='fa-building-o'>\n                    {this.generateFields({fields: _.assign({}, _.pick(schema, ['venueid']), _.map(this.buildVenueSchema(this.state.data), (field) => {\n                        if(isMarketPlaceEvent(event.get('modifiedEvent'))) {\n                            field['disabled'] = true;\n\n                            return field;\n                        } else {\n                            return field;\n                        }\n                    }))})}\n                </Panel>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { StageTimeFormFactory }\n","/**\n * Creates an TodoForm component\n *\n * @param {object} spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n */\nconst TodoFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory,\n        SubViewMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Forms\n    const {\n        PanelFactory\n    } = require('../components');\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        TodoActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateToolsFactory = require('../util/DateTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        showDeleteConfirmation\n    } = DialogActionsFactory({});\n    const {\n        stopProp,\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        extractSelectedTodo,\n        deleteTodo\n    } = TodoActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        toggleViewDirty,\n        setHeaderActions,\n    } = ViewActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _actionDeleteTodo;\n    let _buildTodoSchema;\n    let _generateAssignedToOptions;\n    let _updateHeaderActions;\n\n    /**\n     * Handles the Delete button.  Sends delete request to service\n     *\n     * @param {object} inst\n     * @private\n     */\n    _actionDeleteTodo = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(showDeleteConfirmation({\n            onContinue: () => {\n                const {\n                    dispatch,\n                    event\n                } = inst.props;\n                const selectedTodo = event.get('selectedTodo');\n\n                dispatch(toggleEventDirty(true));\n                dispatch(deleteTodo({\n                    id: selectedTodo.get('id')\n                }));\n                dispatch(toggleViewDirty(false));\n                dispatch(popSubView());\n            },\n            text: getText('Are you sure you want to delete this %1$s?', {\n                params: [getText('Action')]\n            })\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {object}\n     * @private\n     */\n    _buildTodoSchema = (inst) => {\n        return {\n            description: {\n                name: 'description',\n                label: getText('Description'),\n                type: 'text',\n                iconClass: 'fa-pencil-square',\n                validate: v.required\n            },\n            statusdate: {\n                name: 'statusdate',\n                label: getText('Due On'),\n                type: 'date',\n                iconClass: 'fa-calendar',\n                validate: v.date\n            },\n            assignedto: {\n                name: 'assignedto',\n                label: getText('Assigned To'),\n                type: 'select',\n                iconClass: 'fa-user',\n                options: _generateAssignedToOptions(inst)\n            },\n            status: {\n                name: 'status',\n                label: getText('Complete'),\n                type: 'checkbox'\n            }\n        };\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateAssignedToOptions = (inst) => {\n        const {\n            speakerInfo\n        } = inst.props;\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const coworkerList = selectedSpeaker.get('coworkers');\n\n        let options = [];\n\n        if (coworkerList && coworkerList.size) {\n            coworkerList.map((coworker) => {\n                options.push({\n                    text: coworker.get('name'),\n                    value: coworker.get('id')\n                });\n            });\n        }\n\n        return options;\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @private\n     */\n    _updateHeaderActions = (inst, props) => {\n        let currentProps = props || inst.props;\n\n        const {\n            dispatch\n        } = currentProps;\n\n        dispatch(setHeaderActions(inst.determineSaveAction(currentProps).concat([{\n            type: BTN.DELETE,\n            onClick: (event) => {\n                stopProp(event);\n\n                _actionDeleteTodo(inst);\n            }\n        }])));\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'nav',\n            'event',\n            'speakerInfo'\n        ]\n    });\n\n    const SubViewMixin = SubViewMixinFactory({});\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions(props) {\n                // This is called inside ViewMixin, so 'this' references the react component\n                _updateHeaderActions(this, props);\n            }\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'TodoForm',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin, ViewMixin, SubViewMixin],\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            return _buildTodoSchema(this);\n        },\n\n        /**\n         * @returns {object}\n         */\n        getInitialValues() {\n            const {\n                event\n            } = this.props;\n\n            const selectedTodo = event.get('selectedTodo');\n            const modifiedEvent = event.get('modifiedEvent');\n            const todo = extractSelectedTodo(event, selectedTodo.get('id'));\n\n            let initialValues = {};\n\n            _.map([\n                'description',\n                'assignedto',\n                'status'\n            ], (key) => {\n                if (key === 'status') {\n                    initialValues[key] = (todo.get(key) && todo.get(key).toString() === \"1\" ? true : false);\n                } else {\n                    initialValues[key] = (todo.get(key) ? todo.get(key).toString() : null);\n                }\n            });\n\n            const statusdate = todo.get('statusdate');\n\n            if (statusdate) {\n                initialValues['statusdate'] = DateTools.convertFromBalboaToDateString(statusdate);\n            }\n\n            return initialValues;\n        },\n\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            dispatch(toggleViewDirty(true));\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                event\n            } = this.props;\n\n            const selectedTodo = event.get('selectedTodo');\n\n            let mode = this.determineMode(selectedTodo.get('id'));\n\n            return <form\n                ref='todo-form'\n                onSubmit={this.Form_onSubmit}>\n\n                <Panel\n                    headingText={getText('%1$s Action', {params: [mode]})}\n                    headingIconClass='fa-check-square-o'>\n\n                    {this.generateFields({\n                        fields: this.buildSchema()\n                    })}\n                </Panel>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TodoFormFactory }\n","import { ContactFormFactory } from './ContactForm';\nimport { ContactsFormFactory } from './ContactsForm';\nimport { CustomFormFactory } from './CustomForm';\nimport { DetailsFormFactory } from './DetailsForm';\nimport { MiscFormFactory } from './MiscForm';\nimport { ServicesFormFactory } from './ServicesForm';\nimport { TodoListFormFactory } from './TodoListForm';\nimport { TravelFormFactory } from './TravelForm';\nimport { AddNoteFormFactory } from './AddNoteForm';\nimport { EmailCoworkersFormFactory } from './EmailCoworkersForm';\nimport { ProductFormFactory } from './ProductForm';\nimport { ServiceFormFactory } from './ServiceForm';\nimport { StageTimeFormFactory } from './StageTimeForm';\nimport { TodoFormFactory } from './TodoForm';\nimport { ForgotPasswordFormFactory } from './ForgotPasswordForm';\nimport { LoginFormFactory } from './LoginForm';\nimport { NewEventFormFactory } from './NewEventForm';\n\nconst eventForms = {\n    ContactFormFactory,\n    ContactsFormFactory,\n    CustomFormFactory,\n    DetailsFormFactory,\n    MiscFormFactory,\n    ServicesFormFactory,\n    TodoListFormFactory,\n    TravelFormFactory\n};\n\nconst subForms = {\n    AddNoteFormFactory,\n    EmailCoworkersFormFactory,\n    ProductFormFactory,\n    ServiceFormFactory,\n    StageTimeFormFactory,\n    TodoFormFactory\n};\n\nconst mainForms = {\n    ForgotPasswordFormFactory,\n    LoginFormFactory,\n    NewEventFormFactory\n};\n\nexport {\n    eventForms,\n    subForms,\n    mainForms,\n    ContactFormFactory,\n    ContactsFormFactory,\n    CustomFormFactory,\n    DetailsFormFactory,\n    MiscFormFactory,\n    ServicesFormFactory,\n    TodoListFormFactory,\n    TravelFormFactory,\n    AddNoteFormFactory,\n    EmailCoworkersFormFactory,\n    ProductFormFactory,\n    ServiceFormFactory,\n    StageTimeFormFactory,\n    TodoFormFactory,\n    ForgotPasswordFormFactory,\n    LoginFormFactory,\n    NewEventFormFactory\n}","export default {\n    UNREAD_MESSAGE: 'unread message',\n    WAITING_CLIENT: 'waiting client',\n    WAITING_YOU: 'waiting you',\n    OFFER_ACCEPTED: 'offer accepted',\n    DEPOSIT_PAID: 'deposit paid',\n    PAID_IN_FULL: 'paid in full',\n    EVENT_COMPLETED: 'event completed',\n    REVIEWED: 'reviewed',\n    WARNING: 'warning',\n    SUCCESS: 'success'\n};","/**\n * Generates the Event Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst EventActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const {is, fromJS} = require('immutable');\n\n    // Radios\n    const {radio} = require('react-pubsub-via-radio.js');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Utils\n    const {log} = require('../util/DevTools').default;\n    const DateTools = require('../util/DateTools').default({});\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearEventAssociatedData;\n    let _clearEvent;\n    let _copyEvent;\n    let _deleteEvent;\n    let _discardEventChanges;\n    let _emailCoworkers;\n    let _extractSelectedFile;\n    let _extractSelectedItem;\n    let _fixCustomFields;\n    let _isMarketPlaceEvent;\n    let _mergeEventData;\n    let _mergeModifiedEvent;\n    let _prepareContactsFormData;\n    let _prepareCustomFormData;\n    let _prepareDetailsFormData;\n    let _prepareMiscFormData;\n    let _saveEvent;\n    let _selectEvent;\n    let _stopProp;\n    let _toggleEventDirty;\n    let _updateEventStore;\n\n    /**\n     * Clears all event data from store and resets data on other stores to get app\n     * in the correct state\n     *\n     * @private\n     */\n    _clearEvent = () => {\n        // Multiple stores listen on this\n        return {\n            type: RADIOS.stores.CLEAR_EVENT_DATA\n        };\n    };\n\n    /**\n     * Clears all event related data; such as Calendar, Dashbaord, and Search.\n     *\n     * @private\n     */\n    _clearEventAssociatedData = () => {\n        // Multiple stores listen on this\n        return {\n            type: RADIOS.stores.CLEAR_EVENT_ASSOCIATED_DATA\n        };\n    };\n\n    /**\n     * Makes the service request to copy the event\n     *\n     * @param {object} data\n     * @private\n     */\n    _copyEvent = (data) => {\n        radio(RADIOS.services.COPY_EVENT).broadcast(data);\n    };\n\n    /**\n     * Makes the service request to delete the event\n     *\n     * @param {object} data\n     * @private\n     */\n    _deleteEvent = (data) => {\n        radio(RADIOS.services.DELETE_EVENT).broadcast(data);\n    };\n\n    /**\n     * Swaps selectedEvent with modifiedEvent, discarding all modifiedEvent changes\n     *\n     * @private\n     */\n    _discardEventChanges = () => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_DISCARD_EVENT_CHANGES\n        };\n    };\n\n    /**\n     * Makes the service request to email coworkers\n     *\n     * @param {object} data\n     * @private\n     */\n    _emailCoworkers = (data) => {\n        radio(RADIOS.services.EMAIL_COWORKERS).broadcast(data);\n    };\n\n    /**\n     *\n     * @param {Record|EventModel} event\n     * @param {string} fileId\n     * @returns {null|Record|Map}\n     * @private\n     */\n    _extractSelectedFile = (event, fileId) => {\n        let modifiedEvent = event.get('modifiedEvent');\n\n        if (!modifiedEvent) {\n            modifiedEvent = event.get('selectedEvent');\n        }\n\n        const fileList = modifiedEvent.get('storedfiles');\n        let selectedFile = null;\n\n        if (fileId && fileId.length) {\n            fileList.map((file) => {\n                if (file.get('id') && file.get('id').toString() === fileId.toString()) {\n                    selectedFile = file;\n                }\n            });\n        }\n\n        return selectedFile;\n    };\n\n    /**\n     *\n     * @param {Record|EventModel} event\n     * @param {string} selectedField\n     * @param {string} listField\n     * @param {string} identifier\n     * @param {object} defaultValue\n     * @private\n     */\n    _extractSelectedItem = (event, selectedField, listField, identifier, defaultValue) => {\n        identifier = identifier || 'id';\n\n        let modifiedEvent = event.get('modifiedEvent');\n\n        if (!modifiedEvent) {\n            modifiedEvent = event.get('selectedEvent');\n        }\n\n        const selectedItem = event.get(selectedField);\n        const itemList = modifiedEvent.get(listField);\n        let retItem = fromJS(defaultValue) || selectedItem;\n\n        if (selectedItem) {\n            itemList.map((item) => {\n                if (item.get(identifier)\n                    && selectedItem.get(identifier)\n                    && is(item.get(identifier).toString(), selectedItem.get(identifier).toString())) {\n\n                    retItem = item;\n                }\n            });\n        }\n\n        return retItem;\n    };\n\n    /**\n     *\n     * @param eventObj\n     * @return {*}\n     * @private\n     */\n    _fixCustomFields = (eventObj) => {\n        if (_.has(eventObj, ['Customfields', 'contents'])) {\n            if (_.isArray(eventObj.Customfields.contents)) {\n                eventObj.Customfields.contents = {};\n            } else if (_.isObject(eventObj.Customfields.contents)) {\n                let sidMap = {};\n\n                _.map(eventObj.Customfields.contents, (sid, key) => {\n                    sidMap[key] = {};\n\n                    if (_.isArray(sid)) {\n                        _.each(sid, (field, i) => {\n                            sidMap[key][i] = field;\n                        });\n                    } else {\n                        sidMap[key] = sid;\n                    }\n                });\n\n                eventObj.Customfields.contents = sidMap;\n            }\n        }\n\n        return eventObj;\n    };\n\n    _isMarketPlaceEvent = (eventObj) => {\n        if(!_.isEmpty(eventObj) && 'toJS' in  eventObj) {\n            eventObj = eventObj.toJS();\n        }\n\n        return _.get(eventObj, ['flags_as_map', 'marketplace', 'is_set'], false);\n    };\n\n    /**\n     * Merges given data into the existing selectedEvent.  Often as a result as event/read\n     *\n     * @param {object} data\n     * @private\n     */\n    _mergeEventData = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_MERGE_EVENT_DATA,\n            payload: data\n        };\n    };\n\n    /**\n     * Merges given data into the existing modifiedEvent.  So we can track the changes across screens\n     *\n     * @param {object} data\n     * @private\n     */\n    _mergeModifiedEvent = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_MERGE_MODIFIED_EVENT,\n            payload: data\n        };\n    };\n\n\n    /**\n     * Prepares the CustomForm data into a hierarchy that can be merged with existing event data\n     * @param {object} form\n     * @returns {object}\n     * @private\n     */\n    _prepareContactsFormData = (params) => {\n        const {\n            form,\n            inst\n        } = params;\n\n        let formData = _.pick(form, ['ccTimezone', 'ccInitiator', 'ccNotes']);\n        const {\n            ccDate,\n            ccTime\n        } = form;\n\n        const ccDateTime = inst.mergeDate(ccDate, ccTime);\n\n        if (ccDateTime) {\n            formData.ccDateTime = ccDateTime;\n        }\n\n        return formData;\n    };\n\n    /**\n     * Prepares the CustomForm data into a hierarchy that can be merged with existing event data\n     * @param {object} params\n     * @param {object} params.form\n     * @param {Record|SpeakerInfoModel} params.speakerInfo\n     * @returns {object}\n     * @private\n     */\n    _prepareCustomFormData = (params) => {\n        const {\n            form,\n            speakerInfo\n        } = params;\n\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n        let contents = {};\n        contents[selectedSpeaker.get('sid').toString()] = form;\n\n        let customFields = {\n            \"Customfields\": {\n                \"contents\": contents\n            }\n        };\n\n        return customFields;\n    };\n\n    /**\n     * Prepares the DetailForm data into a hierarchy that can be merged with existing event data\n     * @param {object} form\n     * @returns {object}\n     * @private\n     */\n    _prepareDetailsFormData = (form) => {\n        // convert some strings to integers.  Doesn't impact save, but since the original event is an integer it causes\n        // a false dirty flag\n        if (_.has(form, ['zoomUrl']) && !_.isEmpty(form['zoomUrl']) && !_.startsWith(_.toLower(form['zoomUrl']), 'http://') && !_.startsWith(_.toLower(form['zoomUrl']), 'https://')) { form['zoomUrl'] = ('https://' + form['zoomUrl']); }\n        if (_.has(form, ['bureauID'])) { form['bureauID'] = DateTools.parseNum(form['bureauID']); }\n        if (_.has(form, ['deliveryMethod'])) { form['deliveryMethod'] = DateTools.parseNum(form['deliveryMethod']); }\n        if (_.has(form, ['pd_rep_id'])) { form['pd_rep_id'] = DateTools.parseNum(form['pd_rep_id']); }\n        if (_.has(form, ['sales_rep_id'])) { form['sales_rep_id'] = DateTools.parseNum(form['sales_rep_id']); }\n        if (_.has(form, ['project_manager_id'])) { form['project_manager_id'] = DateTools.parseNum(form['project_manager_id']); }\n\n        return form;\n    };\n\n    /**\n     * Prepares the MiscForm data into a hierarchy that can be merged with existing event data\n     * @param {Record|EventModel} event\n     * @param {object} form\n     * @private\n     * @returns {object}\n     */\n    _prepareMiscFormData = (event, form) => {\n        const modifiedEvent = event.get('modifiedEvent');\n\n        let data = _.assign({}, {\n            nonCSP: !form.nonCSP\n        });\n\n        return data;\n    };\n\n    /**\n     *\n     * @param {object} data - Full Event object\n     * @private\n     */\n    _saveEvent = (data) => {\n        radio(RADIOS.services.SAVE_EVENT).broadcast({event: data.toJS()});\n    };\n\n    /**\n     * Handles the selectEvent Action\n     *\n     * @param data\n     * @private\n     */\n    _selectEvent = (data) => {\n        let {event, view, onReturn} = data;\n\n        return {\n            type: RADIOS.stores.EVENT_STORE_SELECT_EVENT,\n            payload: {\n                event,\n                view,\n                onReturn\n            }\n        };\n    };\n\n    /**\n     * Stops an event from default behavior and propagating.\n     *\n     * @param {object|Event} e\n     * @private\n     */\n    _stopProp = (e) => {\n        if (_.has(e, 'preventDefault') && _.isFunction(e.preventDefault)) {\n            e.preventDefault();\n        }\n\n        if (_.has(e, 'stopImmediatePropagation') && _.isFunction(e.stopImmediatePropagation)) {\n            e.stopImmediatePropagation();\n        }\n\n        // Mobiscroll is wrapping the event in some goofy proxy so normal access is odd\n        try {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        } catch (err) {\n\n        }\n    };\n\n    /**\n     *\n     * @param {boolean} data\n     * @private\n     */\n    _toggleEventDirty = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_TOGGLE_DIRTY,\n            payload: data\n        };\n    };\n\n    /**\n     * Handles the updateEventStore Action\n     *\n     * @param data\n     * @private\n     */\n    _updateEventStore = (data) => {\n        return {\n            type: RADIOS.stores.EVENT_STORE_UPDATE,\n            payload: data\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        clearEvent: _clearEvent,\n        clearEventAssociatedData: _clearEventAssociatedData,\n        copyEvent: _copyEvent,\n        deleteEvent: _deleteEvent,\n        discardEventChanges: _discardEventChanges,\n        emailCoworkers: _emailCoworkers,\n        extractSelectedItem: _extractSelectedItem,\n        extractSelectedFile: _extractSelectedFile,\n        fixCustomFields: _fixCustomFields,\n        isMarketPlaceEvent: _isMarketPlaceEvent,\n        mergeEventData: _mergeEventData,\n        mergeModifiedEvent: _mergeModifiedEvent,\n        prepareContactsFormData: _prepareContactsFormData,\n        prepareCustomFormData: _prepareCustomFormData,\n        prepareDetailsFormData: _prepareDetailsFormData,\n        prepareMiscFormData: _prepareMiscFormData,\n        saveEvent: _saveEvent,\n        selectEvent: _selectEvent,\n        stopProp: _stopProp,\n        toggleEventDirty: _toggleEventDirty,\n        updateEventStore: _updateEventStore\n    };\n}\n\nexport default EventActionsFactory;","/**\n *\n * @param spec\n * @returns {XML}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst MessageContainerFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const _ = require('lodash');\n\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            text: PropTypes.string,\n            type: PropTypes.string,\n            boxStyle: PropTypes.object,\n            textStyle: PropTypes.object,\n            message: PropTypes.object,\n            children: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    return createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MessageContainer',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         *\n         */\n        getBackgroundColor() {\n            let type = this.getType();\n            let bgColor = mainTheme.warningBackgroundColor;\n            let dynamicBgColor = mainTheme[`${type}BackgroundColor`];\n\n            return dynamicBgColor || mainTheme.warningBackgroundColor;\n        },\n        /**\n         *\n         */\n        getType() {\n           const {\n               message,\n               type\n           } = this.props;\n\n           if(message) {\n               return message.get('type');\n           }\n\n           return type;\n        },\n        /**\n         *\n         */\n        getText() {\n            const {\n                message,\n                text\n            } = this.props;\n\n            if(message) {\n                return message.get('text');\n            }\n\n            return text;\n        },\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                message,\n                text,\n                type,\n                boxStyle,\n                textStyle,\n                children\n            } = this.props;\n\n            // TODO: Change BG and Text Color based on 'type'\n            let baseBoxStyle = {\n                borderLeft: 'thick solid rgba(170,103,8,.2)',\n                backgroundColor: 'rgba(252,163,8,.04)',\n                margin: '10px',\n                padding: '10px',\n                color: 'rgba(170,103,8,.73)'\n            };\n\n            if(this.getType() === 'note') {\n                baseBoxStyle = _.assign({}, baseBoxStyle, {\n                    backgroundColor: 'rgba(255, 255, 224, 0.6)',\n                    borderLeft: 'thick solid rgba(234, 222, 181, 0.8)',\n                    color: mainTheme.fontColor\n                });\n            }\n\n            if(this.getType() === 'info') {\n                baseBoxStyle = _.assign({}, baseBoxStyle, {\n                    backgroundColor: 'rgba(224, 240, 255, 0.6)',\n                    borderLeft: 'thick solid rgba(181, 203, 234, 0.8)',\n                    color: mainTheme.fontColor,\n                    fontSize: 'smaller'\n                });\n            }\n\n            let baseTextStyle = {\n\n            };\n\n            return (\n                <div style={_.assign({}, baseBoxStyle, boxStyle)}>\n                    {_.isEmpty(children) ? <span style={_.assign({}, baseTextStyle, textStyle)}>{this.getText()}</span> : children}\n                </div>\n            );\n        }\n    });\n}\n\nexport { MessageContainerFactory }","/**\n * Generates a MUIIconInput component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst MUIIconInputFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // components\n    const MenuItem = require('material-ui/MenuItem').default;\n\n    const IconMap = require('../../theme/IconMap');\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildIcon;\n\n    /**\n     *\n     * @param field\n     * @returns {*}\n     * @private\n     */\n    _buildIcon = (field) => {\n        if (_.has(field, 'iconMailTo') && !_.isEmpty(field.iconMailTo)) {\n            return <a href={`mailto: ${field.iconMailTo}`}>{IconMap.getFormIcon(field.iconClass)}</a>;\n        }\n\n        if (_.has(field, 'iconTel') && !_.isEmpty(field.iconTel)) {\n            return <a href={`tel: ${field.iconTel}`}>{IconMap.getFormIcon(field.iconClass)}</a>;\n        }\n\n        if (_.has(field, 'iconLink') && !_.isEmpty(field.iconLink)) {\n            return <a href={`${field.iconLink}`}>{IconMap.getFormIcon(field.iconClass)}</a>;\n        }\n\n        return IconMap.getFormIcon(field.iconClass);\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            field: PropTypes.object.isRequired,\n            children: PropTypes.node.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIIconInput',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            let {field, children} = this.props;\n\n            if (field.icon === false) {\n                return children;\n            }\n\n            const baseStyle = {\n                display: 'flex',\n                flexDirection: 'row',\n                paddingTop: '8px',\n                paddingBottom: '8px',\n                flexWrap: 'nowrap',\n                justifyContent: 'flex-start'\n            };\n\n            let appliedStyle = _.assign({}, baseStyle);\n\n            if (field.type === 'hidden') {\n                appliedStyle = _.assign(appliedStyle, {\n                    display: 'none'\n                });\n            }\n\n            return (\n                <div style={appliedStyle}>\n\n                    <div style={_.assign({\n                        order: 1,\n                        width: '56px'\n                    }, (field.showIcon === false ? {width: '8px'} : null))}>\n                        {_buildIcon(field)}\n                    </div>\n\n                    <div style={{\n                        order: 2,\n                        flexGrow: 1\n                    }}>\n                        {children}\n                    </div>\n\n                </div>\n            );\n        }\n    });\n}\n\nconst component = MUIIconInputFactory({});\n\nexport default {\n    component,\n    MUIIconInputFactory\n}","/**\n * Creates an ContinueCancelDialog components\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ContinueCancelDialogFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // MUI\n    const Dialog = require('material-ui/Dialog').default;\n    const FlatButton = require('material-ui/FlatButton').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        closeDialog\n    } = DialogActionsFactory({});\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _continueHandler;\n    let _cancelHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _cancelHandler = (inst) => {\n        const {\n            dispatch,\n            dialogItem\n        } = inst.props;\n\n        const onCancel = dialogItem.get('onCancel');\n\n        dispatch(closeDialog());\n\n        if (onCancel) {\n            onCancel.call();\n        }\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _continueHandler = (inst) => {\n        const {\n            dispatch,\n            dialogItem\n        } = inst.props;\n\n        const onContinue = dialogItem.get('onContinue');\n\n        dispatch(closeDialog());\n\n        if (onContinue) {\n            onContinue.call();\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            widgetId: PropTypes.string.isRequired,\n            dialogItem: PropTypes.object.isRequired,\n            continueText: PropTypes.string,\n            cancelText: PropTypes.string,\n            displayMode: PropTypes.string,\n            animate: PropTypes.string\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ContinueCancelDialog',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {function|XML|JSX}\n         */\n        render() {\n            const {\n                widgetId,\n                children,\n                continueText,\n                cancelText,\n                dialogItem\n            } = this.props;\n\n            const show = dialogItem.get('show');\n            const onCancel = dialogItem.get('onCancel');\n            const text = dialogItem.get('text');\n\n            return <Dialog\n                ref={widgetId}\n                open={show}\n                actions={\n                    [<FlatButton\n                        label={(cancelText || getText('Cancel')).toUpperCase()}\n                        primary={true}\n                        onClick={(e) => {\n                            stopProp(e);\n\n                            _cancelHandler(this);\n                        }}/>,\n                        <FlatButton\n                            label={(continueText || getText('Continue')).toUpperCase()}\n                            primary={true}\n                            onClick={(e) => {\n                                stopProp(e);\n\n                                _continueHandler(this);\n                            }}\n                        />]}>\n\n                {\n                    text || children\n                }\n\n            </Dialog>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ContinueCancelDialogFactory }","export default {\n    client: 'mobile',\n    v: '3.3' // went want to send a new version to the server on every call so we can gracefully end of life v3.1\n};","/**\n * Creates an AddButton component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @returns {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst AddButtonFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Components\n    const {CSSTransistorFactory} = require('./CSSTransistor');\n\n    const IconMap = require('../theme/IconMap');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        OverlayActionsFactory,\n        EventActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const propTypes = {\n        actions: PropTypes.array.isRequired,\n        view: PropTypes.object.isRequired\n    };\n\n    let _singleAction;\n\n    /**********************************\n     * Actions\n     **********************************/\n\n    const {\n        updateOverlayStore,\n        clearOverlay\n    } = OverlayActionsFactory({});\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    let _actionsVisible = false;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _hideActions;\n    let _toggleActions;\n\n    _toggleActions = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        if (!_actionsVisible) {\n            inst.refs.addButtonTransistor.performEnter();\n            dispatch(updateOverlayStore({\n                show: true,\n                mode: 'translucent',\n                onClick: (e) => {\n                    stopProp(e);\n\n                    _hideActions(inst);\n                }\n            }));\n\n            _actionsVisible = true;\n        }\n        else {\n            _hideActions(inst);\n        }\n    };\n\n    _hideActions = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        inst.refs.addButtonTransistor.performLeave();\n        dispatch(clearOverlay());\n        _actionsVisible = false;\n    };\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const CSSTransistor = CSSTransistorFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass(_.assign({}, {\n\n            /*** Used for debug messages\n             */\n            displayName: 'AddButton',\n            /**\n             * Allows you to use mixins to share behavior among multiple components.\n             */\n            mixins: [AutoShouldUpdateMixin],\n            /**\n             * Specifies what we expect in this.props\n             */\n            propTypes,\n            /**\n             * Generates the virtual DOM/HTML\n             */\n            render() {\n                const {\n                    actions,\n                    view\n                } = this.props;\n\n                const keyboardActive = view.get('keyboardActive');\n\n                if (keyboardActive) {\n                    return null;\n                }\n\n                _singleAction = null;\n\n                if(!actions || !actions.length) {\n                    return null;\n                }\n\n                if (actions && actions.length === 1) {\n                    _singleAction = actions[0].onClick;\n                }\n\n                return (<CSSTransistor\n                    ref='addButtonTransistor'\n                    transitionName='add-btn-actions'\n                    transitionEnterTimeout={250}\n                    transitionLeaveTimeout={250}>\n                    <div className='add-btn-actions'>\n                        <div className='actions-overflow'>\n                            {_.map(actions, (action, i) => {\n                                return (\n                                    <div\n                                        key={`overflow-${i}`}\n                                        className=\"icon-label\"\n                                        onClick={(event) => {\n                                            stopProp(event);\n\n                                            action.onClick(event);\n\n                                            _hideActions(this);\n                                        }}>\n                                        <i>{IconMap.getElement(action.iconClass)}</i>\n\n                                        <span>{action.label}</span>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <button\n                            className='btn-fixed btn-add'\n                            onClick={(event) => {\n                                stopProp(event);\n\n                                if (_.isFunction(_singleAction)) {\n                                    _singleAction();\n                                } else {\n                                    _toggleActions(this);\n                                }\n                            }}>\n                            <span>{IconMap.getElement('add', {style: {color: 'white'}})}</span>\n                        </button>\n                    </div>\n                </CSSTransistor>);\n            }\n        },\n        // Overrides any of the above methods\n        (spec ? spec.overrides : null)));\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { AddButtonFactory }\n","/**\n * Generates a CSSTransistor component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @returns {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst CSSTransistorFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _determineClassName;\n\n    /**\n     * Determines the class name to be appended to the child\n     *\n     * @param {object} element - Reference to child element\n     * @param {object} inst - Reference to React Component\n     * @returns {string}\n     * @private\n     */\n    _determineClassName = (element, inst) => {\n        const {\n            transitionName\n        } = inst.props;\n        const {\n            currentClassSuffix\n        } = inst.state;\n\n        let retVal = `${element.props.className} ${transitionName}`;\n\n        if (currentClassSuffix && currentClassSuffix.length) {\n            retVal += `-${currentClassSuffix}`;\n        }\n\n        return retVal;\n    };\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used for debug messages\n         */\n        displayName: 'CSSTransistor',\n        propTypes: {\n            transitionName: PropTypes.string.isRequired,\n            transitionEnterTimeout: PropTypes.number.isRequired,\n            transitionLeaveTimeout: PropTypes.number.isRequired\n        },\n        /**\n         * Sets up the components initial state\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                currentClassSuffix: 'enter'\n            };\n        },\n\n        /**\n         * Transitions the children into the Leave state\n         */\n        performEnter() {\n            this.setState({\n                currentClassSuffix: 'enter-active'\n            }, () => {\n                setTimeout(() => {\n                    this.setState({\n                        currentClassSuffix: 'leave'\n                    });\n                }, this.props.transitionEnterTimeout);\n            });\n        },\n\n        /**\n         * Transitions the children into the Enter state\n         */\n        performLeave() {\n            this.setState({\n                currentClassSuffix: 'leave-active'\n            }, () => {\n                setTimeout(() => {\n                    this.setState({\n                        currentClassSuffix: 'enter'\n                    });\n                }, this.props.transitionLeaveTimeout);\n            });\n        },\n\n        /**\n         * Generates the virtual DOM/HTML.\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                children\n            } = this.props;\n\n            const newChildren = React.Children.map(children, (element) => {\n                return React.cloneElement(element, _.assign({}, element.props, {\n                    className: _determineClassName(element, this)\n                }));\n            });\n\n            return <div className='css-transistor-wrapper'>\n                {newChildren}\n            </div>;\n        }\n    });\n}\n\nexport { CSSTransistorFactory }\n","/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default {\n    SESSION_DATA: 'session_data',\n    SELECTED_SPEAKER: 'selectedSpeaker',\n    PUSH_REG_ID: 'registrationId'\n};","/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\n\nexport default {\n    SINGLE_SPEAKER_MODE: 'GENERAL_SPEAKER_SINGLE_SPEAKER_MODE',\n    MULTIPLE_SPEAKER_MODE: 'GENERAL_SPEAKER_MULTIPLE_SPEAKER_MODE'\n};","/**\n * Generates a PayoutDetailView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst PayoutDetailViewFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    const OFFER_STATUS = require('../../enums/OFFER_STATUS');\n\n    // Factories\n    const {DisplayFieldFactory} = require('../../components/DisplayField');\n    const {SectionHeaderFactory} = require('../../components/SectionHeader');\n\n    const {\n        Table,\n        TableBody,\n        TableRow,\n        TableRowColumn,\n        TableFooter\n    }  = require('material-ui/Table');\n\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getLedgerData,\n        getOfferEventStatus,\n        getPayments\n    } = JobBoardActionsFactory();\n    const {\n        getCurrency,\n        getText\n    } = TranslateActionsFactory({});\n    const DisplayField = DisplayFieldFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired\n        }\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'PayoutDetailView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            const {\n                dispatch,\n                displayData,\n                event,\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            const selectedJob = jobBoard.selectedJob;\n            const jobDetail = selectedJob.jobDetail;\n            const selectedSpeaker = speakerInfo.selectedSpeaker;\n\n            let eventObj;\n\n            if(event.modifiedEvent) {\n                eventObj = event.modifiedEvent;\n            } else if(jobDetail) {\n                eventObj = jobDetail.get('event');\n            }\n\n            const offerStatus = getOfferEventStatus(eventObj, selectedSpeaker.get('sid'));\n\n            const mpAgreement = _.get(eventObj.toJS(), ['MPAgreement', selectedSpeaker.get('sid')]);\n\n            const {\n                fees,\n                grand_total,\n                fee_speaking,\n                fee_materials,\n                fee_travel\n            } = getLedgerData({\n                event: eventObj.toJS(),\n                Displaylists: displayData.get('displayLists').toJS(),\n                mp_agreement: mpAgreement\n            });\n\n            let feeRows = [\n                {fee: fee_speaking, display: getText('speaking fee')},\n                {fee: fee_travel, display: getText('travel')},\n                {fee: fee_materials, display: getText('materials / other')}\n            ];\n\n            let footerRowStyle = {\n                borderTop: '1px solid #999',\n                color: '#999',\n                verticalAlign: 'middle'\n            };\n\n            let dollarStyle = {\n                width: 10\n            };\n\n            let currencyStyle = {\n                width: 50,\n                textAlign: 'right'\n            };\n\n            let mutedStyle = {\n                color: mainTheme.mutedFontColor,\n                textAlign: 'center',\n                padding: 5\n            };\n\n            let tableStyle = {\n                backgroundColor: 'inherit',\n                borderSpacing: 1,\n                display: 'table'\n            };\n\n            let rowStyle = {\n                height: '24px'\n            };\n\n            let columnStyle = {\n                height: 24\n            };\n\n            dollarStyle = _.assign({}, columnStyle, dollarStyle);\n            currencyStyle = _.assign({}, columnStyle, currencyStyle);\n            footerRowStyle = _.assign({}, rowStyle, footerRowStyle);\n\n            return (\n                <div>\n                    <SectionHeader>{getText(\"contracted fees\")}</SectionHeader>\n                    <Table style={tableStyle}>\n                        <TableBody displayRowCheckbox={false}>\n                            {_.map(feeRows, (f, i) => {\n                                return (\n                                    <TableRow key={`fee-row-${i}`} selectable={false} style={rowStyle}>\n                                        <TableRowColumn style={dollarStyle}>$</TableRowColumn>\n                                        <TableRowColumn style={currencyStyle}>{esUtils.format_number(f.fee, 2)}</TableRowColumn>\n                                        <TableRowColumn style={columnStyle}>{f.display}</TableRowColumn>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n\n                    {_.map(_.groupBy(fees, \"due\"), (fees, group) => {\n                        let total = _.reduce(fees, (sum, f) => {\n                            return sum + f.fee;\n                        }, 0);\n\n                        return (\n                            <div key={group}>\n                                <SectionHeader>{group}</SectionHeader>\n\n                                <Table style={tableStyle}>\n                                    <TableBody displayRowCheckbox={false}>\n                                        {_.map(fees, (f, i) => {\n                                            return (\n                                                <TableRow key={`${group}-row-${i}`} selectable={false} style={rowStyle}>\n                                                    <TableRowColumn style={dollarStyle}>$</TableRowColumn>\n                                                    <TableRowColumn style={currencyStyle}>{esUtils.format_number(f.fee, 2)}</TableRowColumn>\n                                                    <TableRowColumn style={columnStyle}>{f.description}</TableRowColumn>\n                                                </TableRow>\n                                            );\n                                        })}\n                                    </TableBody>\n                                    <TableFooter adjustForCheckbox={false}>\n                                        <TableRow selectable={false} style={footerRowStyle}>\n                                            <TableRowColumn style={dollarStyle}>$</TableRowColumn>\n                                            <TableRowColumn style={currencyStyle}>{esUtils.format_number(total, 2)}</TableRowColumn>\n                                            <TableRowColumn style={columnStyle}>{getText(\"to you *\")}</TableRowColumn>\n                                        </TableRow>\n                                    </TableFooter>\n                                </Table>\n                            </div>\n                        );\n                    })}\n\n                    <Table style={tableStyle}>\n                        <TableBody displayRowCheckbox={false}>\n                            <TableRow selected={false} style={_.assign({}, rowStyle, {\n                                borderTop: '1px solid black'\n                            })}>\n                                <TableRowColumn style={dollarStyle}>$</TableRowColumn>\n                                <TableRowColumn style={currencyStyle}>{esUtils.format_number(grand_total, 2)}</TableRowColumn>\n                                <TableRowColumn style={columnStyle}>{getText(\"TOTAL to you *\")}</TableRowColumn>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n\n                    <DisplayField>\n                        <div style={{color: '#999', marginTop: \"1em\"}}>\n                            {getText(\"* less card processing costs up to 3%.\")}\n                        </div>\n                    </DisplayField>\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { PayoutDetailViewFactory }","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\n\n// Utilities\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Interacts with the HTML5 Local Storage feature\n *\n * @params {object} spec - Collection of all parameters\n */\nconst LocalStorageServiceFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    let _localStorage = undefined;\n    let _hasLocalStorage;\n\n    /**\n     * Determines if your current runtime environment suppors HTML5 localStorage\n     *\n     * @private\n     *\n     * @return {boolean}\n     */\n    _hasLocalStorage = () => {\n        try {\n            return 'localStorage' in window && window['localStorage'] !== null;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    if (_hasLocalStorage()) {\n        _localStorage = window.localStorage;\n    }\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        /**\n         * Returns an item from localStorage\n         *\n         * @param {string} key\n         * @param {function} parser - A method or means of parsing what was stored.  For example a stringified JSON object.\n         *\n         * @return {*}\n         */\n        fetchItem(key, parser) {\n            if (!_localStorage) return null;\n\n            let retval = _localStorage.getItem(key);\n\n            if (parser && typeof parser === 'function') {\n                retval = parser(retval);\n            }\n\n            return retval;\n        },\n        /**\n         * Fetches multiple items from _localStorage\n         *\n         * @param {string[]} items\n         *\n         * @return {object} - Key/value pair object of fetched items\n         */\n        fetchItems(items /* array of keys */) {\n            if (!_localStorage) return null;\n\n            let fetchedItems = {};\n\n            _.each(items, (key) => {\n                fetchedItems[key] = this.fetchItem(key);\n            });\n\n            return fetchedItems;\n        },\n        /**\n         * Saves an item into localStorage.  If it's an object, then it stringifies it first.\n         *\n         * @param {string} key\n         * @param {*} data\n         */\n        storeItem(key, data) {\n            if (!_localStorage) return null;\n\n            if (typeof data === 'object') {\n                data = JSON.stringify(data);\n            }\n\n            _localStorage.setItem(key, data);\n        },\n        /**\n         * Saves a collection of items into localStorage\n         *\n         * @param {object[]} items\n         * @property {object} item\n         * @property {string} item.key\n         * @property {*} item.data\n         */\n        storeItems(items /* array of key/value pairs */) {\n            if (!_localStorage) return null;\n\n            _.map(items, (data, key) => {\n                this.storeItem(key, data);\n            });\n        },\n        /**\n         * Deletes an item from localStorage\n         *\n         * @param {string} key\n         */\n        removeItem(key) {\n            if (!_localStorage) return null;\n\n            _localStorage.removeItem(key);\n        },\n        /**\n         * Deletes multiple items from localStorage\n         *\n         * @param {string[]} items\n         */\n        removeItems(items /* array of keys */) {\n            if (!_localStorage) return null;\n\n            _.each(items, (key) => {\n                this.removeItem(key);\n            });\n        },\n        /**\n         * Clears out localStorage entirely\n         *\n         */\n        clear() {\n            if (!_localStorage) return null;\n\n            _localStorage.clear();\n        }\n    };\n};\n\nexport default LocalStorageServiceFactory;","const {Record} = require('immutable');\n\nexport default Record({\n    onContinue: undefined,\n    onCancel: undefined,\n    show: false,\n    text: ''\n});","/**\n * Generates the Loading Actions\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst LoadingActionsFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n    let _showLoading;\n    let _hideLoading;\n    let _updateLoadingStore;\n\n    /**\n     * Handles the showLoading action\n     *\n     * @private\n     */\n    _showLoading = () => {\n        return {\n            type: RADIOS.stores.LOADING_STORE_SHOW\n        };\n    };\n\n    /**\n     * Handles the hideLoading action\n     *\n     * @private\n     */\n    _hideLoading = () => {\n        return {\n            type: RADIOS.stores.LOADING_STORE_HIDE\n        };\n    };\n\n    /**\n     * Handles the updateLoadingStore action\n     *\n     * @param payload\n     * @private\n     */\n    _updateLoadingStore = (payload) => {\n        return {\n            type: RADIOS.stores.LOADING_STORE_UPDATE,\n            payload\n        };\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        showLoading: _showLoading,\n        hideLoading: _hideLoading,\n        updateLoadingStore: _updateLoadingStore\n    };\n}\n\n\nexport default LoadingActionsFactory;","/**\n * Creates an BaseHeaderCard component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst BaseHeaderCardFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const IconMap = require('../../theme/IconMap');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateLeftAvatar;\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _generateLeftAvatar = (inst) => {\n        const {leftAvatar, leftAvatarIcon} = inst.props;\n\n        let avatarElement;\n\n        if (leftAvatar) {\n            avatarElement = leftAvatar;\n        }\n\n        if (leftAvatarIcon) {\n            if (_.isString(leftAvatarIcon)) {\n                avatarElement = <Avatar icon={IconMap.getElement(leftAvatarIcon)}/>;\n            } else {\n                avatarElement = <Avatar icon={leftAvatarIcon}/>;\n            }\n        }\n\n        if (avatarElement) {\n            return <div style={{\n                float: 'left',\n                padding: '10px'\n            }}>{avatarElement}</div>;\n        }\n\n        return null;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            heading: PropTypes.string.isRequired,\n            subHeading: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.array\n            ]),\n            headingStyle: PropTypes.object,\n            subHeadingStyle: PropTypes.object,\n            leftAvatar: PropTypes.element,\n            leftAvatarIcon: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element\n            ]),\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'BaseHeaderCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                heading,\n                headingStyle,\n                subHeading,\n                subHeadingStyle\n            } = this.props;\n\n            let baseHeadingStyle = {\n                color: 'white',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n                lineHeight: '52px',\n                fontSize: '28px'\n            };\n            let baseSubHeadingStyle = {\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n            };\n            let baseHeaderCardStyle = {\n                width: '100%'\n            };\n\n            if (!_.isEmpty(subHeading)) {\n                baseHeadingStyle = _.assign({}, baseHeadingStyle, {\n                    fontSize: '18px',\n                    lineHeight: '32px'\n                });\n\n                baseSubHeadingStyle = _.assign({}, baseSubHeadingStyle, {\n                    color: 'white',\n                    fontSize: '12px',\n                    lineHeight: '18px'\n                });\n            }\n\n            let leftAvatar = _generateLeftAvatar(this);\n\n            if (leftAvatar) {\n                baseHeaderCardStyle = _.assign({}, baseHeaderCardStyle, {\n                    display: 'flex',\n                    padding: '10px'\n                });\n            }\n\n            return <div className='header-card' style={baseHeaderCardStyle}>\n                {leftAvatar}\n                <div style={{order: 2}}>\n                    <div className='heading' style={_.assign({}, baseHeadingStyle, headingStyle)}>\n                        {heading}\n                    </div>\n                    {_.isArray(subHeading) ?\n                        _.map(subHeading, (s, i) => {\n                            return <div key={`subheading-${i}`} className={'sub-heading'}\n                                        style={_.assign({}, baseSubHeadingStyle, subHeadingStyle)}>\n                                {s}\n                            </div>;\n                        })\n                        :\n                        <div className={'sub-heading'} style={_.assign({}, baseSubHeadingStyle, subHeadingStyle)}>\n                            {subHeading}\n                        </div>}\n                </div>\n            </div>;\n        }\n    });\n}\n\nexport { BaseHeaderCardFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst IconLabelFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Theme\n    const IconMap = require('../theme/IconMap');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            iconClass: PropTypes.string,\n            label: PropTypes.string.isRequired,\n            fontSize: PropTypes.string,\n            color: PropTypes.string\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'IconLabel',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                color,\n                iconClass,\n                fontSize,\n                label\n            } = this.props;\n\n            return (\n                <div style={{\n                    display: 'flex'\n                }}>\n                    <div style={{\n                        order: 1,\n                        marginRight: '4px'\n                    }}>\n                        {IconMap.getElement(iconClass, {\n                            fontSize,\n                            color,\n                            style: {\n                                height: '12px',\n                                width: '12px'\n                            }\n                        })}\n                    </div>\n\n                    <div style={{\n                        order: 2,\n                        flexGrow: 1,\n                        fontSize,\n                        color\n                    }}>\n                        {label}\n                    </div>\n                </div>\n            );\n        }\n    });\n\n    return component;\n}\n\nexport { IconLabelFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AddressMixin\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst JobInfoCardFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const {fromJS} = require('immutable');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Util\n    const _ = require('lodash');\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = require('../../util/DateTools').default({});\n\n    // Enums\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n    const OFFER_STATUS = require('../../enums/OFFER_STATUS').default;\n\n    // Mixins\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        JobBoardActionsFactory\n    } = require('../../actions');\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // Components\n    const Avatar = require('material-ui/Avatar').default;\n    const {IconLabelFactory} = require('../IconLabel');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {getMyInfo, getOfferEventStatus} = JobBoardActionsFactory();\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _buildHeadingMap;\n    let _determineStatusColor;\n    let _generateAvatar;\n\n    /**\n     *\n     * @param {object} spec\n     * @property {Record} spec.record\n     * @property {object} spec.inst\n     * @property {object} spec.map\n     * @returns {{}}\n     * @private\n     */\n    _buildHeadingMap = (spec) => {\n        let map = {};\n        let inst = spec.inst;\n        let record = spec.record;\n        const {\n            job,\n            speaker,\n            myInfo\n        } = record;\n\n        let formattedDate = esUtils.format_date(convertFromBalboaTrunkTimestamp(job.get('starttime')), esUtils.format_date.masks.mediumDate);\n\n        map['strdate'] = {\n            subHeading: formattedDate,\n            iconClass: 'date-range'\n        };\n\n        map['address'] = {\n            subHeading: job.get('location'),\n            iconClass: 'location-on'\n        };\n\n        return map;\n    };\n\n    /**\n     *\n     * @param {string} status\n     * @returns {string}\n     * @private\n     */\n    _determineStatusColor = (status) => {\n        return mainTheme.getStatusColor(status) || mainTheme[`${status}Color`];\n    };\n\n    /**\n     *\n     * @param {Object|Record} job\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (job) => {\n        const deliveryMethod = job.get('deliverymethod') || 'none';\n        const status = job.get('status');\n\n        let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod];\n        let avIcon;\n        let bgColor;\n\n        if (dmIcon) {\n            avIcon = IconMap.getElement(dmIcon.icon);\n        }\n\n        bgColor = _determineStatusColor(status);\n\n        return <Avatar\n            backgroundColor={bgColor}\n            icon={avIcon}/>;\n    };\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const IconLabel = IconLabelFactory({});\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: {},\n        additionalMapFunc: _buildHeadingMap\n    });\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'JobInfoCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AddressMixin, AutoShouldUpdateMixin, CardMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            const selectedJob = jobBoard.selectedJob;\n            const jobSummary = selectedJob.jobSummary;\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n            const status = jobSummary.get('status');\n            const offerStatus = getOfferEventStatus(selectedJob.jobDetail.get('event'), selectedSpeaker.get('sid'));\n\n            let subHeadingCollection;\n\n            let headingMap = this.buildHeadingMap({\n                record: {\n                    job: jobSummary,\n                    speaker: selectedSpeaker,\n                    myInfo: getMyInfo({jobBoard, speakerInfo, job: jobSummary})\n                },\n                inst: this\n            });\n\n            let mapKeys = [\n                'strdate',\n                'address'\n            ];\n\n            subHeadingCollection = this.extractHeadings(headingMap, mapKeys);\n\n            return (\n                <div style={{\n                    backgroundColor: 'whitesmoke',\n                    minHeight: '80px',\n                    color: '#777',\n                    display: 'flex',\n                    padding: '10px',\n                    borderBottom: `2px solid ${_determineStatusColor(status)}`\n                }}>\n\n                    <div style={{\n                        order: 1\n                    }}>\n                        {_generateAvatar(jobSummary)}\n                    </div>\n\n                    <div style={{\n                        order: 2,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        flexShrink: 1,\n                        flexGrow: 1\n                    }}>\n\n                        <div style={{\n                            order: 1,\n                            paddingTop: '5px',\n                            paddingLeft: '5px',\n                            fontWeight: 'bold'\n                        }}>\n                            {jobSummary.get('event_name')}\n                        </div>\n\n                        <div style={{\n                            order: 2,\n                            display: 'flex',\n                            paddingTop: '10px',\n                            paddingLeft: '5px'\n                        }}>\n\n                            <div style={{\n                                order: 1,\n                                flexGrow: 1,\n                                fontSize: '12px',\n                                color: '#777',\n                                fontWeight: 'bold'\n                            }}>\n                                {_.map(subHeadingCollection, (s, i) => {\n                                    return <div key={i} style={{\n                                        marginTop: '2px',\n                                        marginBottom: '2px'\n                                    }}>\n                                        <IconLabel fontSize=\"12px\" color=\"#777\" iconClass={s.iconClass}\n                                                   label={s.subHeading}/>\n                                    </div>;\n                                })}\n                            </div>\n\n                            <div style={{\n                                order: 2,\n                                textAlign: 'right',\n                                color: _determineStatusColor(status),\n                                fontSize: '12px',\n                                fontWeight: 'bold'\n                            }}>\n                                {((offerStatus && offerStatus.status) || status).toUpperCase()}\n                            </div>\n\n                        </div>\n\n                        <div style={{\n                            order: 3\n                        }}></div>\n\n                    </div>\n\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobInfoCardFactory }","/**\n * Creates Actions for i18n translation\n *\n * @param {object} spec\n * @property {string} spec.lang - (optional) Defaults if not provided\n * @returns {object}\n * @constructor\n */\nconst TranslateActionsFactory = (spec = {}) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const Jed = require('jed');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Translations\n    const locale = require('../locale');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    let {\n        lang\n    } = spec;\n\n    lang = lang || 'en_US';\n\n    const translations = locale[lang];\n\n    let i18n = new Jed(_.assign(translations, {\n        // This callback is called when a key is missing\n        \"missing_key_callback\": function(key) {\n            // Do something with the missing key\n            // e.g. send key to web service or\n            log(`i18n key not found (${key})`);\n        }\n    }));\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let getCurrency;\n    let getText;\n\n    getCurrency = (spec = {}) => {\n        const {\n            number\n        } = spec;\n\n        // TODO: Support other currencies\n        return getText('USD $%1$s', {params:[esUtils.format_number(number, 2)]});\n    };\n\n    /**\n     * Returns the translation for the provided string\n     *\n     * @param {string} key\n     * @param {object} opts\n     * @property {string} opts.context\n     * @property {Array} opts.params\n     * @returns {string}\n     * @private\n     */\n    getText = (key, opts) => {\n        const {\n            context,\n            params\n        } = opts || {};\n\n        if (key && params) {\n            return i18n.translate(key).fetch(params);\n        }\n        else {\n            return i18n.gettext(key);\n        }\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        getCurrency,\n        getText,\n        jed: i18n\n    };\n}\n\nexport default TranslateActionsFactory;","/**\n * Generates a LoginView React Component\n *\n * @param spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst LoginViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const _ = require('lodash');\n    const {\n        RadioServiceMixin,\n        radio\n    } = require('react-pubsub-via-radio.js');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        is\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n    const Platform = require('../util/Platform').default;\n\n    // Components\n    const {\n        LinkFactory\n    } = require('../components');\n    const {\n        MessageSnacksFactory\n    } = require('../components/messages');\n\n    // Material UI\n    const Snackbar = require('material-ui/Snackbar').default;\n\n    // Factories\n    const {ForgotPasswordFormFactory} = require('../forms/ForgotPasswordForm');\n    const {LoginFormFactory} = require('../forms/LoginForm');\n    const {ResponsiveLogFactory} = require('../components/ResponsiveLog');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Services\n    const {\n        login\n    } = require('../services/LoginService').default();\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const {\n        getBuildName,\n        getVersionNumber,\n        isEspeakers,\n        isIos\n    } = require('../util/Platform').default;\n\n    // Actions\n    const {\n        AuthActionsFactory,\n        EventActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        forgotPassword\n    } = AuthActionsFactory({});\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        addSubView,\n        clearSubView,\n        getCurrentSubView\n    } = NavActionsFactory({});\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage,\n        clearMessages\n    } = MessageActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     **********************************/\n\n    let _forgotHandler;\n    let _loginHandler;\n    let _debugHandler;\n\n    /**\n     * Handles the ForgotPasswordForm submission\n     *\n     * @param {object} form - Form values\n     * @private\n     */\n    _forgotHandler = (form) => {\n        if (form && form.email) {\n            forgotPassword({\n                username: form.email\n            });\n        }\n    };\n\n    /**\n     * Handles the LoginForm submission\n     *\n     * @param {object} form - LoginForm values\n     * @param {object} inst\n     * @private\n     */\n    _loginHandler = (form, inst) => {\n        const {\n            dispatch,\n            push\n        } = inst.props;\n\n        dispatch(clearMessages());\n\n        dispatch(showLoading());\n\n        login(_.assign({}, form, push.toJS(), {\n            success: (response) => {\n                dispatch(hideLoading());\n\n                dispatch(clearMessages());\n\n                radio(RADIOS.stores.LOGIN_SUCCESS).broadcast(response.data);\n            },\n            failure: (response) => {\n                dispatch(hideLoading());\n\n                let error = null;\n\n                if (response && response.message) {\n                    error = response.message;\n                }\n                else if (typeof response === 'string') {\n                    error = response;\n                }\n\n                dispatch(setMessage({\n                    type: 'error',\n                    text: error\n                }));\n            }\n        }));\n    };\n\n    /**\n     * Quick debug function used to make sure everything is setup\n     * @private\n     */\n    _debugHandler = (e, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        let text = \"Build name: \" + getBuildName() + \" | \";\n        text += \"Build version: \" + process.env.NODE_ENV + \" | \";\n        text += \"Balboa url: \" + Platform.getBalboaUrl();\n\n        dispatch(setMessage({\n            text: text,\n            type: 'success'\n        }));\n    }\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ForgotPasswordForm = ForgotPasswordFormFactory({});\n    const LoginForm = LoginFormFactory({});\n    const Link = LinkFactory({});\n    const MessageSnacks = MessageSnacksFactory({});\n    const ResponsiveLog = ResponsiveLogFactory();\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            nav: PropTypes.object.isRequired,\n            push: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used for debug messages\n         */\n        displayName: 'LoginView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin],\n        /**\n         * Sets up the RadioService and what Service channels we'll be interacting with\n         *\n         * @returns {object}\n         * @constructor\n         */\n        RadioService_setup() {\n            const {\n                dispatch\n            } = this.props;\n\n            let radios = {};\n\n            radios[RADIOS.services.FORGOT_PASSWORD] = {\n                key() {\n                    return RADIOS.services.FORGOT_PASSWORD;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            text: getText('Email Sent'),\n                            type: 'success'\n                        }));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            text: error,\n                            type: 'error'\n                        }));\n                    }\n                }\n            };\n\n            return radios;\n        },\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {\n                dispatch,\n                nav,\n                view\n            } = this.props;\n\n            const keyboardActive = view.get('keyboardActive');\n\n            let forgotPasswordSelected = (is(getCurrentSubView(nav), VIEWS.subViews.FORGOT_PASSWORD_VIEW));\n\n            return <div className='login-view'>\n                <div className='login-splash'/>\n                <div className='login-content'>\n                    <div className={`espeaker-logo ${getBuildName()}`}/>\n\n                    {(forgotPasswordSelected ? <ForgotPasswordForm\n                        onSubmit={(e) => {\n                            _forgotHandler(e, this);\n                        }}\n                        onCancel={() => {\n                            dispatch(clearMessages());\n\n                            dispatch(clearSubView());\n                        }}/>\n                        : <LoginForm onSubmit={(e) => {\n                                _loginHandler(e, this);\n                            }}/>\n                    )}\n\n                    {(!forgotPasswordSelected ? <div className='password-text'>\n                        <Link onClick={(e) => {\n                            stopProp(e);\n\n                            dispatch(clearMessages());\n\n                            dispatch(addSubView(VIEWS.subViews.FORGOT_PASSWORD_VIEW));\n                            }}>{getText('Forgot Password?')}</Link>\n                        </div>\n                    : null)}\n\n                    {(!forgotPasswordSelected && isEspeakers() && !isIos() ? <div className='password-text'>\n                        <Link href='http://espeakers.com/join?mobile'>\n                            {getText('Need an Account?')}\n                        </Link>\n                    </div> : null)}\n\n                    {/*{(!forgotPasswordSelected && isEspeakers() && isIos() ? <div className='password-text'>*/}\n                        {/*<div>*/}\n                            {/*{getText('Need an Account?')}*/}\n                        {/*</div>*/}\n                        {/*{getText('Contact')}:*/}\n                        {/*<Link href='tel: (888) 377-3214'>*/}\n                            {/*{getText('(888) 377-3214')}*/}\n                        {/*</Link>*/}\n                    {/*</div> : null)}*/}\n\n                    <MessageSnacks/>\n\n                    {!keyboardActive ?\n                    <div className='splash-footer'>\n                        <div className='copyright'>\n                            {`© ${new Date().getFullYear()} eSpeakers.com`}\n                        </div>\n                        <div className='version' onClick={(e) => {_debugHandler(e, this)}}>\n                            {getVersionNumber()}\n                        </div>\n                    </div> : null}\n                </div>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LoginViewFactory }","/**\n * Creates a ForgotPasswordForm\n *\n * @param spec\n * @returns {*}\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @constructor\n */\nconst ForgotPasswordFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Factories\n    const MUIButtonGroupFactory = require('./MUIButtonGroup').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const ButtonGroup = MUIButtonGroupFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _cancelTouchHandler;\n\n    /**\n     * Cancels the form and returns to Login View\n     * @param event\n     * @private\n     */\n    _cancelTouchHandler = (inst) => {\n        const {\n            onCancel\n        } = inst.props;\n\n        onCancel();\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onCancel: PropTypes.func.isRequired,\n            onSubmit: PropTypes.func.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ForgotPasswordForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin],\n\n        /**\n         * Builds the instructions for building the form inputs\n         *\n         * @returns {{email: {name: string, type: string, iconClass: string, placeholder: string, validate: *, autoFocus: boolean}}}\n         */\n        buildSchema() {\n            return {\n                email: {\n                    name: 'email',\n                    type: 'text',\n                    iconClass: 'fa-envelope',\n                    icon: false,\n                    placeholder: getText('Email'),\n                    validate: v.email,\n                    autoFocus: true\n                }\n            };\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return <form\n                ref='forgot-password-form'\n                onSubmit={this.Form_onSubmit}>\n\n                    {this.generateFields({fields: this.buildSchema()})}\n\n                <ButtonGroup buttons={[\n                    {\n                        type: BTN.SUBMIT,\n                        props: {\n                            label: getText('Send Email'),\n                            primary: true\n                        }\n                    },\n                    {\n                        type: BTN.SUBMIT,\n                        props: {\n                            label: getText('Cancel'),\n                            onClick: (e) => {\n                                stopProp(e);\n\n                                _cancelTouchHandler(this);\n                            }\n                        }\n                    }\n                ]}/>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ForgotPasswordFormFactory }","/**\n * Generates a LoginForm React Component\n *\n * @param spec\n * @returns {*}\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @constructor\n */\nconst LoginFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Factories\n    const MUIButtonGroupFactory = require('./MUIButtonGroup').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const ButtonGroup = MUIButtonGroupFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onSubmit: PropTypes.func.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'LoginForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin],\n\n        /**\n         * Builds the instructions used to build the form inputs\n         *\n         * @returns {{username: {name: string, type: string, iconClass: string, placeholder: string, validate: (*|module.exports.v.required|boolean)}, password: {name: string, type: string, iconClass: string, placeholder: string, validate: (*|module.exports.v.required|boolean)}}}\n         */\n        buildSchema() {\n            return {\n                username: {\n                    name: 'username',\n                    type: 'text',\n                    iconClass: 'person',\n                    label: getText('Username'),\n                    validate: v.required\n                },\n                password: {\n                    name: 'password',\n                    type: 'password',\n                    iconClass: 'lock',\n                    label: getText('Password'),\n                    validate: v.required\n                }\n            };\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            return <form ref='login-form'\n                         onSubmit={this.Form_onSubmit}>\n\n                {this.generateFields({fields: this.buildSchema()})}\n\n                <ButtonGroup buttons={[\n                    {\n                        type: BTN.SUBMIT,\n                        props: {\n                            label: getText('Login'),\n                            primary: true\n                        }\n                    }\n                ]}/>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LoginFormFactory }","/**\n * Generates a ContactsView component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @returns {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst ContactsViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {AddButtonFactory} = require('../../components/AddButton');\n    const {ContactListFactory} = require('../../components/list/ContactList');\n    const {ContactsFormFactory} = require('../../forms/ContactsForm');\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const {\n        isEspeakers\n    } = require('../../util/Platform').default;\n\n    // Actions\n    const {\n        ContactActionsFactory,\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        selectContact\n    } = ContactActionsFactory({});\n    const {\n        prepareContactsFormData,\n        saveEvent,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const AddButton = AddButtonFactory({});\n    const ContactList = ContactListFactory({});\n    const ContactsForm = ContactsFormFactory({});\n    const EventInfoCard = EventInfoCardFactory({});\n    const FormLoading = FormLoadingFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _addContactHandler;\n    let _submitHandler;\n    let _toggleContactDetails;\n\n    /**\n     * @param inst\n     * @private\n     */\n    _addContactHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(selectContact({\n            id: '0'\n        }));\n    };\n\n    /**\n     * Handles ContactForm submission\n     *\n     * @param {object} form - Form values\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n        const modifiedEvent = event.get('modifiedEvent');\n\n        // merge in saved data\n        const formData = prepareContactsFormData({\n            form,\n            inst\n        });\n        const mergedEvent = modifiedEvent.merge(formData);\n\n        saveEvent(mergedEvent);\n    };\n\n    /**\n     *\n     * @param item\n     * @param inst\n     * @private\n     */\n    _toggleContactDetails = (item, inst) => {\n        inst.setState({\n            toggledContactId: item.dataset.contactId\n        });\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let overrides = {};\n\n    let component = createClass(_.assign({}, {\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ContactsView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, DateTools],\n\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                expandAllContacts: false,\n                toggledContactId: null\n            };\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                expandAllContacts\n            } = this.state;\n\n            let actions = [];\n\n            if (isEspeakers()) {\n                actions.push({\n                    label: getText('Add Contacts'),\n                    iconClass: 'person-add',\n                    onClick: (e) => {\n                        stopProp(e);\n\n                        _addContactHandler(this);\n                    }\n                });\n            }\n\n            return (\n                <div>\n                    <EventInfoCard/>\n\n                    <ContactList/>\n\n                    <FormLoading>\n                        <ContactsForm\n                            ref='contactForm'\n                            onSubmit={(form) => {\n                                _submitHandler(form, this);\n                            }}/>\n\n                        <AddButton actions={actions}/>\n                    </FormLoading>\n                </div>\n            );\n        }\n    }, overrides));\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ContactsViewFactory }","/**\n * Generates a ContactsForm component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @mixes EventMixin\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AutoShouldUpdateMixin\n * @returns {*} - React Component\n */\nconst ContactsFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {\n        PanelFactory\n    } = require('../components');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        prepareContactsFormData,\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildClientCallSchema;\n    let _generateTimezoneOptions;\n\n    /**\n     * Generates form input instructions for building the Client Call section\n     *\n     * @param {object} inst\n     * @returns {object}\n     * @private\n     */\n    _buildClientCallSchema = (inst) => {\n        return {\n            ccDate: {\n                name: 'ccDate',\n                type: 'date',\n                iconClass: 'date-range',\n                label: getText('Date'),\n                minDate: inst.getSystemMinDate(),\n                maxDate: inst.getSystemMaxDate(),\n                validate: v.blankOr(v.date)\n            },\n            ccTime: {\n                name: 'ccTime',\n                type: 'time',\n                iconClass: 'fa-clock-o',\n                label: getText('Time'),\n                validate: v.blankOr(v.time)\n            },\n            ccTimezone: {\n                name: 'ccTimezone',\n                label: getText('Timezone'),\n                type: 'select',\n                placeholder: getText('-- local time --'),\n                options: _generateTimezoneOptions(inst),\n                iconClass: 'language'\n\n            },\n            ccInitiator: {\n                name: 'ccInitiator',\n                type: 'select',\n                iconClass: 'fa-phone-square',\n                label: getText('Call Initiated By'),\n                options: [{\n                    text: getText('In Person'),\n                    value: '1'\n                }, {\n                    text: getText('They Call Us'),\n                    value: '2'\n                }, {\n                    text: getText('We Call Them'),\n                    value: '3'\n                }]\n\n            },\n            ccNotes: {\n                name: 'ccNotes',\n                type: 'textarea',\n                iconClass: 'fa-pencil',\n                label: getText('Notes')\n            }\n        };\n    };\n\n    /**\n     * TODO: This exists on VenueMixin as well.  Not very DRY\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateTimezoneOptions = (inst) => {\n        const {\n            displayData\n        } = inst.props;\n        const displayLists = displayData.get('displayLists');\n\n        const universal = displayLists.get('universal');\n        const timezones = universal.get('timezones');\n\n        let options = [];\n\n        timezones.map((timezone) => {\n            options.push({\n                text: timezone,\n                value: timezone\n            });\n        });\n\n        return options;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'event',\n            'jobBoard',\n            'speakerInfo',\n            'nav',\n            'displayData'\n        ]\n    });\n\n    const EventMixin = EventMixinFactory({\n        prepareFormDataOverride: (inst) => {\n            let form = _.clone(inst.state.data);\n\n            return prepareContactsFormData({\n                form,\n                inst\n            });\n        }\n    });\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ContactsForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Combines the form input instructions\n         *\n         * @returns {object}\n         */\n        buildSchema() {\n            return _.assign({}, _buildClientCallSchema(this));\n        },\n\n        /**\n         * Returns pre-filled values for the form based on the props\n         *\n         * @param props\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        getInitialValues(props) {\n            const {\n                event\n            } = props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            let initialValues = {\n                ccNotes: modifiedEvent.get('ccNotes'),\n                ccInitiator: modifiedEvent.get('ccInitiator') || '0',\n                ccTimezone: modifiedEvent.get('ccTimezone')\n            };\n\n            const ccDateTime = modifiedEvent.get('ccDateTime');\n\n            if (this.isBalboaDate(ccDateTime)) {\n                initialValues = _.assign(initialValues, {\n                    ccDate: this.convertFromBalboaToDate(ccDateTime),\n                    ccTime: this.convertFromBalboaToTime(ccDateTime)\n                });\n            }\n\n            return initialValues;\n        },\n\n        /**\n         *\n         *\n         * @returns {object}\n         */\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            // TODO: this would definitely get the model updated, but might be too expensive\n            // mergeModifiedEvent(this.state.data);\n            dispatch(toggleEventDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return (\n                <form\n                    ref='contacts-form'\n                    onSubmit={this.Form_onSubmit}>\n                    <Panel headingText={getText('Client Call')}\n                           headingIconClass='fa-phone'>\n                        {this.generateFields({fields: this.buildSchema()})}\n                    </Panel>\n                </form>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ContactsFormFactory }\n","/**\n * Generates a CustomView component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @return {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst CustomViewFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const {connect} = require('react-redux');\n    const {Map} = require('immutable');\n\n    // Components\n    const {CustomFormFactory} = require('../../forms/CustomForm');\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {ViewHeaderFactory} = require('../../components/ViewHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Utilities\n    const {log} = require('../../util/DevTools').default;\n\n    // Actions\n    const {EventActionsFactory, TranslateActionsFactory} = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        saveEvent\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     * Handles the submission for the forms\n     * @param {object} form\n     * @param {object} inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {event, speakerInfo} = inst.props;\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const modifiedEvent = event.get('modifiedEvent');\n\n        let newContents = {};\n        newContents[selectedSpeaker.get('sid').toString()] = form;\n\n        const Customfields = modifiedEvent.get('Customfields');\n        let contents = Customfields.get('contents');\n\n        // When there aren't existing entries it sends back an array which gets converted to a List, but we want to\n        // always use a Map.\n        if (contents.size === 0) {\n            contents = Map();\n        }\n\n        const mergedEvent = modifiedEvent.set('Customfields',\n            Customfields.set('contents',\n                contents.merge(newContents)\n            )\n        );\n\n        saveEvent(mergedEvent);\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const CustomForm = CustomFormFactory({});\n    const EventInfoCard = EventInfoCardFactory({});\n    const FormLoading = FormLoadingFactory({});\n    const ViewHeader = ViewHeaderFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'CustomView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <EventInfoCard/>\n\n                    <ViewHeader>{getText('Custom Fields')}</ViewHeader>\n\n                    <CustomForm\n                        ref=\"customForm\"\n                        onSubmit={(form) => {\n                            _submitHandler(form, this);\n                        }}/>\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CustomViewFactory }","/**\n * Generates a CustomForm component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @mixes EventMixin\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AutoShouldUpdateMixin\n * @returns {*} - React Component\n */\nconst CustomFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {\n        PanelFactory\n    } = require('../components');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        prepareCustomFormData,\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildLongSchema;\n    let _buildShortSchema;\n\n    /**\n     * Generates form input instructions for building the Custom Notes (Long) section\n     *\n     * @param {object} inst\n     * @returns {object}\n     * @private\n     */\n    _buildLongSchema = (inst) => {\n        const {\n            displayData,\n            speakerInfo\n        } = inst.props;\n        const displayLists = displayData.get('displayLists');\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const fieldList = selectedSpeaker.get('customfieldlabels');\n\n        const longList = fieldList.filter((field) => {\n            try {\n                return parseInt(field.get('id'), 10) >= 100;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n\n        let schema = {};\n        let foundField;\n\n        for (let i = 100; i < 108; i += 1) {\n            foundField = longList.find((field) => {\n                return field.get('id') === i.toString();\n            });\n\n            schema[i.toString()] = {\n                name: i.toString(),\n                type: 'textarea',\n                label: (foundField ? foundField.get('lbl') : ''),\n                icon: false\n            };\n        }\n\n        return schema;\n    };\n\n    /**\n     * Generates form input instructions for building the Custom Fields (Short) section\n     *\n     * @param {object} inst\n     * @returns {object}\n     * @private\n     */\n    _buildShortSchema = (inst) => {\n        const {\n            displayData,\n            speakerInfo\n        } = inst.props;\n        const displayLists = displayData.get('displayLists');\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const fieldList = selectedSpeaker.get('customfieldlabels');\n\n        const shortList = fieldList.filter((field) => {\n            try {\n                return parseInt(field.get('id'), 10) < 100;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n\n        let schema = {};\n        let foundField;\n\n        for (let i = 0; i < 10; i += 1) {\n            foundField = shortList.find((field) => {\n                return field.get('id') === i.toString();\n            });\n\n            schema[i.toString()] = {\n                name: i.toString(),\n                type: 'text',\n                label: (foundField ? foundField.get('lbl') : ''),\n                icon: false\n            };\n        }\n\n        return schema;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'event',\n            'jobBoard',\n            'nav',\n            'speakerInfo',\n            'displayData'\n        ]\n    });\n\n    const EventMixin = EventMixinFactory({});\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'CustomForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Combines the form input instructions\n         *\n         * @returns {object}\n         */\n        buildSchema() {\n            return _.assign({}, _buildLongSchema(this), _buildShortSchema(this));\n        },\n\n        /**\n         * Returns pre-filled values for the form based on the props\n         *\n         * @param props\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        getInitialValues(props) {\n            const {\n                event,\n                speakerInfo\n            } = props;\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n            const modifiedEvent = event.get('modifiedEvent');\n\n            const customFields = modifiedEvent.get('Customfields');\n\n            const contentMap = customFields.get('contents').get(selectedSpeaker.get('sid').toString());\n\n            let initialValues = {};\n\n            if (contentMap) {\n                contentMap.map((content, field) => {\n                    initialValues[field] = content;\n                });\n            }\n\n            return initialValues;\n        },\n\n        /**\n         *\n         *\n         * @returns {object}\n         */\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            // TODO: this would definitely get the model updated, but might be too expensive\n            // mergeModifiedEvent(this.state.data);\n            dispatch(toggleEventDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         *\n         * @returns {{Customfields: {contents: {}}}}\n         */\n        prepareFormData() {\n            const {\n                speakerInfo\n            } = this.props;\n\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n            let form = _.clone(this.state.data);\n\n            return prepareCustomFormData({\n                form,\n                speakerInfo\n            });\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return (\n                <form\n                    ref='custom-form'\n                    onSubmit={this.Form_onSubmit}>\n                    <Panel headingText={getText('Short Fields')}\n                           headingIconClass='fa-pencil-square'>\n                        {this.generateFields({fields: _buildShortSchema(this)})}\n                    </Panel>\n                    <Panel headingText={getText('Long Fields')}\n                           headingIconClass='fa-pencil-square'>\n                        {this.generateFields({fields: _buildLongSchema(this)})}\n                    </Panel>\n                </form>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CustomFormFactory }\n","/**\n * Generates a DetailsView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst DetailsViewFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {AddButtonFactory} = require('../../components/AddButton');\n    const {DetailsFormFactory} = require('../../forms/DetailsForm');\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n\n    const {\n        NotesListFactory,\n        StageTimeListFactory\n    } = require('../../components/list');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const {\n        isEspeakers,\n        isSolutionTree\n    } = require('../../util/Platform').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NoteActionsFactory,\n        StageTimeActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        isMarketPlaceEvent,\n        prepareDetailsFormData,\n        saveEvent,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        selectNote\n    } = NoteActionsFactory({});\n    const {\n        selectStageTime\n    } = StageTimeActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    const AddButton = AddButtonFactory({});\n    const DetailsForm = DetailsFormFactory({});\n    const EventInfoCard = EventInfoCardFactory({});\n    const FormLoading = FormLoadingFactory({});\n    const NotesList = NotesListFactory({});\n    const StageTimeList = StageTimeListFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _submitHandler;\n    let _toggleNoteDetails;\n    let _toggleStageTimeDetails;\n\n    /**\n     * Handles the DetailsForm submission\n     *\n     * @param {object} form - Form values\n     * @param {object} inst\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n\n        // merge in saved data\n        const mergedEvent = modifiedEvent.merge(prepareDetailsFormData(form));\n\n        saveEvent(mergedEvent);\n    };\n\n    /**\n     *\n     * @param {object} item\n     * @param {object} inst\n     * @private\n     */\n    _toggleNoteDetails = (item, inst) => {\n        inst.setState({\n            toggledNoteId: item.dataset.noteId\n        });\n    };\n\n    /**\n     *\n     * @param item\n     * @param inst\n     * @private\n     */\n    _toggleStageTimeDetails = (item, inst) => {\n        inst.setState({\n            toggledStageTimeId: item.dataset.stagetimeId\n        });\n    };\n\n    let _addNoteHandler;\n    let _addStageTimeHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _addNoteHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(selectNote({\n            id: '0'\n        }));\n    };\n\n    /**\n     * @param inst\n     * @private\n     */\n    _addStageTimeHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(selectStageTime({\n            id: '0'\n        }));\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'DetailView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                showSystemNotes: false,\n                toggledNoteId: undefined,\n                toggledStageTimeId: undefined,\n                expandAllNotes: false,\n                expandAllStageTimes: false\n            };\n        },\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            const {\n                expandAllNotes,\n                expandAllStageTimes\n            } = this.state;\n\n            const {\n                event\n            } = this.props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            let isPersonal = false;\n\n            if (modifiedEvent) {\n                isPersonal = modifiedEvent.get('isPersonal');\n            }\n\n            let actions = [];\n\n            if ((!isSolutionTree() || (isSolutionTree() && isPersonal))\n                && !isMarketPlaceEvent(modifiedEvent)) {\n                actions.push({\n                    label: getText('Add Stage Time'),\n                    iconClass: 'event-note',\n                    onClick: (e) => {\n                        stopProp(e);\n\n                        _addStageTimeHandler(this);\n                    }\n                });\n            }\n\n            if (isEspeakers()) {\n                actions.push({\n                    label: getText('Add Note'),\n                    iconClass: 'speaker-notes',\n                    onClick: (e) => {\n                        stopProp(e);\n\n                        _addNoteHandler(this);\n                    }\n                });\n            }\n\n            return (\n                <FormLoading>\n\n                    <EventInfoCard/>\n\n                    <DetailsForm\n                        onSubmit={(form) => {\n                            _submitHandler(form, this);\n                        }}/>\n\n                    <StageTimeList/>\n\n                    {isEspeakers() ? <NotesList/> : null}\n\n                    <AddButton actions={actions}/>\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { DetailsViewFactory }","/**\n * Generates DetailsForm component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @mixes EventMixin\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AutoShouldUpdateMixin\n * @returns {*} - React Component\n */\nconst DetailsFormFactory = (spec) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const DELIVERY_METHOD_ICONS = require('../enums/DELIVERY_METHOD_ICONS').default;\n\n    // Components\n    const {SectionHeaderFactory} = require('../components/SectionHeader');\n    const {ViewHeaderFactory} = require('../components/ViewHeader');\n    const {\n        LinkFactory\n    } = require('../components');\n    // Forms\n    const MUIStatic = require('../forms/inputs/MUIStatic');\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        isEspeakers,\n        isSolutionTree\n    } = require('../util/Platform').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        isMarketPlaceEvent,\n        prepareDetailsFormData,\n        toggleEventDirty\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const SectionHeader = SectionHeaderFactory({});\n    const ViewHeader = ViewHeaderFactory({});\n    const Link = LinkFactory({});\n\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _buildRepSchema;\n    let _buildZoomSchema;\n    let _buildBureauSchema;\n    let _buildEventDetailsSchema;\n    let _generateBureauOptions;\n    let _generateCompanyOptions;\n    let _generateEventClassOptions;\n    let _generateStatusOptions;\n    let _generatePdRepOptions;\n    let _generateSalesRepOptions;\n    let _generateProjectManagerOptions;\n\n    /**\n     * Builds form input instructions for the Bureau section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildRepSchema = (inst) => {\n        const {\n            companyData,\n            event\n        } = inst.props;\n\n        let schema = {\n            pd_rep_id: {\n                name: \"pd_rep_id\",\n                type: \"select\",\n                label: 'PD Rep',\n                options: _generatePdRepOptions(companyData.get('companyLists').get('pd_reps'))\n            },\n            sales_rep_id: {\n                name: \"sales_rep_id\",\n                type: \"select\",\n                label: 'Sales Rep',\n                options: _generateSalesRepOptions(companyData.get('companyLists').get('sales_reps'))\n            },\n            project_manager_id: {\n                name: \"project_manager_id\",\n                type: \"select\",\n                label: 'Project Manager',\n                options: _generateProjectManagerOptions(companyData.get('companyLists').get('project_managers'))\n            }\n        };\n\n        if (!isEspeakers() || isMarketPlaceEvent(event.get('modifiedEvent'))) {\n            _.map(schema, (field) => {\n                field['disabled'] = true;\n\n                return field;\n            });\n        }\n        return schema;\n    };\n\n    /**\n     * Builds form input instructions for the Zoom section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildZoomSchema = (inst) => {\n        const {\n            event\n        } = inst.props;\n\n        let schema = {\n            zoomUrl: {\n                name: \"zoomUrl\",\n                type: \"textarea\",\n                label: 'Meeting URL',\n                iconClass: 'videocam',\n                showIcon: true,\n                iconLink: event.get('selectedEvent').get('zoomUrl')\n            }\n        };\n\n        if (!isEspeakers() || isMarketPlaceEvent(event.get('modifiedEvent'))) {\n            _.map(schema, (field) => {\n                field['disabled'] = true;\n\n                return field;\n            });\n        }\n        return schema;\n    };\n\n    /**\n     * Builds form input instructions for the Bureau section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildBureauSchema = (inst) => {\n        const {\n            displayData,\n            event\n        } = inst.props;\n\n        const displayLists = displayData.get('displayLists');\n        const bureauMap = displayData.get('bureauMap');\n\n        let schema = {\n            bureauID: {\n                name: \"bureauID\",\n                type: \"filteredSelect\",\n                label: (isSolutionTree() ? 'PD Rep' : getText('Bureau')),\n                iconClass: 'fa-building-o',\n                optionMap: bureauMap.set('0', getText('None -- Direct')),\n                optionBuilder: () => {\n                    return _generateBureauOptions(inst);\n                }\n            },\n            bureauNotes: {\n                name: \"bureauNotes\",\n                type: \"textarea\",\n                label: (isSolutionTree() ? 'Sales Rep' : getText('Bureau Notes')),\n                iconClass: 'fa-pencil-square-o'\n            }\n        };\n\n        if (!isEspeakers() || isMarketPlaceEvent(event.get('modifiedEvent'))) {\n            _.map(schema, (field) => {\n                field['disabled'] = true;\n\n                return field;\n            });\n        }\n        return schema;\n    };\n\n    /**\n     * Builds form input instructions for the Event Details section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildEventDetailsSchema = (inst) => {\n\n        const {\n            auth,\n            event,\n            speakerInfo\n        } = inst.props;\n\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n        let schema = {\n            eid: {\n                name: \"eid\",\n                type: \"text\",\n                label: 'Event #',\n                disabled: true\n            },\n            organization: {\n                name: \"organization\",\n                type: \"text\",\n                label: getText('Presenting to'),\n                iconClass: 'fa-group',\n                validate: v.required\n            },\n            meetingname: {\n                name: \"meetingname\",\n                type: \"text\",\n                label: getText('Event Reason'),\n                iconClass: 'fa-bookmark-o'\n            },\n            status: {\n                name: \"status\",\n                type: \"select\",\n                label: getText('Status'),\n                iconClass: 'fa-hourglass-1',\n                options: _generateStatusOptions(inst),\n                validate: (s) => {\n                    const authedUserSession = auth.get('authedUserSession');\n\n                    // TODO: wouldn't it be better to just not include the option if they aren't PRO?\n                    let has_pro = _.includes(authedUserSession.get('getSIDsAtPackageLevel')('PRO'), esUtils.toInt(selectedSpeaker.get('sid')));\n\n                    if (s === \"lead\" && !has_pro) {\n                        return getText(\"Only PRO users can have '%1$s' events\", {\n                            params: [s]\n                        });\n                    }\n\n                    return true;\n                }\n            },\n            isPersonal: {\n                name: \"isPersonal\",\n                type: \"toggle\",\n                label: getText('Personal/Blackout')\n            },\n            deliveryMethod: {\n                name: \"deliveryMethod\",\n                type: \"select\",\n                iconClass: 'fa-slideshare',\n                label: getText((isSolutionTree() ? 'Delivery Method' : 'Event Type')),\n                options: [{\n                    text: DELIVERY_METHOD_ICONS['0'].label,\n                    value: '0'\n                }, {\n                    text: DELIVERY_METHOD_ICONS['1'].label,\n                    value: '1'\n                }, {\n                    text: DELIVERY_METHOD_ICONS['3'].label,\n                    value: '3'\n                }, {\n                    text: DELIVERY_METHOD_ICONS['2'].label,\n                    value: '2'\n                }]\n            },\n            arrivalNotes: {\n                name: \"arrivalNotes\",\n                type: \"textarea\",\n                label: 'Schedule Notes',\n                iconClass: 'fa-file-text-o'\n            }\n        };\n\n        if (isSolutionTree()) {\n            schema.coaching = {\n                name: 'coaching',\n                label: 'Virtual Coaching',\n                type: \"toggle\"\n            };\n\n            schema = _.omit(schema, ['meetingname', 'arrivalNotes']);\n        }\n\n        if (!isEspeakers() || isMarketPlaceEvent(event.get('modifiedEvent'))) {\n            _.map(schema, (field) => {\n                field['disabled'] = true;\n\n                return field;\n            });\n        }\n\n        return schema;\n    };\n\n    /**\n     * Generates the Select options for the PD Rep Selector\n     *\n     * @param {array} pd_reps - Collection of pd_reps from the server\n     * @returns {Array}\n     * @private\n     */\n    _generatePdRepOptions = (pd_reps) => {\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n        if (pd_reps) {\n            pd_reps.map((pd_rep) => {\n                options.push({\n                    text: pd_rep.get('fullname'),\n                    value: pd_rep.get('id').toString()\n                });\n            });\n        }\n\n        return _.sortBy(options, 'text');\n    };\n\n    /**\n     * Generates the Select options for the Sales Rep Selector\n     *\n     * @param {array} pd_reps - Collection of sales_reps from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateSalesRepOptions = (sales_reps) => {\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n\n        if (sales_reps) {\n            sales_reps.map((sales_rep) => {\n                options.push({\n                    text: sales_rep.get('fullname'),\n                    value: sales_rep.get('id').toString()\n                });\n            });\n        }\n\n        return _.sortBy(options, 'text');\n    };\n\n    /**\n     * Generates the Select options for the Project Manager Selector\n     *\n     * @param {array} pd_reps - Collection of project managers from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateProjectManagerOptions = (pms) => {\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n\n        if (pms) {\n            pms.map((pm) => {\n                options.push({\n                    text: pm.get('fullname'),\n                    value: pm.get('id').toString()\n                });\n            });\n        }\n\n        return _.sortBy(options, 'text');\n    };\n\n    /**\n     * Generates the Select options for the Bureau Selector\n     * TODO: This isn't very DRY.  Exists in both DetailsForm and NewEventForm.  Maybe put in Mixin\n     * @param {array} bureaus - Collection of bureaus from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateBureauOptions = (inst) => {\n        const {\n            displayData\n        } = inst.props;\n\n        const displayLists = displayData.get('displayLists');\n\n        const bureaus = displayLists.get('universal').get('bureaus');\n\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n\n        bureaus.map((bureau) => {\n            options.push({\n                text: bureau.get('bname'),\n                value: bureau.get('bid')\n            });\n        });\n\n        return options;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateCompanyOptions = (inst) => {\n        const {\n            displayData\n        } = inst.props;\n\n        const displayLists = displayData.get('displayLists');\n\n        const companies = displayLists.get('universal').get('eventcompany');\n\n        let options = [];\n\n        companies.map((company) => {\n            options.push({\n                text: company.get('name'),\n                value: company.get('id')\n            });\n        });\n\n        return options;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateEventClassOptions = (inst) => {\n        const {\n            displayData\n        } = inst.props;\n\n        const displayLists = displayData.get('displayLists');\n\n        const eventClasses = displayLists.get('universal').get('eventclass');\n\n        let options = [];\n\n        if (eventClasses) {\n            eventClasses.map((eventClass) => {\n                options.push({\n                    text: eventClass.get('name'),\n                    value: eventClass.get('id')\n                });\n            });\n        }\n\n        return options;\n    };\n\n    /**\n     * Generates the Select options for the Status Selector\n     * TODO: This isn't very DRY.  Exists in both DetailsForm and NewEventForm.  Maybe put in Mixin\n     * @param {array} eventStatuses - Collection of event statuses from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateStatusOptions = (inst) => {\n        const {\n            displayData\n        } = inst.props;\n\n        const displayLists = displayData.get('displayLists');\n\n        const eventStatuses = displayLists.get('universal').get('eventstatuses');\n\n        let options = [];\n\n        eventStatuses.map((status) => {\n            options.push({\n                text: status.get('description'),\n                value: status.get('description')\n            });\n        });\n\n        return options;\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const EventMixin = EventMixinFactory({});\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired,\n            companyData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'event',\n            'jobBoard',\n            'nav',\n            'speakerInfo',\n            'displayData',\n            'companyData',\n            'auth'\n        ]\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interfaces\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'DetailsForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Combines the form input instructions\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            return _.assign({}, _buildEventDetailsSchema(this), _buildBureauSchema(this), _buildRepSchema(this));\n        },\n\n        /**\n         * Returns pre-filled values for the form based on the props\n         *\n         * @param props\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        getInitialValues(props) {\n            const {\n                event\n            } = props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n\n            let initialValues = {\n                eid: _.toString(modifiedEvent.get('eid')),\n                arrivalNotes: modifiedEvent.get('arrivalNotes'),\n                bureauNotes: modifiedEvent.get('bureauNotes'),\n                organization: modifiedEvent.get('organization'),\n                status: (modifiedEvent.get('status') ? modifiedEvent.get('status').toString() : null),\n                isPersonal: modifiedEvent.get('isPersonal'),\n                deliveryMethod: (modifiedEvent.get('deliveryMethod') ? modifiedEvent.get('deliveryMethod').toString() : '0'),\n                meetingname: modifiedEvent.get('meetingname'),\n                zoomUrl: modifiedEvent.get('zoomUrl'),\n                bureauID: (modifiedEvent.get('bureauID') ? modifiedEvent.get('bureauID').toString() : '0')\n            };\n            if (isSolutionTree()) {\n                initialValues.pd_rep_id = (modifiedEvent.get('pd_rep_id') ? modifiedEvent.get('pd_rep_id').toString() : '0');\n                initialValues.sales_rep_id = (modifiedEvent.get('sales_rep_id') ? modifiedEvent.get('sales_rep_id').toString() : '0');\n                initialValues.project_manager_id = (modifiedEvent.get('project_manager_id') ? modifiedEvent.get('project_manager_id').toString() : '0');\n            };\n\n            return initialValues;\n        },\n\n        /**\n         *\n         *\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        onFormChanged: function (name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            // TODO: this would definitely get the model updated, but might be too expensive\n            // mergeModifiedEvent(this.state.data);\n            dispatch(toggleEventDirty(this.Form_areChangesMade()));\n        },\n\n        prepareFormData() {\n            let formData = _.clone(this.state.data);\n\n            return prepareDetailsFormData(formData);\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            let {\n                event\n            } = this.props;\n\n            return (\n                <form\n                    ref='details-form'\n                    onSubmit={this.Form_onSubmt}>\n\n                    <ViewHeader label={getText('Event Details')}/>\n\n                    {this.generateFields({fields: _buildEventDetailsSchema(this)})}\n\n                    <div>\n                        <SectionHeader label={getText('Meeting Url')}/>\n                        {this.generateFields({fields: _buildZoomSchema(this)})}\n                    </div>\n\n                    {isSolutionTree() && <div>\n                        <SectionHeader label={getText('Staff')} />\n                        {this.generateFields({fields: _buildRepSchema(this)})}\n                    </div>}\n                    {!isSolutionTree() && <div>\n                        <SectionHeader label={getText('Bureau')}/>\n                        {this.generateFields({fields: _buildBureauSchema(this)})}\n                    </div>}\n\n\n                </form>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { DetailsFormFactory }","/**\n * Generates a JobEventView component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @returns {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst JobEventViewFactory = (spec) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Components\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {JobOfferSectionFactory} = require('../../components/JobOfferSection');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../../mixins');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        }\n    });\n\n    const EventMixin = EventMixinFactory({\n        prepareFormDataOverride: (inst) => {\n            // no-op\n        }\n    });\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n    const JobOfferSection = JobOfferSectionFactory({});\n    const EventInfoCard = EventInfoCardFactory({});\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobEventView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return (\n                <div>\n                    <EventInfoCard />\n\n                    <JobOfferSection />\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobEventViewFactory }","/**\n * Generates LibraryView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst LibraryViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Components\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {LibraryListFactory} = require('../../components/list/LibraryList');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const EventInfoCard = EventInfoCardFactory({});\n    const LibraryList = LibraryListFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'LibraryView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return <div>\n                <EventInfoCard/>\n\n                <LibraryList/>\n\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LibraryViewFactory }","/**\n * Generates a MiscView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst MiscViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {MiscFormFactory} = require('../../forms/MiscForm');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        prepareMiscFormData,\n        saveEvent\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     * Handles the ActionListForm submission\n     *\n     * @param {object} form - Form values\n     * @param {object} inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n\n        const data = prepareMiscFormData(event, form);\n\n        const mergedEvent = modifiedEvent.merge(data);\n\n        saveEvent(mergedEvent);\n    };\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const EventInfoCard = EventInfoCardFactory({});\n    const FormLoading = FormLoadingFactory({});\n    const MiscForm = MiscFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MiscView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <EventInfoCard/>\n                    <MiscForm\n                        ref='miscForm'\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }\n                    />\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { MiscViewFactory }","/**\n * Generates a MiscForm component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes EventMixin\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst MiscFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {\n        PanelFactory\n    } = require('../components');\n\n    const {StoryListFactory} = require('../components/list/StoryList');\n    const {ViewHeaderFactory} = require('../components/ViewHeader');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const {\n        getIn\n    } = require(\"ES/utils/esUtils\");\n    const {\n        isEspeakers,\n        isSolutionTree\n    } = require('../util/Platform').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        prepareMiscFormData,\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Panel = PanelFactory({});\n    const StoryList = StoryListFactory({});\n    const ViewHeader = ViewHeaderFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildCSPSchema;\n    let _buildMiscSchema;\n    let _generatePresentingProductOptions;\n    let _generateSourceOptions;\n    let _generateSpeechTitleOptions;\n\n    /**\n     * Builds form input instructions for the CSP section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildCSPSchema = () => {\n        return {\n            nonCSP: {\n                name: 'nonCSP',\n                type: 'toggle',\n                label: getText('For CSP')\n            },\n            cspDivision: {\n                name: 'cspDivision',\n                type: 'text',\n                iconClass: 'fa-area-chart',\n                label: getText('CSP Division')\n            }\n        };\n    };\n\n    /**\n     * Builds form input instructions for the Misc section\n     *\n     * @param {object} inst\n     * @returns {object}\n     * @private\n     */\n    _buildMiscSchema = (inst) => {\n        let schema = {\n            speechTitle: {\n                name: 'speechTitle',\n                type: 'select',\n                label: getText('Presentation'),\n                iconClass: 'fa-group',\n                options: _generateSpeechTitleOptions(inst)\n            },\n            dress: {\n                name: 'dress',\n                type: 'text',\n                label: getText('Dress'),\n                iconClass: 'fa-black-tie'\n            },\n            audienceSize: {\n                name: 'audienceSize',\n                type: 'text',\n                iconClass: 'fa-group',\n                label: getText('Audience Size')\n            },\n            source: {\n                name: 'source',\n                type: 'select',\n                iconClass: 'fa-sort-down',\n                label: getText('Lead Source'),\n                options: _generateSourceOptions(inst)\n            },\n            publicInvited: {\n                name: 'publicInvited',\n                type: 'toggle',\n                label: getText('Public Invited')\n            },\n            offerPending: {\n                name: 'offerPending',\n                type: 'toggle',\n                label: getText('Offer Pending')\n            }\n        };\n\n        if (isSolutionTree()) {\n            schema.speechTitle.label = getText('Presn. Category');\n\n            schema = _.omit(schema, ['source', 'publicInvited', 'offerPending']);\n        }\n\n        if (!isEspeakers()) {\n            _.map(schema, (field, key) => {\n                if (key !== 'dress') {\n                    field['disabled'] = true;\n                }\n\n                return field;\n            });\n        }\n\n        return schema;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _generatePresentingProductOptions = (inst) => {\n        const {\n            displayData,\n            event\n        } = inst.props;\n        const modifiedEvent = event.get('modifiedEvent');\n        const list = displayData.get('displayLists').get('universal').get('presentingproduct');\n\n        let options = [];\n\n        if (list && list.size) {\n            list.map(({\n                id,\n                companyId,\n                description\n            }) => {\n                if (modifiedEvent.get('companyID') === companyId) {\n                    options.push({\n                        text: description,\n                        value: id\n                    });\n                }\n            });\n        }\n\n        return options;\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @returns {Array}\n     * @private\n     */\n    _generateSourceOptions = (inst) => {\n        const {\n            speakerInfo\n        } = inst.props;\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const sourceList = selectedSpeaker.get('event_sources');\n\n        let options = [];\n\n        if (sourceList && sourceList.size) {\n            sourceList.map((obj) => {\n                options.push({\n                    text: obj.get('source'),\n                    value: obj.get('source')\n                });\n            });\n        }\n\n        return options;\n    };\n\n    /**\n     *\n     * @param {object} inst\n     * @returns {Array}\n     * @private\n     */\n    _generateSpeechTitleOptions = (inst) => {\n        const {\n            displayData,\n            speakerInfo\n        } = inst.props;\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        let presentationList = selectedSpeaker.get('presentations');\n\n        let options = [];\n\n        if (isSolutionTree()) {\n            presentationList = displayData.get('displayLists').get('universal').get('presentationcategory');\n        }\n\n        if (presentationList && presentationList.size) {\n            presentationList.map((presentation) => {\n                options.push({\n                    text: presentation,\n                    value: presentation\n                });\n            });\n        }\n\n        return options;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const EventMixin = EventMixinFactory({});\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'event',\n            'nav',\n            'jobBoard',\n            'speakerInfo',\n            'displayData'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MiscForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Combines all the form input instructions\n         *\n         * @returns {object}\n         */\n        buildSchema() {\n            return _.assign({}, _buildMiscSchema(this), _buildCSPSchema(this));\n        },\n\n        /**\n         * Returns pre-filled values for the form based on the props\n         *\n         * @param props\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        getInitialValues(props) {\n            const {\n                event\n            } = this.props;\n            const modifiedEvent = event.get('modifiedEvent');\n\n            let initialValues = {};\n\n            // strings\n            _.map([\n                'cspDivision',\n                'speechTitle',\n                'dress',\n                'audienceSize',\n                'source',\n                'presentingproductid'\n            ], (key) => {\n                initialValues[key] = (_.isNumber(modifiedEvent.get(key)) ? modifiedEvent.get(key).toString() : modifiedEvent.get(key));\n            });\n\n            // booleans\n            _.map([\n                'nonCSP',\n                'publicInvited',\n                'offerPending'\n            ], (key) => {\n                if (key === 'nonCSP') {\n                    initialValues[key] = !modifiedEvent.get(key);\n                }\n                else {\n                    initialValues[key] = modifiedEvent.get(key);\n                }\n            });\n\n            return initialValues;\n        },\n\n        /**\n         *\n         *\n         * @returns {object}\n         */\n        onFormChanged: function (name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            dispatch(toggleEventDirty(true));\n        },\n\n        /**\n         *\n         * @returns {object}\n         */\n        prepareFormData() {\n            const {\n                event\n            } = this.props;\n\n            let form = _.clone(this.state.data);\n\n            return prepareMiscFormData(event, form);\n        },\n\n        render() {\n            /**\n             * Generates the virtual DOM/HTML\n             *\n             * @returns {*}\n             */\n            return <form\n                ref='Misc-form'\n                onSubmit={this.Form_onSubmit}>\n                <div>\n                    <ViewHeader>{getText('Misc')}</ViewHeader>\n\n                    {this.generateFields({fields: _buildMiscSchema(this)})}\n\n                    {(isEspeakers() ? <Panel\n                        headingText={getText('CSP')}\n                        headingIconClass='fa-area-chart'>\n                        {this.generateFields({fields: _buildCSPSchema(this)})}\n                    </Panel> : null)}\n\n                    {(!isSolutionTree() ?\n                        <StoryList/>\n                        : null)}\n\n                </div>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { MiscFormFactory }","/**\n * Generates a ServicesView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ServicesViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {ServicesFormFactory} = require('../../forms/ServicesForm');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        saveEvent\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     * Handles ServicesForm submission\n     *\n     * @param {object} form - Form values\n     * @param {object} inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n        const modifiedEvent = event.get('modifiedEvent');\n\n        // merge in saved data\n        // TODO maybe this should be in the store\n        const mergedEvent = modifiedEvent.merge(form);\n\n        saveEvent(mergedEvent);\n    };\n\n    /*********************************\n     * Factories\n     *********************************/\n\n    const EventInfoCard = EventInfoCardFactory({});\n    const FormLoading = FormLoadingFactory({});\n    const ServicesForm = ServicesFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ServicesView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <EventInfoCard/>\n\n                    <ServicesForm\n                        ref='servicesForm'\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }\n                    />\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ServicesViewFactory }\n","/**\n * Generates a ServicesForm component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes EventMixin\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst ServicesFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {\n        PanelFactory,\n        AddButtonFactory,\n        LinkFactory\n    } = require('../components');\n\n    const {\n        ProductListFactory,\n        ServiceListFactory\n    } = require('../components/list');\n\n    const {PayoutDetailViewFactory} = require('../views/jobViews/PayoutDetailView');\n    const {MessageContainerFactory} = require('../components/messages/MessageContainer');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    const OFFER_STATUS = require('../enums/OFFER_STATUS').default;\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        ProductActionsFactory,\n        ServiceActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        isMarketPlaceEvent,\n        toggleEventDirty,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getMyInfo,\n        getOfferStatusIndexByJob,\n        getOfferStatusIndexByStatus\n    } = JobBoardActionsFactory();\n    const {\n        selectProduct\n    } = ProductActionsFactory({});\n    const {\n        selectService\n    } = ServiceActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const AddButton = AddButtonFactory({});\n    const Link = LinkFactory({});\n    const Panel = PanelFactory({});\n    const ProductList = ProductListFactory({});\n    const ServiceList = ServiceListFactory({});\n    const PayoutDetailView = PayoutDetailViewFactory({});\n    const MessageContainer = MessageContainerFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _addProductHandler;\n    let _addServiceHandler;\n    let _buildPackagesSchema;\n    let _buildServicesSchema;\n    let _determinePayoutView;\n    let _generateLink;\n    let _toggleProductDetails;\n    let _toggleServiceDetails;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _addProductHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(selectProduct({\n            id: '0'\n        }));\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _addServiceHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(selectService({\n            id: '0'\n        }));\n    };\n\n    /**\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildServicesSchema = () => {\n        return {\n            depositPercent: {\n                name: 'depositPercent',\n                type: 'text',\n                label: getText('Deposit Percent'),\n                iconClass: 'fa-percent',\n                validate: v.blankOr(v.integer)\n            }\n        };\n    };\n\n    /**\n     * Builds form input instructions for the Packages section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildPackagesSchema = () => {\n        return {\n            productQtyBoxes: {\n                name: 'productQtyBoxes',\n                type: 'text',\n                iconClass: 'fa-archive',\n                label: getText('Qty Boxes'),\n                validate: v.blankOr(v.integer)\n            },\n            productShipper: {\n                name: 'productShipper',\n                type: 'select',\n                iconClass: 'fa-ship',\n                label: getText('Shipper'),\n                options: _.map([getText('DHL'), getText('FEDEX'), getText('UPS'), getText('USPS'), getText('carry with'), getText('other')], (shipper) => {\n                    return {\n                        text: shipper,\n                        value: shipper\n                    };\n                })\n            },\n            productTrackingNumbers: {\n                name: 'productTrackingNumbers',\n                type: 'text',\n                iconClass: 'fa-hashtag',\n                label: getText('Tracking Number(s)')\n            }\n        };\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {XML|JSX}\n     * @private\n     */\n    _determinePayoutView = (inst) => {\n        const {\n            event,\n            jobBoard,\n            speakerInfo\n        } = inst.props;\n\n        const modifiedEvent = event.modifiedEvent;\n        const myInfo = getMyInfo({\n            jobBoard,\n            speakerInfo,\n            eid: modifiedEvent.get('eid')\n        });\n        const statusIndex = getOfferStatusIndexByJob(myInfo);\n\n        if(statusIndex >= getOfferStatusIndexByStatus(OFFER_STATUS.OFFER_ACCEPTED)) {\n            return <PayoutDetailView/>;\n        }\n\n        return <MessageContainer>{getText('Once this Marketplace job has an accepted offer, the price and payments will be displayed here.')}</MessageContainer>;\n    };\n\n    /**\n     * @param inst\n     * @returns {JSX|XML}\n     * @private\n     */\n    _generateLink = (inst) => {\n        const {\n            productTrackingNumbers\n        } = inst.state.data;\n        let numbers = [];\n\n        if (productTrackingNumbers && productTrackingNumbers.length) {\n            numbers = productTrackingNumbers.split(/[^A-Za-z0-9]/);\n\n            if (numbers.length && numbers[0] && _.isString(numbers[0]) && numbers[0].length) {\n                return <div className='track-my-packages'>\n                    <Link href={`http://www.google.com/#q=${numbers[0]}`}>\n                        {getText('Track My Package')}\n                    </Link>\n                </div>;\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     *\n     * @param item\n     * @param inst\n     * @private\n     */\n    _toggleProductDetails = (item, inst) => {\n        inst.setState({\n            toggledProductId: item.dataset.productId\n        });\n    };\n\n    /**\n     *\n     * @param item\n     * @param inst\n     * @private\n     */\n    _toggleServiceDetails = (item, inst) => {\n        inst.setState({\n            toggledServiceId: item.dataset.serviceId\n        });\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const EventMixin = EventMixinFactory({});\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debugging message\n         */\n        displayName: 'ServicesForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Combines all form input build instructions\n         *\n         * @returns {object}\n         */\n        buildSchema() {\n            return _buildPackagesSchema();\n        },\n\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                toggledServiceId: undefined,\n                toggledProductId: undefined,\n                expandAllServices: false,\n                expandAllProducts: false\n            };\n        },\n\n        /**\n         * Returns pre-filled values for the form based on the props\n         *\n         * @param props\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        getInitialValues(props) {\n            const {\n                event\n            } = props;\n            const modifiedEvent = event.get('modifiedEvent');\n\n            let initialValues = {};\n\n            _.map([\n                'depositPercent',\n                'productQtyBoxes',\n                'productShipper',\n                'productTrackingNumbers'\n            ], (key) => {\n                initialValues[key] = (_.isNumber(modifiedEvent.get(key)) ? modifiedEvent.get(key).toString() : modifiedEvent.get(key));\n            });\n\n            return initialValues;\n        },\n\n        /**\n         *\n         *\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        onFormChanged: function (name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            // TODO: this would definitely get the model updated, but might be too expensive\n            dispatch(toggleEventDirty(this.Form_areChangesMade()));\n        },\n\n        /**\n         * Generates virtual DOM/HTMl\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                toggledServiceId,\n                toggledProductId,\n                expandAllServices,\n                expandAllProducts\n            } = this.state;\n\n            const {\n                event\n            } = this.props;\n\n            return <form\n                ref='services-form'\n                onSubmit={this.Form_onSubmit}>\n\n                {isMarketPlaceEvent(event.modifiedEvent) ? _determinePayoutView(this) : <ServiceList/>}\n\n                {!isMarketPlaceEvent(event.modifiedEvent) ? this.generateFields({fields: _buildServicesSchema()}) : null}\n\n                <ProductList/>\n\n                <Panel\n                    headingText={getText('Packages')}\n                    headingIconClass='fa-cubes'>\n\n                    {this.generateFields({fields: this.buildSchema()})}\n\n                    {_generateLink(this)}\n                </Panel>\n\n                {!isMarketPlaceEvent(event.modifiedEvent) &&\n                <AddButton actions={[\n                    {\n                        label: getText('Add Service'),\n                        iconClass: 'attach-money',\n                        onClick: (event) => {\n                            stopProp(event);\n\n                            _addServiceHandler(this);\n                        }\n                    },\n                    {\n                        label: getText('Add Product'),\n                        iconClass: 'attach-money',\n                        onClick: (event) => {\n                            stopProp(event);\n\n                            _addProductHandler(this);\n                        }\n                    }\n                ]}/>\n                }\n\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ServicesFormFactory }","/**\n * Generates an TodoList Component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @returns {*} - React component\n * @mixes AutoShouldUpdateMixin\n */\nconst TodoListViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {AddButtonFactory} = require('../../components/AddButton');\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {TodoListFactory} = require('../../components/list/TodoList');\n    const {TodoListFormFactory} = require('../../forms/TodoListForm');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TodoActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        selectTodo\n    } = TodoActionsFactory({});\n\n    const {\n        saveEvent,\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _addTodoHandler;\n    let _submitHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _addTodoHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(selectTodo({\n            id: '0'\n        }));\n    };\n\n    /**\n     * Handles the ActionListForm submission\n     *\n     * @param {object} form - Form values\n     * @param {object} inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n        const modifiedEvent = event.get('modifiedEvent');\n\n        const mergedEvent = modifiedEvent.merge(form);\n\n        saveEvent(mergedEvent);\n    };\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const AddButton = AddButtonFactory({});\n    const EventInfoCard = EventInfoCardFactory({});\n    const TodoList = TodoListFactory({});\n    const TodoListForm = TodoListFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Members\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TodoListView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n\n            let actions = [];\n\n            actions.push({\n                label: getText('Add Action'),\n                iconClass: 'playlist-add-check',\n                onClick: (e) => {\n                    stopProp(e);\n\n                    _addTodoHandler(this);\n                }\n            });\n\n            return (\n                <div>\n                    <EventInfoCard/>\n\n                    <TodoList/>\n\n                    <TodoListForm\n                        ref='todoListForm'\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }\n                    />\n\n                    <AddButton actions={actions}/>\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TodoListViewFactory }","/**\n * Generates TodoListForm component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @mixes EventMixin\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AutoShouldUpdateMixin\n * @returns {*} - React Component\n */\nconst TodoListFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildTodoListSchema;\n    let _generateTodoOptions;\n\n    /**\n     * Builds form input instructions for the TodoList\n     *\n     * @param {object} inst\n     * @returns {object}\n     * @private\n     */\n    _buildTodoListSchema = (inst) => {\n        return {\n            selectTodoList: {\n                name: 'selectTodoList',\n                type: 'select',\n                label: getText('Actions'),\n                iconClass: 'fa-list',\n                options: _generateTodoOptions(inst)\n            }\n        };\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateTodoOptions = (inst) => {\n        const {\n            speakerInfo\n        } = inst.props;\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const todoList = selectedSpeaker.get('todolists');\n\n        let options = [];\n\n        if (todoList && todoList.size) {\n            todoList.map((todo) => {\n                options.push({\n                    text: todo.get('listname'),\n                    value: todo.get('id').toString()\n                });\n            });\n        }\n\n        return options;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const EventMixin = EventMixinFactory({});\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'event',\n            'nav',\n            'jobBoard',\n            'speakerInfo',\n            'auth'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TodoListForm',\n\n        /**\n         * Specifies what properties we are expecting in this.props\n         */\n        propTypes: {\n            speakerInfo: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired\n        },\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @returns {object}\n         */\n        buildSchema() {\n            return _.assign({}, _buildTodoListSchema(this));\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         *\n         * @returns {*}\n         */\n        render() {\n            return <form\n                ref='TodoList-form'\n                onSubmit={this.Form_onSubmit}>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TodoListFormFactory }\n","/**\n * Generates a TravelView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst TravelViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const {\n        connect\n    } = require('react-redux');\n\n    // Forms\n    const {EventInfoCardFactory} = require('../../components/cards/EventInfoCard');\n    const {\n        TravelFormFactory\n    } = require('../../forms');\n\n    const {\n        TravelListFactory\n    } = require('../../components/list');\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../../actions');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        saveEvent\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const EventInfoCard = EventInfoCardFactory({});\n    const TravelForm = TravelFormFactory({});\n    const TravelList = TravelListFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     * Handles the TravelForm submission\n     *\n     * @param {object} form - Form values\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n        const modifiedEvent = event.get('modifiedEvent');\n\n        // merge in saved data\n        // TODO maybe this should be in the store\n        const mergedEvent = modifiedEvent.merge(form);\n\n        saveEvent(mergedEvent);\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'TravelView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                expandAllTravel: false,\n                toggledTravelId: 0\n            };\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                expandAllTravel\n            } = this.state;\n\n            return <div>\n\n                <EventInfoCard/>\n\n                <TravelList/>\n\n                <TravelForm\n                    formId=\"travelForm\"\n                    onSubmit={(form) => {\n                        _submitHandler(form, this);\n                    }}/>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TravelViewFactory }","/**\n * Generates a NewEventForm component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes DateTools\n */\nconst NewEventFormFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const moment = require('moment');\n    const {\n        is,\n        List\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n    const DELIVERY_METHOD_ICONS = require('../enums/DELIVERY_METHOD_ICONS').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Components\n    const {PanelFactory} = require('../components/Panel');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        isEspeakers,\n        isSolutionTree\n    } = require('../util/Platform').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const Panel = PanelFactory({});\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateTodoListOptions;\n    let _generateBureauOptions;\n    let _generateStatusOptions;\n    let _updateHeaderActions;\n    let _generatePdRepOptions;\n    let _generateSalesRepOptions;\n    let _generateProjectManagerOptions;\n\n    /**\n     * Generates the Select options for the TodoList Selector\n     *\n     * @param {object} displayLists\n     * @param {object} selectedSpeaker\n     * @returns {Array}\n     * @private\n     */\n    _generateTodoListOptions = (displayLists, selectedSpeaker) => {\n        let todoLists = List();\n        let options = [];\n        displayLists.get('perspeaker').map((speaker) => {\n            if (speaker) {\n                if (speaker.get('sid').toString() === selectedSpeaker.get('sid').toString() && List.isList(speaker.get('todolists'))) {\n                    todoLists = speaker.get('todolists');\n                }\n            }\n        });\n\n        todoLists.map((todoList) => {\n            if (todoList) {\n                options.push({\n                    text: todoList.get('listname'),\n                    value: todoList.get('id').toString()\n                });\n            }\n        });\n\n        return options;\n    };\n\n    /**\n     * Generates the Select options for the Bureau Selector\n     *\n     * @param {array} bureaus - Collection of bureaus from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateBureauOptions = (bureaus) => {\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n\n        bureaus.map((bureau) => {\n            options.push({\n                text: bureau.get('bname'),\n                value: bureau.get('bid')\n            });\n        });\n\n        return options;\n    };\n\n    /**\n     * Generates the Select options for the PD Rep Selector\n     *\n     * @param {array} pd_reps - Collection of pd_reps from the server\n     * @returns {Array}\n     * @private\n     */\n    _generatePdRepOptions = (pd_reps) => {\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n\n        pd_reps.map((pd_rep) => {\n            options.push({\n                text: pd_rep.get('fullname'),\n                value: pd_rep.get('id').toString()\n            });\n        });\n\n        return _.sortBy(options, 'text');\n    };\n\n    /**\n     * Generates the Select options for the Sales Rep Selector\n     *\n     * @param {array} pd_reps - Collection of sales_reps from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateSalesRepOptions = (sales_reps) => {\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n\n        sales_reps.map((sales_rep) => {\n            options.push({\n                text: sales_rep.get('fullname'),\n                value: sales_rep.get('id').toString()\n            });\n        });\n\n        return _.sortBy(options, 'text');\n    };\n\n    /**\n     * Generates the Select options for the Project Manager Selector\n     *\n     * @param {array} pd_reps - Collection of project managers from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateProjectManagerOptions = (pms) => {\n        let options = [];\n\n        options.push({\n            text: getText('None -- Direct'),\n            value: '0'\n        });\n\n        pms.map((pm) => {\n            options.push({\n                text: pm.get('fullname'),\n                value: pm.get('id').toString()\n            });\n        });\n\n        return _.sortBy(options, 'text');\n    };\n\n    /**\n     * Generates the Select options for the Status Selector\n     *\n     * @param {array} eventStatuses - Collection of event statuses from the server\n     * @returns {Array}\n     * @private\n     */\n    _generateStatusOptions = (eventStatuses) => {\n        let options = [];\n\n        eventStatuses.map((status) => {\n            options.push({\n                text: status.get('description'),\n                value: status.get('description')\n            });\n        });\n\n        return options;\n    };\n\n    _updateHeaderActions = (spec) => {\n        const {\n            props,\n            isDirty,\n            inst\n        } = spec;\n\n        const {\n            dispatch\n        } = props;\n\n        let actions = [];\n\n        if (isDirty) {\n            actions = [{\n                type: BTN.SAVE,\n                onClick: inst.onSubmit\n            }, {\n                type: BTN.DISCARD,\n                onClick: inst.onDiscard\n            }];\n        }\n\n        dispatch(setHeaderActions(actions));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const EventMixin = EventMixinFactory({\n        overrides: {\n            updateHeaderActions() {\n                const {\n                    view\n                } = this.props;\n\n                _updateHeaderActions({\n                    props: this.props,\n                    isDirty: view.get('dirty'),\n                    inst: this\n                });\n            },\n            componentWillReceiveProps(nextProps) {\n                const nextView = nextProps.view;\n                const currentView = this.props.view;\n\n\n                // update header if dirty changes\n                if (nextView.get('dirty') !== currentView.get('dirty')) {\n                    _updateHeaderActions({\n                        props: nextProps,\n                        isDirty: nextView.get('dirty'),\n                        inst: this\n                    });\n                }\n            }\n        }\n    });\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            companyData: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'nav',\n            'view',\n            'speakerInfo',\n            'jobBoard',\n            'event',\n            'displayData',\n            'companyData',\n            'auth'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass(_.assign({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'NewEventForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        /**\n         * Generates the full schema to build the form inputs\n         *\n         * @returns {object}\n         */\n        buildSchema() {\n            return _.assign({}, this.buildEventDetailsSchema());\n        },\n\n        /**\n         * Generates the Event Details schema for form inputs\n         *\n         * @returns {object}\n         */\n        buildEventDetailsSchema() {\n            const {\n                companyData,\n                displayData,\n                speakerInfo,\n                auth\n            } = this.props;\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n            const displayLists = displayData.get('displayLists');\n            const bureauMap = displayData.get('bureauMap');\n            const {\n                data\n            } = this.state;\n\n            let schema = _.assign(this.buildStartStopDateTimeSchema(data), {\n                organization: {\n                    name: \"organization\",\n                    type: \"text\",\n                    label: getText('Presenting to'),\n                    iconClass: 'business',\n                    validate: v.required\n                },\n                status: {\n                    name: \"status\",\n                    type: \"select\",\n                    iconClass: 'settings',\n                    label: getText('Status'),\n                    options: _generateStatusOptions(displayLists.get('universal').get('eventstatuses')),\n                    validate: (s) => {\n                        const authedUserSession = auth.get('authedUserSession');\n\n                        // TODO: wouldn't it be better to just not include the option if they aren't PRO?\n                        let has_pro = _.includes(authedUserSession.get('getSIDsAtPackageLevel')('PRO'), esUtils.toInt(selectedSpeaker.get('sid')));\n\n                        if (s === \"lead\" && !has_pro) {\n                            return getText(\"Only PRO users can have '%1$s' events\", {\n                                params: [s]\n                            });\n                        }\n\n                        return true;\n                    }\n                },\n                personal: {\n                    name: \"personal\",\n                    type: \"toggle\",\n                    label: getText('Personal/Blackout')\n                },\n                deliveryMethod: {\n                    name: \"deliveryMethod\",\n                    type: \"select\",\n                    iconClass: 'fa-slideshare',\n                    label: getText((isSolutionTree() ? 'Delivery Method' : 'Event Type')),\n                    options: [{\n                        text: DELIVERY_METHOD_ICONS['0'].label,\n                        value: '0'\n                    }, {\n                        text: DELIVERY_METHOD_ICONS['1'].label,\n                        value: '1'\n                    }, {\n                        text: DELIVERY_METHOD_ICONS['3'].label,\n                        value: '3'\n                    }, {\n                        text: DELIVERY_METHOD_ICONS['2'].label,\n                        value: '2'\n                    }]\n                }\n            });\n\n            // if (isSolutionTree()) {\n            //     _.set(schema, [\"pd_rep_id\"], {\n            //         name: \"pd_rep_id\",\n            //         type: \"select\",\n            //         label: 'PD Rep',\n            //         options: _generatePdRepOptions(companyData.get('companyLists').get('pd_reps'))\n            //     });\n            //     _.set(schema, [\"sales_rep_id\"], {\n            //         name: \"sales_rep_id\",\n            //         type: \"select\",\n            //         label: 'Sales Rep',\n            //         options: _generateSalesRepOptions(companyData.get('companyLists').get('sales_reps'))\n            //     });\n            //     _.set(schema, [\"project_manager_id\"], {\n            //         name: \"project_manager_id\",\n            //         type: \"select\",\n            //         label: 'Project Manager',\n            //         options: _generateProjectManagerOptions(companyData.get('companyLists').get('project_managers'))\n            //     });\n            // }\n\n            /**\n             * Only add bureau, zoomUrl, and todolists if we are on espeakers\n             */\n            if (isEspeakers()) {\n                _.set(schema, [\"bureau\"], {\n                    name: \"bureau\",\n                    type: \"filteredSelect\",\n                    label: 'Bureau',\n                    optionMap: bureauMap.set('0', getText('None -- Direct')),\n                    optionBuilder: () => {\n                        return _generateBureauOptions(displayLists.get('universal').get('bureaus'));\n                    }\n                });\n                _.set(schema, [\"zoomUrl\"], {\n                    name: \"zoomUrl\",\n                    type: \"textarea\",\n                    label: 'Meeting URL',\n                    iconClass: 'fa-slideshare'\n                });\n                _.set(schema, [\"todolists\"], {\n                    name: 'todolists',\n                    type: 'select',\n                    label: getText('Actions List'),\n                    iconClass: 'fa-check-square-o',\n                    options: _generateTodoListOptions(displayLists, selectedSpeaker)\n                });\n            }\n\n            /**\n             * Disable deliveryMethod, personal and status if we are on SolutionTree\n             */\n            if (isSolutionTree()) {\n                _.map(_.pick(schema, ['deliveryMethod', 'personal', 'status']), (field, key) => {\n                    field['disabled'] = true;\n\n                    if (key === 'deliveryMethod') {\n                        field['type'] = 'hidden';\n                    }\n\n                    return field;\n                });\n            }\n\n            return schema;\n        },\n\n        /**\n         * Sets the initial values of a form\n         *\n         * @returns {object}\n         */\n        getInitialValues() {\n            let initValues = {\n                bureau: '0',\n                status: 'held',\n                deliveryMethod: '1',\n                todolists: '0',\n                personal: false\n            };\n\n            if (!isEspeakers()) {\n                initValues = _.assign(initValues, {\n                    personal: true,\n                    status: 'confirmed'\n                });\n            }\n\n            return initValues;\n        },\n\n        /**\n         * Submits the form when changes are saved.\n         *\n         * @returns {object}\n         */\n        onSubmit(event) {\n            this.Form_onSubmit(event);\n        },\n\n        /**\n         * Determines whether prerequisite Date/Time values are required\n         *\n         * @returns {object}\n         */\n        onFormChanged(name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            let newData = this.onFormChangedStartStopDateTime(name, value);\n\n            if (newData) {\n                this.setState({\n                    data: newData\n                });\n            }\n\n            const viewDirty = this.Form_areChangesMade();\n\n            dispatch(toggleViewDirty(viewDirty));\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return <form\n                ref='newEvent-form'\n                onSubmit={this.Form_onSubmit}>\n\n                {this.generateFields({fields: this.buildEventDetailsSchema()})}\n            </form>;\n        }\n    }));\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { NewEventFormFactory }","/**************************************************************************\n *\n * Imports\n *\n *************************************************************************/\n\nconst _ = require('lodash');\n\n/**************************************************************************\n *\n * Private Members\n *\n *************************************************************************/\n\n/**************************************\n * Variables\n *************************************/\n\nconst EVENT_STATUSES = {//TODO keep in sync with class.Event.php\n    held: 0,\n    confirmed: 1,\n    canceled: 9,\n    lead: 10,\n    zimbra: 11,\n    postponed: 12,\n    closed: 13\n};\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\n\nexport default {\n    EVENT_STATUSES,\n    EVENT_STATUSES_by_num: _.fromPairs(_.map(_.toPairs(EVENT_STATUSES), (pair) => {\n        return pair.reverse();\n    })),\n\n    EVENT_STATUS_PRIORITY: {canceled: 0, closed: 1, postponed: 2, lead: 3, held: 4, confirmed: 5}\n};\n\n","/**\n * Generates a ConfirmedEventsView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst ConfirmedEventsViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const _ = require('lodash');\n    const {\n        RadioServiceMixin,\n        radio\n    } = require('react-pubsub-via-radio.js');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateTools = require('../../util/DateTools').default({});\n\n    // Enums\n    const {\n        RADIOS,\n    } = require('../../enums');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            speakerInfo: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'speakerInfo'\n        ]\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debugging message\n         */\n        displayName: 'ConfirmedEventsView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin, ViewMixin],\n        /**\n         * Sets up the Service radio channels we are interacting with\n         *\n         * @returns {object}\n         */\n        RadioService_setup() {\n            const {\n                dispatch\n            } = this.props;\n\n            let radios = {};\n\n            // radios[RADIOS.services.LOAD_JOBS] = {\n            //     key() {\n            //         const {\n            //             speakerInfo\n            //         } = this.props;\n            //\n            //         return speakerInfo.get('selectedSpeaker').get('sid').toString();\n            //     },\n            //     on: {\n            //         waiting() {\n            //             dispatch(showLoading());\n            //         },\n            //         succeeded(data) {\n            //             dispatch(hideLoading());\n            //\n            //             dispatch(updateDashboardStore(_.assign({\n            //                 lastUpdated: new Date()\n            //             }, data)));\n            //         },\n            //         failed(error) {\n            //             dispatch(hideLoading());\n            //\n            //             // TODO: i18n error messages\n            //             dispatch(setMessage({\n            //                 type: 'error',\n            //                 text: error\n            //             }));\n            //         }\n            //     }\n            // };\n\n            return radios;\n        },\n        /**\n         * Triggers when the component receives a new set of properties.  Refreshes the screen if a new selectedSpeaker\n         * is passed in.\n         *\n         * @param nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const {\n                speakerInfo\n            } = nextProps;\n\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n            const currentSpeakerInfo = this.props.speakerInfo;\n            const currentSelectedSpeaker = currentSpeakerInfo.get('selectedSpeaker');\n\n            let speakerMismatch = (currentSelectedSpeaker &&\n                selectedSpeaker &&\n                selectedSpeaker.get('sid') &&\n                currentSelectedSpeaker.get('sid') &&\n                currentSelectedSpeaker.get('sid').toString() !== selectedSpeaker.get('sid').toString());\n\n            if (speakerMismatch) {\n                // loadDashboard({\n                //     sid: selectedSpeaker.get('sid')\n                // });\n            }\n        },\n        /**\n         * Triggers after the component and all child components render.  Calls to load the dashboard data\n         */\n        componentDidMount() {\n            const {\n                speakerInfo\n            } = this.props;\n\n            // if (speakerInfo &&\n            //     speakerInfo.get('selectedSpeaker') &&\n            //     speakerInfo.get('selectedSpeaker').get('sid') && !dashboard.get('lastUpdated')) {\n            //     // loadDashboard({\n            //     //     sid: speakerInfo.get('selectedSpeaker').get('sid')\n            //     // });\n            // }\n        },\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            return <div>\n                <h1>Confirmed Events</h1>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ConfirmedEventsViewFactory }","/**\n * Generates a JobApplyView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobApplyViewFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {JobApplyFormFactory} = require('../../forms/JobApplyForm');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        sendJobApplication\n    } = JobBoardActionsFactory();\n    const {\n        loadShortProfile\n    } = SpeakerInfoActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    const JobApplyForm = JobApplyFormFactory();\n    const FormLoading = FormLoadingFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _submitHandler;\n\n    /**\n     * Handles the DetailsForm submission\n     *\n     * @param {object} form - Form values\n     * @param {object} inst\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            jobBoard,\n            speakerInfo\n        } = inst.props;\n\n        let params = {\n            eid: jobBoard.selectedJob.jobSummary.get('event_id'),\n            sid: speakerInfo.selectedSpeaker.get('sid'),\n            content: form,\n            agreement: _.get(form, ['agreement'], false)\n        };\n\n\n        sendJobApplication(params);\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobApplyView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n            };\n        },\n        componentDidMount() {\n            const {\n                speakerInfo\n            } = this.props;\n\n            loadShortProfile({\n                sid: speakerInfo.selectedSpeaker.get('sid')\n            });\n        },\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            const {\n                jobBoard\n            } = this.props;\n\n            return (\n                <FormLoading>\n\n                    <JobApplyForm\n                        ref=\"jobApplyForms\"\n                        onSubmit={(form) => {\n                            _submitHandler(form, this);\n                        }}/>\n\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobApplyViewFactory }","/**\n * Generates a JobApplyConfirmationView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobApplyConfirmationViewFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Factories\n    const RaisedButton = require('material-ui/RaisedButton').default;\n    const {DisplayFieldFactory} = require('../../components/DisplayField');\n    const {MessageContainerFactory} = require('../../components/messages/MessageContainer');\n    const FlatButton = require('material-ui/FlatButton').default;\n    const Paper = require('material-ui/Paper').default;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n    } = JobBoardActionsFactory();\n    const {\n        addSubView,\n        setSubView\n    } = NavActionsFactory();\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const DisplayField = DisplayFieldFactory({});\n    const MessageContainer = MessageContainerFactory({});\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let applyClickHandler = undefined;\n\n    applyClickHandler = (dispatch) => {\n        dispatch(addSubView(VIEWS.jobSubViews.JOB_APPLY_VIEW));\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobApplyConfirmationView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            const {\n                dispatch,\n                displayData,\n                jobBoard\n            } = this.props;\n\n            let selectedJob = jobBoard.selectedJob;\n            let jobSummary = selectedJob.jobSummary;\n            let jobDetail = selectedJob.jobDetail;\n\n            return (\n                <div>\n                    <DisplayField label={getText(\"Good job!\")} displayText={getText(\"You have let the client know you're interested in their work. They will receive your message along with a link to your eSpeakers profile, and they will evaluate you and other candidates to find the right expert for their needs.\")}/>\n\n                    <DisplayField label={getText(\"Keep an eye on your inbox.\")}\n                                  labelStyle={{fontStyle: \"italic\"}}\n                                  displayText={getText(\"You may hear back in the next day with further questions or with an offer from them. It is possible you will not get a response, even though we encourage clients to communicate with all applicants at every decision point.\")}/>\n\n                    <div style={{\n                        width: '100%',\n                        textAlign: 'center'\n                    }}>\n                        <Paper style={{\n                            margin: 'auto',\n                            textAlign: 'center',\n                            display: 'inline-block',\n                        }} zDepth={2}>\n                            <img className=\"screenshot_shadow\" src=\"img/apply_preview.png\" />\n                        </Paper>\n                    </div>\n\n                    <DisplayField>\n                        <div style={{fontStyle: \"italic\", color: mainTheme.mutedFontColor}}>\n                            {getText(\"Buyer receives email with your photo and link to your profile.\")}\n                        </div>\n                    </DisplayField>\n\n                    <FlatButton primary={true} label={getText(\"View in Leads & Offers\")} onClick={() => {\n                        dispatch(setSubView([VIEWS.jobSubViews.LEAD_OFFER_DETAIL_VIEW]));\n                    }}/>\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobApplyConfirmationViewFactory }","/**\n * Generates a JobBoardView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst JobBoardViewFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const _ = require('lodash');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateTools = require('../../util/DateTools').default({});\n\n    // Enums\n    const RADIOS = require('../../enums/RADIOS').default;\n\n    // Lists\n    const {\n        JobListFactory\n    } = require('../../components/list');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        JobBoardActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    // Lists\n    const JobList = JobListFactory({});\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        updateJobBoardStore,\n        loadJobBoard\n    } = JobBoardActionsFactory({});\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'jobBoard',\n            'speakerInfo'\n        ]\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debugging message\n         */\n        displayName: 'JobBoardView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n        /**\n         * Triggers when the component receives a new set of properties.  Refreshes the screen if a new selectedSpeaker\n         * is passed in.\n         *\n         * @param nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const {\n                speakerInfo\n            } = nextProps;\n\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n            const currentSpeakerInfo = this.props.speakerInfo;\n            const currentSelectedSpeaker = currentSpeakerInfo.get('selectedSpeaker');\n\n            let speakerMismatch = (currentSelectedSpeaker &&\n                selectedSpeaker &&\n                selectedSpeaker.get('sid') &&\n                currentSelectedSpeaker.get('sid') &&\n                currentSelectedSpeaker.get('sid').toString() !== selectedSpeaker.get('sid').toString());\n\n            if (speakerMismatch) {\n                loadJobBoard();\n            }\n        },\n        /**\n         * Triggers after the component and all child components render.  Calls to load the dashboard data\n         */\n        componentDidMount() {\n            const {\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            if (speakerInfo &&\n                speakerInfo.get('selectedSpeaker') &&\n                speakerInfo.get('selectedSpeaker').get('sid') && !jobBoard.get('lastUpdated')) {\n                loadJobBoard();\n            }\n        },\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            return <div>\n                <JobList/>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobBoardViewFactory }","/**\n * Generates a JobDetailView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobDetailViewFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Factories\n    const RaisedButton = require('material-ui/RaisedButton').default;\n    const {ChipperFactory} = require('../../components/Chipper');\n    const {DisplayFieldFactory} = require('../../components/DisplayField');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {JobInfoCardFactory} = require('../../components/cards/JobInfoCard');\n    const {MessageContainerFactory} = require('../../components/messages/MessageContainer');\n    const {MeetingNotesFactory} = require('../../components/MeetingNotes');\n\n    const MessageModel = require('../../stores/models/MessageModel').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const getEventPresenterTypeText = require('ES/utils/getEventDeliveryMethodText');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getBudget,\n        getBuyerName,\n        getCommission,\n        getEventDate,\n        getNotes,\n        getShortListDescription,\n        getTopics,\n        loadJobAgreement,\n        loadJobEvent\n    } = JobBoardActionsFactory();\n    const {\n        addSubView\n    } = NavActionsFactory();\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const {\n        setHeaderActions\n    } = ViewActionsFactory({});\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    const JobInfoCard = JobInfoCardFactory();\n    const FormLoading = FormLoadingFactory({});\n    const DisplayField = DisplayFieldFactory({});\n    const MessageContainer = MessageContainerFactory({});\n    const MeetingNotes = MeetingNotesFactory({});\n    const Chipper = ChipperFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let applyClickHandler = undefined;\n    let _getEventType = undefined;\n    let _getFormat = undefined;\n\n    applyClickHandler = (dispatch) => {\n        dispatch(addSubView(VIEWS.jobSubViews.JOB_APPLY_VIEW));\n    };\n\n    _getEventType = (job) => {\n        const dm = job.get('deliverymethod');\n        const location = job.get('location');\n        const dmObj = DELIVERY_METHOD_ICONS[dm];\n\n        if(dmObj) {\n            return getText(\"%1$s in %2$s\", {\n                params: [dmObj.label, location]\n            });\n        }\n\n        return location;\n    };\n\n    _getFormat = (selectedJob, displayData) => {\n        const jobSummary = selectedJob.jobSummary;\n        const jobDetail = selectedJob.jobDetail;\n\n        if(!jobDetail)\n            return null;\n\n        const audienceSize = jobDetail.get('audienceSize');\n        const language = jobDetail.get('event').get('language');\n        const DisplayList = displayData.displayLists.toJS();\n\n        let formatStr = getEventPresenterTypeText(_.assign({}, jobSummary.toJS(), jobDetail.toJS(), {\n            deliveryMethod: jobSummary.get('deliverymethod')\n        }), DisplayList);\n        formatStr += ' ';\n\n        if(_.isString(audienceSize) && audienceSize.length > 0) {\n            formatStr += ` to ${audienceSize}`;\n        }\n\n        formatStr += ' in ';\n        if(_.has(DisplayList.universal.languages, language)) {\n            formatStr += DisplayList.universal.languages[language];\n        } else {\n            formatStr += language;\n        }\n\n        return formatStr;\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired\n        }\n    });\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            updateHeaderActions() {\n                const {\n                    dispatch\n                } = this.props;\n\n                let actions = [{\n                    iconClass: 'assignment',\n                    onClick: () => {\n                        applyClickHandler(dispatch);\n                    }\n                }];\n\n                dispatch(setHeaderActions(actions));\n            }\n        }\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobDetailView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n        /**\n         * Triggers after the component and all child components render.  Calls to load the dashboard data\n         */\n        componentDidMount() {\n            const {\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            loadJobAgreement({\n                event_id: jobBoard.selectedJob.jobSummary.get('event_id'),\n                speaker_id: speakerInfo.selectedSpeaker.get('sid')\n            });\n\n            loadJobEvent({\n                event_id: jobBoard.selectedJob.jobSummary.get('event_id')\n            });\n        },\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            const {\n                dispatch,\n                displayData,\n                jobBoard\n            } = this.props;\n\n            let selectedJob = jobBoard.selectedJob;\n            let jobSummary = selectedJob.jobSummary;\n            let jobDetail = selectedJob.jobDetail;\n            const topics = jobSummary.get('topics');\n\n            const chipStyles = {\n            };\n\n            // TODO: some visual treatment here\n            if(!jobDetail)\n                return <div></div>;\n\n            let commissionDetails = getCommission({jobDetail, displayData});\n\n            return (\n                <FormLoading>\n\n                    <JobInfoCard/>\n\n                    <MessageContainer message={MessageModel({\n                        type: 'warning',\n                        text: getText('This is a request for proposal from a client. If your skills are a good match, use the Apply Now button below to open a conversation with the client.')\n                    })}/>\n\n                    <MeetingNotes jobDetail={jobDetail}/>\n\n                    <DisplayField\n                        label={getText('Speaking To:')}\n                        displayText={jobSummary.get('event_name')}/>\n\n                    <DisplayField\n                        label={getText('Budget:')}\n                        displayText={getBudget(jobSummary)}/>\n\n                    <DisplayField\n                        label={getText('Event Date:')}\n                        displayText={getEventDate(jobSummary)}/>\n\n                    <DisplayField\n                        label={getText('Event Type:')}\n                        displayText={_getEventType(jobSummary)}/>\n\n                    <DisplayField\n                        label={getText('Topic:')}>\n\n                        <Chipper chipLabels={getTopics(jobSummary)}/>\n                    </DisplayField>\n\n                    <DisplayField\n                        label={getText('Format:')}\n                        displayText={_getFormat(selectedJob, displayData)}/>\n\n                    <DisplayField label={getText(\"%1$s Finder's Fee\", {\n                            params: commissionDetails.display\n                        })}\n                        displayText={[commissionDetails.message, getShortListDescription(jobDetail, displayData)]}\n                    />\n\n                    <MessageContainer text={getText('Applying to this job opens a conversation with the client, and adds you to their shortlist for the event.')}/>\n\n                    <MessageContainer text={getText('You may apply to up to 3 jobs in a 7-day period, so be picky -- only apply to jobs for which you are an especially good match.')}/>\n\n                    <div style={{\n                        padding: '10px',\n                        marginBottom: '15px'\n                    }}>\n                        <RaisedButton label={getText('Apply Now')}\n                                      primary={true}\n                                      fullWidth={true}\n                                      onClick={(e) => {\n                                          stopProp(e);\n                                          applyClickHandler(dispatch);\n                                      }}/>\n                    </div>\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobDetailViewFactory }","/**\n * Generates a JobMessagesView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobMessagesViewFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const moment = require('moment');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {JobMessageCardFactory} = require('../../components/cards/JobMessageCard');\n\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getBuyerName,\n        getMessageSpeakerName,\n        loadJobEvent,\n        loadJobMessages\n    } = JobBoardActionsFactory();\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const JobMessageCard = JobMessageCardFactory({});\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired\n        }\n    });\n\n    const ViewMixin = ViewMixinFactory({\n        overrides: {\n            getHeaderText() {\n                const {\n                    jobBoard\n                } = this.props;\n\n                const selectedJob = jobBoard.selectedJob;\n                const jobDetail = selectedJob.jobDetail;\n\n                // We may have come from PUSH and job details not loaded just yet\n                if(!jobDetail)\n                    return getText('Messages');\n\n                const buyerName = getBuyerName(jobDetail);\n\n                return getText('Message %1$s', {params: [buyerName]});\n            }\n        }\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobMessagesView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n\n        componentDidMount() {\n            const {\n                event,\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            const selectedJob = jobBoard.selectedJob;\n            const jobSummary = selectedJob.jobSummary;\n            const jobDetail = selectedJob.jobDetail;\n            const modifiedEvent = event.modifiedEvent;\n\n            let eid;\n\n            if(modifiedEvent) {\n                eid = modifiedEvent.get('eid');\n            } else if(jobSummary) {\n                eid = jobSummary.get('event_id');\n            }\n\n            // We may come here directly via Push\n            if(!jobDetail) {\n                loadJobEvent({\n                    event_id: eid\n                });\n            }\n\n            loadJobMessages({\n                sid: speakerInfo.selectedSpeaker.get('sid'),\n                event_id: eid\n            });\n        },\n        /**\n         * Invoked immediately after the component's updates are\n         * flushed to the DOM.\n         *\n         * @param prevProps\n         * @param prevState\n         */\n        componentDidUpdate(prevProps, prevState) {\n            const prevJobDetail = _.get(prevProps.jobBoard.toJS(), 'selectedJob.jobDetail', undefined);\n            const nextJobDetail = _.get(this.props.jobBoard.toJS(), 'selectedJob.jobDetail', undefined);\n\n            if(!prevJobDetail && nextJobDetail) {\n                this.updateHeaderText();\n            }\n        },\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            const {\n                dispatch,\n                displayData,\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            const selectedJob = jobBoard.selectedJob;\n            const jobDetail = selectedJob.jobDetail;\n            const messages = selectedJob.messages;\n            const buyerName = (jobDetail ? getBuyerName(jobDetail.get('event')) : '');\n\n            return (\n                <div>\n                    {messages ? messages.sort((messageA, messageB) => {\n                        let createdA = moment(new Date(_.get(messageA.toJS(), \"created_ISO8601\", null)));\n                        let createdB = moment(new Date(_.get(messageB.toJS(), \"created_ISO8601\", null)));\n\n                        if(createdA.isBefore(createdB)) {\n                            return -1;\n                        } else if(createdB.isBefore(createdA)) {\n                            return 1;\n                        }\n\n                        return 0;\n                    }).map((message, i) => {\n\n                        const msg = message.toJS();\n                        let is_you = false;\n                        let name;\n                        if(msg.sender_speaker_id > 0){\n                            is_you = true;\n                            name = getMessageSpeakerName(displayData, msg.sender_speaker_id);\n                        }else{\n                            name = buyerName;\n                        }\n\n                        return <JobMessageCard key={`message-${i}`}\n                                               msg={msg}\n                                               senderName={name}\n                                               isYou={is_you}\n                                               lastItem={i === (messages.count() - 1)}/>;\n                    }) : null}\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobMessagesViewFactory }","/**\n * Generates a LeadOfferDetailView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst LeadOfferDetailViewFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    const OFFER_STATUS = require('../../enums/OFFER_STATUS').default;\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Factories\n    const {DisplayFieldFactory} = require('../../components/DisplayField');\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {JobInfoCardFactory} = require('../../components/cards/JobInfoCard');\n    const {SectionHeaderFactory} = require('../../components/SectionHeader');\n    const {MeetingNotesFactory} = require('../../components/MeetingNotes');\n    const {ActionDescriptionFactory} = require('../../components/ActionDescription');\n    const {JobButtonFactory} = require('../../components/JobButton');\n    const FlatButton = require('material-ui/FlatButton').default;\n    const {IconLabel} = require('../../components/IconLabel');\n    const Chip = require('material-ui/Chip').default;\n    const Avatar = require('material-ui/Avatar').default;\n    const {MessageContainerFactory} = require('../../components/messages/MessageContainer');\n    const {JobOfferSectionFactory} = require('../../components/JobOfferSection');\n\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // Mixins\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        MessageActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getBuyerName,\n        getCompanyName,\n        getEventDate,\n        getLedgerData,\n        getMyInfo,\n        getOfferEventStatus,\n        getOfferStatusIndexByJob,\n        getOfferStatusIndexByStatus,\n        loadJobAgreement,\n        loadJobEvent\n    } = JobBoardActionsFactory();\n    const {\n        setMessage\n    } = MessageActionsFactory();\n    const {\n        addSubView\n    } = NavActionsFactory();\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions\n    } = ViewActionsFactory({});\n    const DisplayField = DisplayFieldFactory({});\n    const MessageContainer = MessageContainerFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n    const MeetingNotes = MeetingNotesFactory({});\n    const JobOfferSection = JobOfferSectionFactory({});\n    const JobButton = JobButtonFactory({});\n    const ActionDescription = ActionDescriptionFactory({});\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    const JobInfoCard = JobInfoCardFactory();\n    const FormLoading = FormLoadingFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let buildStepContent = undefined;\n\n    buildStepContent = (offerStatus) => {\n        const sharedDisplayText = getText('An offer is a binding contract between you and the buyer for the service you will provide and the payment they will make.');\n\n        const styles = {\n            chip: {\n                margin: 4,\n            },\n            wrapper: {\n                display: 'flex',\n                flexWrap: 'wrap',\n            },\n        };\n\n        const buildChip = (label) => {\n            return <Chip backgroundColor={mainTheme.primaryColor} labelColor={mainTheme.foregroundColor}\n                         style={styles.chip}>{label}</Chip>;\n        };\n\n        if (!offerStatus || !offerStatus.nowItems || !offerStatus.nowItems.count()) {\n            return (\n                <div>\n                    <MessageContainer type=\"warning\">\n                        {getText('Start a conversation with the client to find out what their needs are. Use the message area.')}\n                    </MessageContainer>\n\n                    <DisplayField label={offerStatus.areaTitle} displayText={sharedDisplayText}/>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div>\n                    <DisplayField label={getText('now')}>\n                        <div style={styles.wrapper}>\n                            {offerStatus.nowItems.map((nowItem) => {\n                                return <div>{buildChip(nowItem)}</div>;\n                            })}\n                        </div>\n                    </DisplayField>\n\n                    <DisplayField label={getText('next')}>\n                        <div style={styles.wrapper}>\n                            {offerStatus.nextItems.map((nextItem) => {\n                                return <div>{buildChip(nextItem)}</div>;\n                            })}\n                        </div>\n                    </DisplayField>\n                </div>\n\n                <DisplayField label={offerStatus.areaTitle} displayText={sharedDisplayText}/>\n            </div>\n        );\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired\n        }\n    });\n\n    const ViewMixin = ViewMixinFactory({\n        updateHeaderActionsOverride: (inst, props) => {\n            let currentProps = props || inst.props;\n\n            const {\n                jobBoard,\n                speakerInfo,\n                dispatch\n            } = currentProps;\n\n            const myInfo = getMyInfo({\n                jobBoard,\n                speakerInfo,\n                job: jobBoard.selectedJob\n            });\n\n            if (myInfo.n_unread) {\n                dispatch(setHeaderActions([\n                    {\n                        type: 'custom',\n                        node: (\n                            <div style={{\n                                display: 'flex'\n                            }}>\n                                {IconMap.getButton('message',\n                                    {\n                                        onClick: (event) => {\n                                            stopProp(event);\n\n                                            dispatch(addSubView(VIEWS.jobSubViews.JOB_MESSAGES_VIEW));\n                                        },\n                                        style: {\n                                            paddingRight: 0\n                                        }\n                                    },\n                                    {\n                                        color: mainTheme.headerIconColor\n                                    })}\n\n                                <div style={{\n                                    marginTop: 20,\n                                    marginLeft: -15,\n                                    marginRight: 15\n                                }}>\n                                    <Avatar size={20}\n                                            backgroundColor={mainTheme.errorBackgroundColor}>{myInfo.n_unread}</Avatar>\n                                </div>\n\n                            </div>\n                        )\n                    }\n                ]));\n            } else {\n                dispatch(setHeaderActions([\n                    {\n                        onClick: (event) => {\n                            stopProp(event);\n\n                            dispatch(addSubView(VIEWS.jobSubViews.JOB_MESSAGES_VIEW));\n                        },\n                        label: getText('Messages'),\n                        iconClass: 'message'\n                    }\n                ]));\n            }\n        }\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'LeadOfferDetailView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n        /**\n         * Triggers after the component and all child components render.  Calls to load the dashboard data\n         */\n        componentDidMount() {\n            const {\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            loadJobAgreement({\n                event_id: jobBoard.selectedJob.jobSummary.get('event_id'),\n                speaker_id: speakerInfo.selectedSpeaker.get('sid')\n            });\n\n            loadJobEvent({\n                event_id: jobBoard.selectedJob.jobSummary.get('event_id')\n            });\n        },\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            const {\n                dispatch,\n                displayData,\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            const selectedJob = jobBoard.selectedJob;\n            const jobSummary = selectedJob.jobSummary;\n            const jobDetail = selectedJob.jobDetail;\n            const selectedSpeaker = speakerInfo.selectedSpeaker;\n\n            // TODO: some visual treatment here\n            if (!jobDetail)\n                return <div></div>;\n\n            const offerStatus = getOfferEventStatus(jobDetail.get('event'), selectedSpeaker.get('sid'));\n            const offerAcceptedPlus = getOfferStatusIndexByJob(jobSummary) >= getOfferStatusIndexByStatus(OFFER_STATUS.OFFER_ACCEPTED);\n\n            const chipStyles = {};\n\n            const mpAgreement = _.get(jobDetail.toJS(), ['event', 'MPAgreement', selectedSpeaker.get('sid')]);\n\n            const {\n                fees,\n                grand_total,\n                fee_speaking,\n                fee_materials,\n                fee_travel\n            } = getLedgerData({\n                event: jobDetail.get('event').toJS(),\n                Displaylists: displayData.get('displayLists').toJS(),\n                mp_agreement: mpAgreement\n            });\n\n            let btnList = [];\n\n            if (OFFER_STATUS.WAITING_YOU === offerStatus.key) {\n                btnList.push(getText(\"Accept Client's Offer\"));\n            }\n\n            if (mpAgreement && !mpAgreement.is_accepted) {\n                btnList.push(getText(\"Revise Offer\"));\n            }\n\n            if (!mpAgreement) {\n                btnList.push(getText(\"Make an Offer\"));\n            }\n\n            if (mpAgreement) {\n                btnList.push(getText(\"Withdraw Offer\"));\n            } else {\n                btnList.push(getText(\"Withdraw From Job\"));\n            }\n\n            return (\n                <FormLoading>\n\n                    <JobInfoCard/>\n\n                    <SectionHeader label={offerStatus.status}/>\n\n                    <div>\n                        {buildStepContent(offerStatus)}\n                    </div>\n\n                    <JobOfferSection/>\n\n                    <MeetingNotes jobDetail={jobDetail}/>\n\n                    {mpAgreement ? <ActionDescription mpAgreement={mpAgreement}/> : null}\n\n                    <JobButton label={getText(\"Messages\")} primary clickHandler={() => {\n                        dispatch(addSubView(VIEWS.jobSubViews.JOB_MESSAGES_VIEW));\n                    }}/>\n\n                    {_.map(btnList, (btnLabel, i) => {\n                        return <JobButton key={`job-btn-${i}`}\n                                          label={btnLabel}\n                                          primary={i === 0}\n                                          secondary={i === 1}\n                                          clickHandler={() => {\n                                              dispatch(setMessage({\n                                                  type: 'tip',\n                                                  text: getText(\"To %1$s, use EventCX on your Computer.\", {params: [btnLabel]})\n                                              }));\n                                          }}\n                        />;\n                    })}\n\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LeadOfferDetailViewFactory }","/**\n * Generates a LeadsOffersView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst LeadsOffersViewFactory = (spec) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const _ = require('lodash');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateTools = require('../../util/DateTools').default({});\n\n    // Enums\n    const {\n        RADIOS,\n    } = require('../../enums');\n\n    // Lists\n    const {\n        LeadOfferListFactory\n    } = require('../../components/list');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        JobBoardActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Factories\n    //---------------------------------\n\n    // Lists\n    const LeadOfferList = LeadOfferListFactory({});\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        updateJobBoardStore,\n        loadJobBoard\n    } = JobBoardActionsFactory({});\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'jobBoard',\n            'speakerInfo'\n        ]\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debugging message\n         */\n        displayName: 'LeadOfferView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n        /**\n         * Triggers when the component receives a new set of properties.  Refreshes the screen if a new selectedSpeaker\n         * is passed in.\n         *\n         * @param nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const {\n                speakerInfo\n            } = nextProps;\n\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n            const currentSpeakerInfo = this.props.speakerInfo;\n            const currentSelectedSpeaker = currentSpeakerInfo.get('selectedSpeaker');\n\n            let speakerMismatch = (currentSelectedSpeaker &&\n                selectedSpeaker &&\n                selectedSpeaker.get('sid') &&\n                currentSelectedSpeaker.get('sid') &&\n                currentSelectedSpeaker.get('sid').toString() !== selectedSpeaker.get('sid').toString());\n\n            if (speakerMismatch) {\n                loadJobBoard();\n            }\n        },\n        /**\n         * Triggers after the component and all child components render.  Calls to load the dashboard data\n         */\n        componentDidMount() {\n            const {\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            if (speakerInfo &&\n                speakerInfo.get('selectedSpeaker') &&\n                speakerInfo.get('selectedSpeaker').get('sid') && !jobBoard.get('lastUpdated')) {\n                loadJobBoard();\n            }\n        },\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            return <div>\n                <LeadOfferList/>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LeadsOffersViewFactory }","/**\n * Generates a MUIStatic component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst MUIStaticFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const {MUIIconInputFactory} = require('./MUIIconInput').default;\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const MUIIconInput = MUIIconInputFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            field: PropTypes.object.isRequired,\n            value: PropTypes.string\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIStatic',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {field, value} = this.props;\n\n            return (\n                <MUIIconInput field={field}>\n                    {value}\n                </MUIIconInput>\n            );\n        }\n    });\n}\n\nconst component = MUIStaticFactory({});\n\nexport default {\n    component,\n    MUIStaticFactory\n }","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\nconst PushModel = require('./PushModel').default;\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    authedUserSession: undefined,\n    sessionData: undefined,\n    push: PushModel\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    registrationId: undefined,\n    notification: undefined\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    selectedYear: undefined,\n    selectedMonth: undefined,\n    selectedDay: undefined,\n    selectorYear: undefined,\n    calendarData: Immutable.Map(),\n    calendarDetails: Immutable.Map()\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    companyLists: undefined,\n    timestamp: undefined,\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst {List, Record, Map} = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Record({\n    todoList: List(),\n    activity: List(),\n    pipeline: Map(),\n    upcoming: List(),\n    lastUpdated: undefined\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    displayLists: undefined,\n    bureauMap: undefined,\n    timestamp: undefined,\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst {Record} = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Record({\n    dirty: false,\n    selectedEvent: undefined,\n    modifiedEvent: undefined,\n    selectedTodo: undefined,\n    selectedContact: undefined,\n    selectedNote: undefined,\n    selectedProduct: undefined,\n    selectedService: undefined,\n    selectedStageTime: undefined\n});","const {Record, List} = require('immutable');\n\nexport default Record({\n    key: undefined,\n    display: undefined,\n    status: undefined,\n    areaTitle: undefined,\n    nowItems: List(),\n    nextItems: List(),\n    nowType: undefined,\n    showMessages: () => {\n        return this.nowType !== 'success';\n    }\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\nconst {List, Record, Map} = require('immutable');\n\nconst JobModel = require('./JobModel').default;\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\n\nexport default Record({\n    sids_connected_to_stripe: List(),\n    per_sid: Map(),\n    jobs: List(),\n    selectedJob: JobModel(),\n    lastUpdated: undefined\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    show: false,\n    counter: 0,\n    silentRefresh: false\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst { List, Record } = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Record({\n    mainView: undefined,\n    eventView: undefined,\n    subView: List(),\n    onReturn: undefined,\n    showDrawer: false,\n    changeStamp: 0,\n    onBack: undefined\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    show: false,\n    mode: '',\n    onClick: undefined\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst {List, Record} = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Record({\n    description: undefined,\n    results: List(),\n    noResults: false,\n    searchTerm: '',\n    deepSearch: false,\n    includeCanceled: false,\n    onlyDatelessEvents: false,\n    marketplaceOnly: false,\n    futureOnly: false,\n    autoSearch: false\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    speakerMode: '',\n    selectedSpeaker: undefined,\n    speakerList: Immutable.List()\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst Immutable = require('immutable');\n\nconst TodoViewModel = require('./TodoViewModel').default;\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Immutable.Record({\n    dirty: false,\n    actions: Immutable.List(),\n    headerText: undefined,\n    todoView: TodoViewModel,\n    doSubmitForm: false,\n    doSubmitFormCallback: undefined,\n    keyboardActive: false\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst {Map, Record} = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\n// TODO: refactor this to be flattend up on EventModel with the other \"selected\" items\nexport default Record({\n    todoUndo: Map()\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Balboa = require('ES/services/Balboa');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Radios\nconst RadioService = require('react-pubsub-via-radio.js/service');\nconst {radio} = require('react-pubsub-via-radio.js');\n\n// Utilites\nconst {log} = require('../util/DevTools').default;\n\n// Actions\nconst {TranslateActionsFactory} = require('../actions');\n\nconst {getText} = TranslateActionsFactory({});\n\nconst SharedParams = require('./SharedParams').default;\n\n/******************************************************************************\n *\n * Public Interface\n *\n *****************************************************************************/\nconst init = () => {\n    RadioService(RADIOS.services.LOAD_JOB_BOARD, (data, callback) => {\n\n        let params = {\n        };\n\n        Balboa.api('/search/jobboard', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Load Job Board'), null);\n        });\n    }, (data) => {\n        return RADIOS.services.LOAD_JOB_BOARD;\n    });\n\n    RadioService(RADIOS.services.LOAD_JOB_AGREEMENT, (data, callback) => {\n\n        let params = _.pick(data, ['event_id', 'speaker_id']);\n\n        Balboa.api('/mpagreement/read', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Load Job Agreement'), null);\n        });\n    }, (data) => {\n        return `${data.speaker_id}:${data.event_id}`;\n    });\n\n    RadioService(RADIOS.services.LOAD_JOB_EVENT, (data, callback) => {\n\n        let params = _.pick(data, ['event_id']);\n\n        Balboa.api(`/event/read/${params.event_id}`, _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Load Job Details'), null);\n        });\n    }, (data) => {\n        return `${data.event_id}`;\n    });\n\n    RadioService(RADIOS.services.LOAD_JOB_MESSAGES, (data, callback) => {\n\n        let params = _.pick(data, ['event_id']);\n\n        Balboa.api('/mpmessage/read', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n\n                let message_ids = _.reduce(successResponse.messages, (list, message) => {\n                    if(!(message.sender_speaker_id > 0) && !message.receiver_opened) {\n                        list.push(message.id);\n                    }\n\n                    return list;\n                }, []);\n\n                if(!_.isEmpty(message_ids)) {\n                    radio(RADIOS.services.READ_JOB_MESSAGES).broadcast({\n                        message_ids\n                    });\n                }\n\n                callback(null, {\n                    sid: data.sid,\n                    event_id: data.event_id,\n                    messages: successResponse.messages\n                });\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Load Job Messages'), null);\n        });\n    }, (data) => {\n        return `${data.event_id}`;\n    });\n\n    RadioService(RADIOS.services.READ_JOB_MESSAGES, (data, callback) => {\n        Balboa.api(\"/mpmessage/ireadit\", {\n            ids: data.message_ids\n        }, (successResponse) => {\n            radio(RADIOS.services.LOAD_JOB_BOARD).broadcast();\n            callback(null, successResponse);\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to mark messages as read'), null);\n        });\n    }, (data) => {\n        return RADIOS.services.LOAD_JOB_MESSAGES;\n    });\n\n    RadioService(RADIOS.services.SEND_JOB_MESSAGE, (data, callback) => {\n        let params = {\n            content: data.msg,\n            event_id: data.eid,\n            speaker_id: data.sid\n        };\n\n        Balboa.api('/mpmessage/sendtobuyer', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.message);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Send Job Messages'), null);\n        });\n    }, (data) => {\n        return `${data.eid}-${data.sid}`;\n    });\n\n    RadioService(RADIOS.services.GET_SHORT_PROFILE, (data, callback) => {\n        let params =  {\n            speaker_ids: data.sid\n        };\n\n        Balboa.api('/speaker/shortprofile', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Get Short Profile'), null);\n        });\n    }, (data) => {\n        return data.sid;\n    });\n\n    RadioService(RADIOS.services.SEND_JOB_APPLICATION, (data, callback) => {\n        let params = {\n            content: data.content,\n            event_id: data.eid,\n            speaker_id: data.sid,\n            agreement: data.agreement\n        };\n\n        Balboa.api('/mpmessage/applytopublicjob', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.message);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Apply to Job'), null);\n        });\n    }, (data) => {\n        return `${data.eid}-${data.sid}`;\n    });\n};\n\nconst calls = {};\ncalls[RADIOS.services.LOAD_JOB_BOARD] = (params, callback) => {\n\n    Balboa.api('/search/jobboard', _.assign(params, SharedParams), (successResponse) => {\n        if (successResponse.success === true) {\n            callback(null, successResponse.data);\n        } else {\n            callback(successResponse.message, null);\n        }\n    }, (failureResponse) => {\n        callback((failureResponse && failureResponse.message) || getText('Failed to Load Job Board'), null);\n    });\n};\n\nexport default {\n    init,\n    calls\n}","/**\n * Creates the LoadingScreen React component\n *\n * @param spec - Collection of all named parameters\n * @constructor\n */\nconst LoadingScreenFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n\n    const CircularProgress = require('material-ui/CircularProgress').default;\n\n    const mainTheme = require('../theme/mainTheme').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'LoadingScreen',\n        /**\n         * Generates the DOM/HTML\n         */\n        render() {\n            return <div className='loading-screen'>\n                <div className='spinner-container'>\n                    <CircularProgress\n                        left={0}\n                        top={0}\n                        status='loading'\n                        color={mainTheme.primaryColor}/>\n                </div>\n            </div>;\n        }\n    });\n}\n\nexport {\n    LoadingScreenFactory\n};","/**\n * Provides methods to help build out Address Forms\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixin\n */\nconst AddressMixinFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n\n    // Factories\n\n    // Mixins\n    const v = _.assign(require('react-loose-forms.validation'), require('../mixins/ValidationMixin').default);\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateCountryOptions;\n    let _generateStateOptions;\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _generateCountryOptions = (inst) => {\n        const {\n            displayData\n        } = inst.props;\n        const displayLists = displayData.get('displayLists');\n\n        const universal = displayLists.get('universal');\n        const countryList = universal.get('countrylist');\n\n        let options = [];\n\n        countryList.map((country) => {\n            options.push({\n                text: country.get('lc'),\n                value: country.get('sc')\n            });\n        });\n\n        return options;\n    };\n\n    /**\n     * Generates a state list based on country\n     *\n     * @param country\n     * @param {object} inst\n     * @returns {Array}\n     * @private\n     */\n    _generateStateOptions = (country, inst) => {\n        const {\n            displayData\n        } = inst.props;\n        const displayLists = displayData.get('displayLists');\n\n        const universal = displayLists.get('universal');\n        const filteredStateList = universal.get('statelist').filter((state) => {\n            return state.get('sc') === country;\n        });\n\n        let options = [];\n\n        filteredStateList.map((state) => {\n            options.push({\n                text: state.get('ls'),\n                value: state.get('ss')\n            });\n        });\n\n        return options;\n    };\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    /**************************************************************************\n     *\n     * Public Members\n     *\n     *************************************************************************/\n\n    return {\n        /**\n         * Create a common schema for Addresses\n         * @returns {object}\n         */\n        buildAddressSchema(data) {\n            return {\n                address: {\n                    name: 'address',\n                    label: getText('Address'),\n                    type: 'textarea',\n                    iconClass: 'location-on'\n                },\n                city: {\n                    name: 'city',\n                    label: getText('City'),\n                    type: 'text'\n                },\n                st: {\n                    name: 'st',\n                    label: getText('State/Prov'),\n                    type: 'select',\n                    options: _generateStateOptions((data && data.country) || null, this)\n                },\n                zip: {\n                    name: 'zip',\n                    label: getText('Zip/Postal Code'),\n                    type: 'text'\n                },\n                country: {\n                    name: 'country',\n                    label: getText('Country'),\n                    type: 'select',\n                    options: _generateCountryOptions(this)\n                }\n            };\n        },\n        /**\n         * Builds full address string\n         * @param {object} data\n         * @param {Array} fields\n         * @returns {string}\n         */\n        buildLocationString(data, fields) {\n            let parts = [];\n            fields = fields || ['address', 'city', 'st', 'country', 'zip'];\n\n            _.map(fields, (field) => {\n                if (_.has(data, field) && !_.isEmpty(data[field])) {\n                    parts.push(data[field]);\n                }\n            });\n\n            return parts.join(', ');\n        }\n    };\n}\n\nexport default AddressMixinFactory;","/**\n * Generates a ViewMixin component.  For shared functionality between view\n * components.\n *\n * @param {object} spec - Container for named parameters\n * @property {boolean} spec.noHeader - If the view doesn't have a header (and therefore no actions)\n * @returns {object}\n * @constructor\n * @mixin\n */\nconst ViewMixinFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const {\n        radio\n    } = require('react-pubsub-via-radio.js');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        ViewActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const {\n        noHeader\n    } = spec;\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        setHeaderActions,\n        setHeaderText\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const {\n        updateHeaderActionsOverride,\n        headerText\n    } = spec;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _updateHeaderActions;\n    let _updateHeaderText;\n\n    /**\n     * Updates the header actions for the most common shared actions\n     *\n     * @param {object} inst - Reference to React component\n     * @private\n     */\n    _updateHeaderActions = updateHeaderActionsOverride || function _updateHeaderActions(inst, props) {\n            let currentProps = props || inst.props;\n\n            const {\n                dispatch\n            } = currentProps;\n\n            dispatch(setHeaderActions([]));\n        };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _updateHeaderText = (headerText, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(setHeaderText(headerText));\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return _.assign({}, {\n        componentDidMount() {\n            if (noHeader !== true) {\n                this.updateHeaderActions();\n            }\n\n            if (_.isFunction(this.updateHeaderText)) {\n                this.updateHeaderText();\n            }\n        },\n        /**\n         * Updates the actions in the header.  Run from componentDidMount and\n         * componentDidUpdate.  Overridable.\n         *\n         */\n        updateHeaderActions(props) {\n            _updateHeaderActions(this, props);\n        },\n        getHeaderText() {\n            return headerText;\n        },\n        updateHeaderText() {\n            _updateHeaderText(this.getHeaderText(), this);\n        }\n    }, (spec ? spec.overrides : null));\n}\n\nexport default ViewMixinFactory;","/**\n * Generates a FooterNavItem component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst FooterNavItemFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const BottomNavigationItem = require('material-ui/BottomNavigation').BottomNavigationItem;\n    const {IconMenu, MenuItem} = require('material-ui/IconMenu');\n    const Chip = require('material-ui/Chip').default;\n    const Avatar = require('material-ui/Avatar').default;\n\n    const IconMap = require('../theme/IconMap');\n    const mainTheme = require('../theme/mainTheme').default;\n\n    // Enums\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getTotalUnread\n    } = JobBoardActionsFactory();\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            viewItem: PropTypes.object.isRequired,\n            iconClass: PropTypes.string.isRequired,\n            onClick: PropTypes.func.isRequired,\n            selected: PropTypes.bool,\n            style: PropTypes.object,\n            label: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.object\n            ]),\n            speakerInfo: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'FooterNavItem',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {\n                iconClass,\n                onClick,\n                selected,\n                style,\n                viewItem,\n                label,\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            let secondaryText = null;\n            const totalUnread = (speakerInfo.selectedSpeaker ? getTotalUnread(jobBoard, speakerInfo.selectedSpeaker.get('sid')) : 0);\n\n            if (viewItem.id === VIEWS.mainViews.JOBS_VIEW.id) {\n                let manualStyle = {\n                    style: _.assign({}, style, {\n                        color: (selected ? mainTheme.footerSelectedIconColr : mainTheme.footerIconColor)\n                    })\n                };\n                return (\n                    <BottomNavigationItem\n                        style={_.assign({\n                            minWidth: '48px'\n                        }, style)}\n                        icon={<div style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center'\n                        }}>\n                            <IconMenu iconButtonElement={IconMap.getButton(iconClass)}\n                                      style={{\n                                          marginTop: '-5px',\n                                          marginLeft: '-15px'\n                                      }}\n                                      iconStyle={manualStyle.style}\n                                      anchorOrigin={{horizontal: 'right', vertical: 'top'}}\n                                      targetOrigin={{horizontal: 'right', vertical: 'bottom'}}\n                                      useLayerForClickAway={true}\n                                      width={190}>\n                                {_.map(VIEWS.getJobBoardViews(), (navItem, i) => {\n                                    secondaryText = null;\n                                    if (navItem.id === VIEWS.jobViews.LEADS_OFFERS_VIEW.id && totalUnread) {\n                                        secondaryText = <span style={{\n                                            marginTop: -3,\n                                            marginBottom: 'auto'\n                                        }}>\n                                            <Avatar size={20}\n                                                    backgroundColor={mainTheme.errorBackgroundColor}>{totalUnread}</Avatar>\n                                        </span>;\n                                    }\n\n                                    return <MenuItem\n                                        key={i}\n                                        primaryText={navItem.label}\n                                        secondaryText={secondaryText}\n                                        onClick={(e) => {\n                                            stopProp(e);\n\n                                            onClick(navItem);\n                                        }}/>;\n                                })}\n                            </IconMenu>\n\n                            {(totalUnread) ? <div style={{\n                                marginTop: '10px',\n                                marginLeft: '-20px'\n                            }}>\n                                <Avatar size={20}\n                                        backgroundColor={mainTheme.errorBackgroundColor}>{totalUnread}</Avatar>\n                            </div> : null}\n\n                        </div>}>\n\n                    </BottomNavigationItem>\n                );\n            }\n\n            return <BottomNavigationItem\n                selected={selected}\n                style={_.assign({minWidth: '48px'}, style)}\n                icon={IconMap.getElement(iconClass)}\n                label={label}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    onClick();\n                }}/>;\n        }\n    });\n}\n\nexport { FooterNavItemFactory }","/**\n * Creates an MultiLineSecondaryText React Component\n *\n * @constructor\n * @param {object} spec - Collection of named parameters\n *\n * @return {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst MultiLineSecondaryTextFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /******************************************************************************\n     *\n     * Private Members\n     *\n     *****************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            textItems: PropTypes.array.isRequired\n        }\n    });\n\n    /******************************************************************************\n     *\n     * React / Public Interface\n     *\n     *****************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MultiLineSecondaryText',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                textItems\n            } = this.props;\n\n            return <div className=\"secondary-text\">\n                {_.map(textItems, (item, i) => {\n                    return <p\n                        style={{margin: '2px 0', padding: '2px 0'}}\n                        key={`secondary-text-${i}`}\n                        className={(i === 0 ? 'first' : '')}>\n\n                        {item}\n\n                    </p>;\n                })}\n            </div>;\n        }\n    });\n}\n\nexport { MultiLineSecondaryTextFactory }","/**\n * Creates an DrawerHeaderCard React Component\n *\n * @constructor\n * @param {object} spec - Collection of named parameters\n *\n * @return {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst DrawerHeaderCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');const PropTypes = require('prop-types');\n    const {\n        fromJS\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n\n    // enums\n    const DELIVERY_METHOD_ICONS = require('../../enums/DELIVERY_METHOD_ICONS').default;\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const ListItem = require('material-ui/List').ListItem;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    const {MultiLineSecondaryTextFactory} = require('./MultiLineSecondaryText');\n\n    const {BaseHeaderCardFactory} = require('./BaseHeaderCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        AddressMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        SpeakerInfoActionsFactory\n    } = require('../../actions');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        convertFromBalboaTrunkTimestamp\n    } = require('../../util/DateTools').default({});\n\n    /******************************************************************************\n     *\n     * Private Members\n     *\n     *****************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        determineMsm\n    } = SpeakerInfoActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const BaseHeaderCard = BaseHeaderCardFactory({});\n    const MultiLineSecondaryText = MultiLineSecondaryTextFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildHeadingMap;\n    let _generateAvatar;\n\n    /**\n     *\n     * @param {object} spec\n     * @property {Record} spec.record\n     * @property {object} spec.inst\n     * @property {object} spec.map\n     * @returns {{}}\n     * @private\n     */\n    _buildHeadingMap = (spec) => {\n        let map = {};\n        let inst = spec.inst;\n        let record = spec.record;\n        let stageTimes;\n        let venues;\n\n        stageTimes = record.get('Stagetime');\n\n        if (stageTimes && stageTimes.size) {\n\n            let firstStartTime = stageTimes.sortBy((stageTime) => {\n                return (stageTime ? stageTime.get('starttime') : null);\n            }).first().get('starttime');\n\n            let formattedDate = esUtils.format_date(convertFromBalboaTrunkTimestamp(firstStartTime), esUtils.format_date.masks.mediumDate);\n\n            map['strdate'] = {\n                subHeading: formattedDate,\n                iconClass: 'fa-calendar-o'\n            };\n        }\n\n        venues = record.get('Venue');\n\n        if (venues && venues.size >= 1) {\n            let addressString = inst.buildLocationString(venues.first().toJS(), ['city', 'st']);\n            if (!_.isEmpty(addressString)) {\n                map['address'] = {\n                    subHeading: addressString,\n                    iconClass: 'fa-map-marker'\n                };\n            }\n        }\n\n        const deliveryMethod = record.get('deliveryMethod') || 'none';\n\n        let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod.toString()] || DELIVERY_METHOD_ICONS['0'];\n\n        map['deliveryMethod'] = {\n            subHeading: dmIcon.label,\n            iconClass: dmIcon.icon\n        };\n\n        map['speaker'] = {\n            subHeading: `${record.get('name_full')}`,\n            iconClass: 'fa-user'\n        };\n\n        return map;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {XML}\n     * @private\n     */\n    _generateAvatar = (inst) => {\n        const {\n            event,\n            speakerInfo\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const organization = modifiedEvent.get('organization');\n        const deliveryMethod = modifiedEvent.get('deliveryMethod') || 'none';\n        const status = modifiedEvent.get('status');\n\n        let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod];\n        let avIcon;\n        let bgColor;\n\n        if (dmIcon) {\n            avIcon = IconMap.getElement(dmIcon.icon);\n        }\n\n        bgColor = mainTheme.getStatusColor(status) || mainTheme[`${status}Color`];\n\n        return <Avatar\n            backgroundColor={bgColor}\n            icon={avIcon}/>;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            theme: PropTypes.oneOf(['drawer', 'form'])\n        }\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'organization',\n            iconClass: ''\n        }],\n        additionalMapFunc: _buildHeadingMap\n    });\n\n    /******************************************************************************\n     *\n     * React / Public Interface\n     *\n     *****************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'DrawerHeaderCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AddressMixin, AutoShouldUpdateMixin, CardMixin],\n        /**\n         * Invoked once and cached when the class is created. Values in\n         * the mapping will be set on this.props if that prop is not\n         * specified by the parent component\n         *\n         * @returns {object}\n         */\n        getDefaultProps() {\n            return {\n                theme: 'form'\n            };\n        },\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {JSX|XML}\n         */\n        render() {\n            const {\n                event,\n                speakerInfo,\n                theme\n            } = this.props;\n\n            const modifiedEvent = event.get('modifiedEvent');\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n            const organization = modifiedEvent.get('organization');\n            const deliveryMethod = modifiedEvent.get('deliveryMethod') || 'none';\n\n            let dmIcon = DELIVERY_METHOD_ICONS[deliveryMethod.toString()] || DELIVERY_METHOD_ICONS['0'];\n            const status = modifiedEvent.get('status');\n\n            let subHeadingCollection;\n\n            let headingMap = this.buildHeadingMap({\n                record: fromJS(_.assign(modifiedEvent.toJS(), selectedSpeaker.toJS())),\n                inst: this\n            });\n\n            let mapKeys = [\n                'strdate',\n                (dmIcon.label === DELIVERY_METHOD_ICONS['1'].label ? 'address' : 'deliveryMethod'),\n                (determineMsm(speakerInfo) ? 'speaker' : null)\n            ];\n\n            const baseTextStyle = {\n                width: '183px'\n            };\n\n            let appliedTextStyle = _.assign({}, baseTextStyle);\n\n            subHeadingCollection = this.extractHeadings(headingMap, mapKeys);\n\n            if(theme === 'form') {\n                appliedTextStyle = _.assign(appliedTextStyle, {\n                    color: mainTheme.fontColor,\n                    width: 'inherit',\n                    whiteSpace: 'normal'\n                });\n            }\n\n            return <BaseHeaderCard\n                leftAvatar={_generateAvatar(this)}\n                heading={organization || ''}\n                subHeading={_.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                })}\n                headingStyle={appliedTextStyle}\n                subHeadingStyle={appliedTextStyle}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { DrawerHeaderCardFactory }","/**\n * Creates and TravelFlightCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst TravelFlightCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Factories\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const DateToolsFactory = require('../../util/DateTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const DateTools = DateToolsFactory({});\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            travel: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'legfrom',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('From: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'legto',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('To: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'legcarrier',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Carrier: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'legcost',\n            labelFunc: (value) => {\n                return getText('Cost: %1$s', {\n                    params: [esUtils.format_currency(value)]\n                });\n            }\n        }, {\n            key: 'legflightnum',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Flight #: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'legseat',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Seat: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'legticket',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Ticket: %1$s', {\n                    params: [value]\n                });\n            }\n        }]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TravelFlightCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                travel\n            } = this.props;\n\n            const {\n                showDetails\n            } = this.state;\n\n            let description = travel.get('description');\n            let date = travel.get('date');\n            let data = travel.get('flight');\n\n            let subHeadingCollection = [];\n\n            // Need to get details for each Leg\n            // then sort them by time\n            // then add in more details if showDetails is set\n\n            data.get('legs').sortBy((leg) => {\n                return DateTools.convertFromBalboaTrunkTimestamp(leg.get('legleave'));\n            }).map((leg) => {\n                let time = DateTools.convertFromBalboaTrunkTimestamp(leg.get('legleave'));\n\n                time = esUtils.format_date(time, esUtils.format_date.masks.shortTime);\n\n                subHeadingCollection.push({\n                    subHeading: getText('%1$s Departure', {\n                        params: [time]\n                    }),\n                    iconClass: 'fa-clock-o'\n                });\n\n                time = DateTools.convertFromBalboaTrunkTimestamp(leg.get('legarrive'));\n\n                time = esUtils.format_date(time, esUtils.format_date.masks.shortTime);\n\n                subHeadingCollection.push({\n                    subHeading: getText('%1$s Arrival', {\n                        params: [time]\n                    }),\n                    iconClass: 'fa-clock-o'\n                });\n\n                if (showDetails) {\n                    let headingMap = this.buildHeadingMap({\n                        record: leg,\n                        inst: this\n                    });\n\n                    let deets = this.extractHeadings(headingMap, [\n                        'legfrom',\n                        'legto',\n                        'legcarrier',\n                        'legflightnum',\n                        'legseat',\n                        'legticket',\n                        'legcost'\n                    ]);\n\n                    subHeadingCollection = subHeadingCollection.concat(deets);\n                }\n            });\n\n            return <ListCard\n                leftAvatarIcon=\"flight\"\n                primaryText={description}\n                secondaryText={_.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                })}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    this.setState({\n                        showDetails: !showDetails\n                    });\n                }}\n            />;\n        }\n    });\n}\n\nexport { TravelFlightCardFactory }","/**\n * Creates and TravelGroundCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst TravelGroundCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Factories\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            travel: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'transportmode',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Mode: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'confirmation',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Conf #: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'pickupinstructions',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Pick-up Inst: %1$s', {\n                    params: [value]\n                });\n            }\n        }, {\n            key: 'cost',\n            labelFunc: (value) => {\n                return esUtils.format_currency(value, 2);\n            }\n        }, {\n            key: 'payment',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Payment: %1$s', {\n                    params: [value]\n                });\n            },\n            emptyFunc: (value) => {\n                return (!_.isEmpty(value) && value !== \"0\");\n            }\n        }]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TravelGroundCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, CardMixin],\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                travel\n            } = this.props;\n\n            const {\n                showDetails\n            } = this.state;\n\n            let description = travel.get('description');\n            let date = travel.get('date');\n            let data = travel.get('ground');\n\n            let headingMap = this.buildHeadingMap({\n                record: data,\n                inst: this\n            });\n\n            let subHeadingCollection = [];\n\n            if (showDetails) {\n                subHeadingCollection = this.extractHeadings(headingMap, [\n                    'transportmode',\n                    'confirmation',\n                    'pickupinstructions',\n                    'cost',\n                    'payment'\n                ]);\n            }\n\n            let formattedTime = esUtils.format_date(date, esUtils.format_date.masks.shortTime);\n\n            subHeadingCollection.unshift({\n                subHeading: formattedTime,\n                iconClass: 'fa-clock-o'\n            });\n\n            return <ListCard\n                leftAvatarIcon=\"directions-car\"\n                primaryText={description}\n                secondaryText={_.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                })}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    this.setState({\n                        showDetails: !showDetails\n                    });\n                }}\n            />;\n        }\n    });\n}\n\nexport { TravelGroundCardFactory }","/**\n * Creates and TravelHotelCard Component\n *\n * @param {object} spec - Container of named parameters\n * @constructor\n *\n * @return {function} - React Component\n * @mixes AddressMixin\n * @mixes AutoShouldUpdateMixin\n * @mixes CardMixin\n */\nconst TravelHotelCardFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Factories\n    const {ListCardFactory} = require('./ListCard');\n\n    // Mixins\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory,\n        CardMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildHeadingMap;\n\n    /**\n     *\n     * @param {object} spec\n     * @property {Record} spec.record\n     * @property {object} spec.inst\n     * @property {object} spec.map\n     * @returns {{}}\n     * @private\n     */\n    _buildHeadingMap = (spec) => {\n        let map = {};\n        let inst = spec.inst;\n        const data = spec.record;\n\n        let addressString = inst.buildLocationString(data.toJS());\n\n        if (!_.isEmpty(addressString)) {\n            map['address'] = {\n                subHeading: addressString,\n                iconClass: 'fa-map-marker'\n            };\n        }\n        return map;\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ListCard = ListCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AddressMixin = AddressMixinFactory({});\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            travel: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    const CardMixin = CardMixinFactory({\n        fields: [{\n            key: 'name',\n            iconClass: 'fa-building'\n        }, {\n            key: 'phone',\n            iconClass: 'fa-phone'\n        }, {\n            key: 'checkoutdate',\n            iconClass: 'fa-sign-out',\n            labelFunc: (value) => {\n                return getText('Check-out');\n            }\n        }, {\n            key: 'checkindate',\n            iconClass: 'fa-sign-in',\n            labelFunc: (value) => {\n                return getText('Check-in');\n            }\n        }, {\n            key: 'confirmation',\n            iconClass: '',\n            labelFunc: (value) => {\n                return getText('Confirmation #: %1$s', {\n                    params: [value]\n                });\n            }\n        }],\n        additionalMapFunc: _buildHeadingMap\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TravelHotelCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, AddressMixin, CardMixin],\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML|JSX}\n         */\n        render() {\n            const {\n                travel\n            } = this.props;\n\n            const {\n                showDetails\n            } = this.state;\n\n            let description = travel.get('description');\n            let date = travel.get('date');\n            let data = travel.get('hotel');\n\n            let headingMap = this.buildHeadingMap({\n                record: data,\n                inst: this\n            });\n\n            let subHeadingCollection = [];\n\n            if (showDetails) {\n                subHeadingCollection = this.extractHeadings(headingMap, [\n                    'checkindate',\n                    'checkoutdate',\n                    'name',\n                    'address',\n                    'phone',\n                    'confirmation'\n                ]);\n            }\n            else {\n                subHeadingCollection = this.extractHeadings(headingMap, [\n                    'checkindate',\n                    'checkoutdate'\n                ]);\n            }\n\n            return <ListCard\n                leftAvatarIcon=\"hotel\"\n                primaryText={description}\n                secondaryText={_.flatMap(subHeadingCollection, (s) => {\n                    return s.subHeading;\n                })}\n                onClick={(e) => {\n                    stopProp(e);\n\n                    this.setState({\n                        showDetails: !showDetails\n                    });\n                }}\n            />;\n        }\n    });\n}\n\nexport { TravelHotelCardFactory }","/**\n * Generates a Link component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst LinkFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            href: PropTypes.string,\n            onClick: PropTypes.func\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'Link',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            let {\n                href,\n                onClick,\n                children\n            } = this.props;\n\n            href = href || '#';\n\n            onClick = onClick || function() {\n                window.open(href, '_system');\n            };\n\n            return <a href = {\n                href\n            }\n            onClick = {\n                (event) => {\n                    stopProp(event);\n\n                    onClick();\n                }\n            } > {\n                children\n            } </a>;\n        }\n    });\n}\n\nexport { LinkFactory }\n","/**\n * Generates a Panel component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst PanelFactory = (spec) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Components\n    const {SectionHeaderFactory} = require('./SectionHeader');\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    const SectionHeader = SectionHeaderFactory({});\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    return createClass({\n        propTypes: {\n            headingText: PropTypes.string,\n            headingIconClass: PropTypes.string,\n            padding: PropTypes.bool,\n            expandCollapseEnabled: PropTypes.bool,\n            expanded: PropTypes.bool,\n            actionIconClass: PropTypes.string,\n            actionClick: PropTypes.func\n        },\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'Panel',\n\n        /**\n         * Invoked once and cached when the class is created. Values in\n         * the mapping will be set on this.props if that prop is not\n         * specified by the parent component\n         *\n         * @returns {object}\n         */\n        getDefaultProps() {\n            return {\n                padding: true\n            };\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            let {\n                headingText,\n                headingIconClass,\n                padding,\n                expandCollapseEnabled,\n                expanded,\n                actionIconClass,\n                actionClick\n            } = this.props;\n\n            if (expandCollapseEnabled) {\n                actionIconClass = (!expanded ? 'fa-caret-square-o-up' : 'fa-caret-square-o-down');\n            }\n\n            let bodyClass = 'panel-body';\n\n            if (padding) {\n                bodyClass += ' mbsc-padding';\n            }\n\n            return (\n                <div className='panel'>\n                    <div className=\"main-heading\"\n                         onClick={(e) => {\n                             stopProp(e);\n\n                             actionClick(e);\n                         }}>\n                        <SectionHeader label={headingText}/>\n                    </div>\n                    <div className={bodyClass}>\n                        {this.props.children}\n                    </div>\n                </div>\n            );\n        }\n    });\n}\n\nexport { PanelFactory }","/**\n * Generates a FooterNav component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SplashScreenFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            message: PropTypes.string\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SplashScreen',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Specifies what we expect to see in this.props\n         */\n        propTypes: {\n            message: PropTypes.string\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {\n                message\n            } = this.props;\n\n            return (<div className='splash-screen'>\n                { message ? (<div className='message'>{message}</div>) : null }\n                </div>);\n        }\n    });\n}\n\nexport { SplashScreenFactory }","/**\n * Creates a React ButtonGroup Component\n * @param {object} spec - Collection of all named parameters\n *\n * @return {object} - React Component\n */\nconst MUIButtonGroupFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {createElement} = React;\n\n    // Material UI\n    const RaisedButton = require('material-ui/RaisedButton').default;\n\n    // Theme\n    const mainTheme = require('../theme/mainTheme').default;\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    // Actions\n    const {EventActionsFactory, TranslateActionsFactory} = require('../actions');\n\n    // Utilities\n    const {log} = require('../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {stopProp} = EventActionsFactory({});\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _processButton;\n\n    /**\n     * Builds the button's properties depending on it's type\n     *\n     * @param {object} button\n     *\n     * @return {object}\n     */\n    _processButton = (button, i) => {\n\n        const {primary, secondary} = button.props;\n\n        let props = _.assign({\n            key: `button-${i}`,\n            fullWidth: true,\n            type: button.type || 'button'\n        }, button.props, {\n            primary: false,\n            secondary: false\n        });\n\n        if (primary) {\n            props = _.assign(props, {\n                backgroundColor: mainTheme.primaryColor,\n                labelColor: mainTheme.foregroundColor\n            });\n        }\n\n        switch (props.action) {\n            case BTN.SUBMIT:\n                props.label = props.label || getText('Save');\n                break;\n            case BTN.CANCEL:\n                props.label = props.label || getText('Cancel');\n                break;\n            case BTN.DELETE:\n                props.label = props.label || getText('Delete');\n                break;\n            case BTN.DISCARD:\n                props.label = props.label || getText('Discard Changes');\n                break;\n        }\n\n        return createElement(RaisedButton, props);\n    };\n\n    /**************************************************************************\n     *\n     * React/Public\n     *\n     *************************************************************************/\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIButtonGroup',\n\n        /**\n         * Specifies what properties we are expecting in this.props\n         */\n        propTypes: {\n            buttons: PropTypes.array.isRequired\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {buttons} = this.props;\n\n            return <div className='mui-btn-group'>\n                {(_.map(buttons, (button, i) => {\n                    return _processButton(button, i);\n                }))}\n            </div>;\n        }\n    });\n}\n\nexport default MUIButtonGroupFactory;","/**\n * Generates a ContactList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ContactListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    const MessageModel = require('../../stores/models/MessageModel').default;\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {MessageCardFactory, ContactCardFactory} = require('../cards');\n    const {ViewHeaderFactory} = require('../ViewHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    const {\n        isEspeakers\n    } = require('../../util/Platform').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _determineText;\n\n    /**\n     *\n     * @returns {*}\n     * @private\n     */\n    _determineText = () => {\n        if(isEspeakers()) {\n            return getText('Tap the Add button below to create a new %1$s.', {\n                params: [getText('Contact')]\n            });\n        }\n\n        return getText('You do not currently have any Contacts.');\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n    const ContactCard = ContactCardFactory({});\n    const ViewHeader = ViewHeaderFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ContactList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getInitialState() {\n            return {};\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {event} = this.props;\n            const modifiedEvent = event.get('modifiedEvent');\n            const contactList = modifiedEvent.get('EventContact');\n\n            return <List>\n                <ViewHeader>{getText('Contacts')}</ViewHeader>\n\n                {contactList && contactList.size === 0 ?\n                    <MessageCard message={new MessageModel({\n                        type: 'info',\n                        text: _determineText()\n                    })}/>\n                    : null}\n\n                {contactList ? contactList.map((item, i) => {\n                    return <div key={`contact-${i}`}>\n                        <ContactCard\n                            contact={item}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ContactListFactory }","const Immutable = require('immutable');\n\nexport default Immutable.Record({\n    \"is_royalty\": new Immutable.Record({\n        is_set: false,\n        intval: 1\n    })(),\n    \"mp_lineitem\": new Immutable.Record({\n        is_set: false,\n        intval: 2\n    })(),\n    \"bill_later\": new Immutable.Record({\n        is_set: false,\n        intval: 4\n    })(),\n    \"free\": new Immutable.Record({\n        is_set: false,\n        intval: 8\n    })()\n});\n\n","/**\n * Generates a LibraryList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst LibraryListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {LibraryFileCardFactory} = require('../cards');\n    const {ViewHeaderFactory} = require('../ViewHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const LibraryFileCard = LibraryFileCardFactory({});\n    const ViewHeader = ViewHeaderFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'LibraryList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {event} = this.props;\n            const modifiedEvent = event.get('modifiedEvent');\n            const fileList = modifiedEvent.get('storedfiles');\n\n            return <List>\n                <ViewHeader>{getText('Library')}</ViewHeader>\n\n                {fileList ? fileList.map((item, i) => {\n                    return <div key={`library-${i}`}>\n                        <LibraryFileCard\n                            file={item}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { LibraryListFactory }","/**\n * Generates a StoryList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst StoryListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {StoryCardFactory} = require('../cards');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    const {\n        isSolutionTree\n    } = require('../../util/Platform').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateStoriesTold;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _generateStoriesTold = (inst) => {\n        const {\n            displayData,\n            event,\n            speakerInfo\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        let storyList = selectedSpeaker.get('stories');\n\n        const specificContentAreas = displayData.get('displayLists').get('universal').get('specific_content_areas');\n\n        if (isSolutionTree() && specificContentAreas) {\n            storyList = specificContentAreas.toArray();\n        }\n\n        return storyList;\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const SectionHeader = SectionHeaderFactory({});\n    const StoryCard = StoryCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'StoryList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const storyList = _generateStoriesTold(this);\n\n            return <List>\n                <SectionHeader>{(isSolutionTree() ? getText('Specific Content Areas') : getText('Stories / Jokes Told'))}</SectionHeader>\n\n                {storyList ? storyList.map((story, i) => {\n                    return <div key={`story-${i}`}>\n                        <StoryCard\n                            story={story}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { StoryListFactory }","/**\n * Generates a TodoList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst TodoListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {TodoCardFactory} = require('../cards');\n    const {ViewHeaderFactory} = require('../ViewHeader');\n    const {SectionHeaderFactory} = require('../SectionHeader');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ViewHeader = ViewHeaderFactory({});\n    const TodoCard = TodoCardFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dashboard: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            canComplete: PropTypes.bool\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'TodoList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Invoked once and cached when the class is created. Values in\n         * the mapping will be set on this.props if that prop is not\n         * specified by the parent component\n         *\n         * @returns {object}\n         */\n        getDefaultProps() {\n            return {\n                canComplete: true\n            };\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {canComplete, dashboard, event, speakerInfo} = this.props;\n            const modifiedEvent = event.get('modifiedEvent');\n            let todoList;\n            let filteredList;\n\n            if (canComplete) {\n                todoList = modifiedEvent.get('EventTodo');\n                filteredList = todoList;\n            } else {\n                todoList = dashboard.get('todoList');\n\n                if(todoList) {\n                    filteredList = todoList.filter((t) => {\n                        if(speakerInfo && speakerInfo.selectedSpeaker && t && t.get('sids')) {\n                            return t.get('sids').includes(speakerInfo.selectedSpeaker.get('sid'));\n                        }\n                    });\n                }\n            }\n\n            if(!filteredList || !filteredList.size) {\n                return <div></div>;\n            }\n\n            return <List>\n                {canComplete ? <ViewHeader>{getText('Action List')}</ViewHeader> : <SectionHeader>{getText('Action List')}</SectionHeader>}\n\n                {filteredList ? filteredList.map((todo, i) => {\n                    return <div key={`todo-${i}`}>\n                        <TodoCard\n                            canComplete={canComplete}\n                            todo={todo}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TodoListFactory }","/**\n * Creates an ConfirmedEventsDialog components\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ConfirmedEventsDialogFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {ContinueCancelDialogFactory} = require('./ContinueCancelDialog');\n\n    // Mixins\n    const AutoShouldUpdateMixinFactory = require('../../mixins/AutoShouldUpdateMixin').default;\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const ContinueCancelDialog = ContinueCancelDialogFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dialogItem: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    const component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ConfirmedEventsDialog',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {function|JSX|XML}\n         */\n        render() {\n            const {\n                dialogItem\n            } = this.props;\n\n            const text = dialogItem.get('text');\n\n            return <ContinueCancelDialog\n                widgetId='confirmed-events-dialog'\n                continueText={getText('Take Me')}\n                cancelText={getText('OK')}\n                displayMode='bottom'\n                animate='slideup'\n                {...this.props}>\n\n                {\n                    text || getText('Jobs with an accepted offer are displayed in your calendar with your other events.')\n                }\n\n            </ContinueCancelDialog>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ConfirmedEventsDialogFactory }","/**\n * Creates an DeleteConfirmationDialog components\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst DeleteConfirmationDialogFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Factories\n    const {ContinueCancelDialogFactory} = require('./ContinueCancelDialog');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const ContinueCancelDialog = ContinueCancelDialogFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dialogItem: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'DeleteConfirmationDialog',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {function|XML|JSX}\n         */\n        render() {\n            const {\n                dialogItem\n            } = this.props;\n\n            const text = dialogItem.get('text');\n\n            return <ContinueCancelDialog {..._.assign({\n                        widgetId: 'delete-confirmation-dialog',\n                continueText: getText('Delete'),\n                cancelText: getText('Cancel')\n                    }, this.props)\n                                         }>\n\n                {\n                    text || getText('Are you sure you want to delete?')\n                }\n\n            </ContinueCancelDialog>;\n        }\n    });\n}\n\nexport { DeleteConfirmationDialogFactory }","/**\n * Creates an ExitDirtyConfirmationDialog components\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ExitDirtyConfirmationDialogFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {ContinueCancelDialogFactory} = require('./ContinueCancelDialog');\n\n    // Mixins\n    const AutoShouldUpdateMixinFactory = require('../../mixins/AutoShouldUpdateMixin').default;\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const {\n        doSubmitForm\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const ContinueCancelDialog = ContinueCancelDialogFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dialogItem: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    const component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'ExitDirtyConfirmationDialog',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {function|JSX|XML}\n         */\n        render() {\n            const {\n                dialogItem,\n                dispatch\n            } = this.props;\n\n            const text = dialogItem.get('text');\n\n            return <ContinueCancelDialog\n                widgetId='exit-dirty-confirmation-dialog'\n                continueText={getText('Lose Changes')}\n                cancelText={getText('Save')}\n                displayMode='bottom'\n                animate='slideup'\n                {...this.props}>\n\n                {\n                    text || getText('By leaving this screen you will discard all changes.  Continue?')\n                }\n\n            </ContinueCancelDialog>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ExitDirtyConfirmationDialogFactory }","/**\n * Creates an UndoConfirmationDialog components\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst UndoConfirmationDialogFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Factories\n    const {ContinueCancelDialogFactory} = require('./ContinueCancelDialog');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const ContinueCancelDialog = ContinueCancelDialogFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dialogItem: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'UndoConfirmationDialog',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {function|XML|JSX}\n         */\n        render() {\n            const {\n                dialogItem\n            } = this.props;\n\n            const text = dialogItem.get('text');\n\n            return <ContinueCancelDialog {..._.assign({\n                        widgetId: 'undo-confirmation-dialog'\n                    }, this.props)\n                } >\n\n                {\n                    text || getText('Are you sure you want to discard all changes?')\n                }\n\n            </ContinueCancelDialog>;\n        }\n    });\n}\n\nexport { UndoConfirmationDialogFactory }","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\nconst {List, Record, Map} = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\n\nexport default Record({\n    agreement: undefined,\n    jobSummary: undefined,\n    jobDetail: undefined,\n    messages: List()\n});","/* global navigator */\nfunction ResponsiveLogFactory() {\n    //-------------------------------------------------------------------------\n    //\n    // Imports\n    //\n    //-------------------------------------------------------------------------\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Mixins\n    const AutoShouldUpdateMixinFactory = require('../mixins/AutoShouldUpdateMixin').default;\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    const isMobile = require('ismobilejs');\n\n    const stringifyObject = require('stringify-object');\n\n    const Platform = require('../util/Platform').default;\n\n    //-------------------------------------------------------------------------\n    //\n    // Private Members\n    //\n    //-------------------------------------------------------------------------\n\n    //---------------------------------\n    // Variables\n    //---------------------------------\n\n    const propTypes = {\n        browser: PropTypes.object.isRequired\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes\n    });\n\n    //-------------------------------------------------------------------------\n    //\n    // Public Interface\n    //\n    //-------------------------------------------------------------------------\n\n    const component = createClass({\n        displayName: 'ResponsiveLog',\n\n        propTypes,\n\n        render() {\n            const {\n                browser\n            } = this.props;\n\n\n            return (\n                <div>\n                    <div>Platform.isTablet: {Platform.isTablet(browser).toString()}</div>\n                    <div>{navigator.userAgent}</div>\n                    <div>{stringifyObject(isMobile.tablet)}</div>\n                    <div>{stringifyObject(browser)}</div>\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ResponsiveLogFactory }","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n/* global device */\n\n// Node Modules\nconst _ = require('lodash');\n\n// Utilities\nconst Ajax = require('ES/services/Ajax');\nconst crypto = require('crypto');\nconst {log} = require('../util/DevTools').default;\nconst {hasPush, getBalboaUrl} = require('../util/Platform').default;\n\n// Actions\nconst {TranslateActionsFactory} = require('../actions');\n\n/**\n * Interacts with the Authenticate service, but outside of Balboa\n * @params {object} spec - Collection of all parameters\n *\n * @return {object}\n */\nconst LoginServiceFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const GET = 'GET';\n    const POST = 'POST';\n\n    // set some default request options\n    const baseOptions = {\n        method: GET,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    // Declare our methods so there is no reference errors\n    let _sha512;\n    let _buildOptions;\n    let _generateHash;\n\n    /**\n     * Creates a SHA hash of the provided text\n     *\n     * @private\n     * @param {string} text - String that you want hashed\n     *\n     * @return {string}\n     */\n    _sha512 = (text) => {\n        let shasum = crypto.createHash('sha512');\n        shasum.update(text);\n        return shasum.digest('hex');\n    };\n\n    /**\n     * Merges all the various options needing to be attached to the request.\n     *\n     * @private\n     * @param {string} method - HTTP Method\n     * @param {object} body - JSON object you want sent in the body of the request\n     *\n     * @return {object}\n     */\n    _buildOptions = (method, body) => {\n        return _.assign({}, baseOptions, {method: method}, (method === POST ? {body: JSON.stringify(body)} : null));\n    };\n\n    /**\n     * Creates a secure hash based on the provided login credentials\n     *\n     * @private\n     * @param {string} username\n     * @param {string} password\n     *\n     * @return {string}\n     */\n    _generateHash = (username, password) => {\n        return _sha512([username, password].join('.').toLowerCase());\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n    return {\n        /**\n         * Calls the service to authenticate the user\n         *\n         * @param {object} - Collection of all named parameters\n         * @property {object} spec - Collection of all named parameters\n         * @property {string} spec.username\n         * @property {string} spec.password\n         * @property {function} spec.success - Callback for a success response\n         * @property {function} spec.failure - Callback for a failure response\n         * @property {string} spec.registrationId - Push Registration\n         */\n        login(spec) {\n            const {username, password, success, failure, registrationId} = spec;\n\n            let deviceType;\n            let platform;\n\n            let body = {\n                username: username,\n                plaintext_password: password,\n                client: 'mobile'\n            };\n\n            if(hasPush() && registrationId) {\n                platform = device && device.platform && device.platform.toLowerCase();\n\n                if(platform === 'android') {\n                    deviceType = 'GCM';\n                } else if(platform === 'ios') {\n                    deviceType = 'APNS';\n                }\n\n                if(deviceType) {\n                    body = _.assign(body, {\n                        pushdevicetype: deviceType,\n                        pushdevicetoken: registrationId\n                    });\n                }\n            }\n\n            let xhr = Ajax.post(`${getBalboaUrl()}/authenticate/gettoken`, body, (error, responseText, status, xhr) => {\n                try {\n                    // TODO: handle pushregistered = false\n                    if(!error && responseText) {\n                        let responseData = JSON.parse(responseText);\n                        if (responseData && responseData.success === true) {\n                            return success(responseData);\n                        } else {\n                            return failure(responseData);\n                        }\n                    } else {\n                        failure(error);\n                    }\n                } catch(e) {\n                    return failure((e && e.message) || getText('Failed to authenticate user.'));\n                }\n            });\n        }\n    };\n}\n\nexport default LoginServiceFactory;","const MUIDrawerFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {fromJS} = require('immutable');\n\n    const _ = require('lodash');\n\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const VIEWS = require('../../enums/VIEWS').default;\n\n    // Material UI\n    const Drawer = require('material-ui/Drawer').default;\n    const MenuItem = require('material-ui/MenuItem').default;\n    const {List, ListItem} = require('material-ui/List');\n    const Avatar = require('material-ui/Avatar').default;\n\n    const mainTheme = require('../../theme/mainTheme').default;\n    const IconMap = require('../../theme/IconMap');\n\n    // Components\n    const {DrawerItemFactory} = require('../DrawerItem');\n    const {DrawerHeaderCardFactory} = require('../../components/cards/DrawerHeaderCard');\n\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const {\n        isEspeakers,\n        isSolutionTree\n    } = require('../../util/Platform').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        NavActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        isMarketPlaceEvent,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getMyInfo\n    } = JobBoardActionsFactory();\n    const {\n        addSubView,\n        changeEventView,\n        toggleDrawer\n    } = NavActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const DrawerHeaderCard = DrawerHeaderCardFactory({});\n    const DrawerItem = DrawerItemFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    const _changeView = (view, inst) => {\n        const {dispatch} = inst.props;\n\n        dispatch(toggleDrawer(false));\n\n        if(view.id === VIEWS.jobSubViews.JOB_MESSAGES_VIEW.id) {\n            dispatch(addSubView(view));\n        } else {\n            dispatch(changeEventView(view, true));\n        }\n    };\n\n    const _determineLeftIcon = (navItem, inst) => {\n        return IconMap.getElement(navItem.iconClass);\n    };\n\n    const _determineLeftAvatar = (navItem, inst) => {\n        const {\n            event,\n            jobBoard,\n            speakerInfo\n        } = inst.props;\n\n        const myInfo = getMyInfo({\n            jobBoard,\n            speakerInfo,\n            eid: event.modifiedEvent.get('eid')\n        });\n\n        if(isMarketPlaceEvent(event.modifiedEvent)\n            && navItem.id === VIEWS.jobSubViews.JOB_MESSAGES_VIEW.id\n            && myInfo.n_unread > 0) {\n\n            return (\n                <div style={{\n                    display: 'flex',\n                    top: 28,\n                    left: 26\n                }}>\n                    {IconMap.getElement('message',\n                        {\n                            color: mainTheme.headerIconColor\n                        })}\n\n                    <div style={{\n                        marginTop: -15,\n                        marginLeft: -25,\n                    }}>\n                        <Avatar size={20}\n                                backgroundColor={mainTheme.errorBackgroundColor}>{myInfo.n_unread}</Avatar>\n                    </div>\n\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            staticLayout: PropTypes.bool\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIDrawer',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getDefaultProps() {\n            return {\n                staticLayout: false\n            };\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {\n                dispatch,\n                event,\n                nav,\n                staticLayout\n            } = this.props;\n\n            const showDrawer = nav.get('showDrawer');\n\n            let eventViews = _.clone(VIEWS.eventViews);\n\n            if (isSolutionTree()) {\n                eventViews = VIEWS.getSolutionTreeEventViews();\n            }\n\n            // if this is a marketplace job, then add in the messages view\n            if(isMarketPlaceEvent(event.modifiedEvent)) {\n                _.assign(eventViews, _.pick(VIEWS.jobSubViews, ['JOB_MESSAGES_VIEW']));\n            } else {\n                eventViews = _.omit(eventViews, 'JOB_VIEW');\n            }\n\n\n            if (staticLayout) {\n                return (\n                    <List>\n                        {_.map(_.sortBy(eventViews, [(navItem) => {\n                            return navItem.order;\n                        }]), (navItem, i) => {\n                            return <ListItem\n                                key={`event-menu-${i}`}\n                                leftIcon={_determineLeftIcon(navItem, this)}\n                                primaryText={navItem.label}\n                                onClick={(e) => {\n                                    stopProp(e);\n\n                                    _changeView(navItem, this);\n                                }}\n                            />;\n                        })}\n                    </List>\n                );\n            }\n\n            return (\n                <Drawer open={showDrawer || staticLayout}\n                        docked={staticLayout || false}\n                        className='mui-drawer'\n                        containerStyle={{\n                            overflowX: 'hidden'\n                        }}\n                        onRequestChange={(isOpen) => {\n                            dispatch(toggleDrawer(isOpen));\n                        }}>\n\n                    <div className='header'>\n                        <DrawerHeaderCard theme=\"drawer\"/>\n                    </div>\n\n                    {_.map(_.sortBy(eventViews, [(navItem) => {\n                        return navItem.order;\n                    }]), (navItem, i) => {\n                        return <MenuItem\n                            key={`event-menu-${i}`}\n                            leftIcon={_determineLeftIcon(navItem, this)}\n                            leftAvatar={_determineLeftAvatar(navItem, this)}\n                            primaryText={navItem.label}\n                            onClick={(e) => {\n                                stopProp(e);\n\n                                _changeView(navItem, this);\n                            }}\n                        />;\n                    })}\n\n                </Drawer>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { MUIDrawerFactory }","/**\n * Generates a JobOfferSection component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobOfferSectionFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const OFFER_STATUS = require('../enums/OFFER_STATUS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Mixins\n    const {\n        AddressMixinFactory,\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        JobBoardActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    // Components\n    const {DisplayFieldFactory} = require('../components/DisplayField');\n    const {SectionHeaderFactory} = require('../components/SectionHeader');\n    const {IconLabelFactory} = require('../components/IconLabel');\n    const FlatButton = require('material-ui/FlatButton').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        buildLocationString\n    } = AddressMixinFactory();\n\n    const {\n        getBuyerName,\n        getCompanyName,\n        getMyInfo,\n        getOfferEventStatus,\n        getOfferStatusIndexByStatus,\n        getEventDate,\n        getLedgerData\n    } = JobBoardActionsFactory();\n\n    const {\n        addSubView\n    } = NavActionsFactory();\n\n    const {\n        getCurrency,\n        getText\n    } = TranslateActionsFactory();\n    const DisplayField = DisplayFieldFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n    const IconLabel = IconLabelFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let buildLocation;\n    let _determineEventId;\n\n    /**\n     *\n     * @param jobEvent\n     * @param displayData\n     * @returns {*}\n     */\n    buildLocation = (jobEvent, displayData) => {\n        let event = jobEvent.toJS();\n        let Displaylists = displayData.displayLists.toJS();\n        const deliveryMethod = event.deliveryMethod || event.deliverymethod;\n\n        let venue = _.first(event.Venue);\n        let event_venue = null;\n\n        if (deliveryMethod === 1 && !_.isEmpty(venue)) {\n            event_venue = (\n                <div style={{\n                    marginTop: '2px',\n                    marginBottom: '2px'\n                }}>\n                    <IconLabel fontSize=\"12px\" color=\"#777\" iconClass='location-on'\n                               label={buildLocationString(venue)}/>\n                </div>\n            );\n\n        } else {\n            event_venue = <div>\n                {_.map(_.filter(Displaylists && Displaylists.universal && Displaylists.universal.deliverymethods, (dm) => {\n                    return dm.id === deliveryMethod;\n                }), \"description\").join(\", \")\n                }\n            </div>;\n        }\n\n        return event_venue;\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {string|number|null}\n     * @private\n     */\n    _determineEventId = (inst) => {\n        const {\n            event,\n            jobBoard\n        } = inst.props;\n\n        const selectedJob = jobBoard.selectedJob;\n        const modifiedEvent = event.modifiedEvent;\n\n        if(modifiedEvent) {\n            return modifiedEvent.get('eid');\n        }\n\n        if(selectedJob && selectedJob.jobSummary) {\n            return selectedJob.jobSummary.get('event_id');\n        }\n\n        if(selectedJob && selectedJob.jobDetail) {\n            return selectedJob.jobDetail.get('eid') || selectedJob.jobDetail.get('event_id');\n        }\n\n        return null;\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interface\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobOfferSection',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n\n            const {\n                displayData,\n                dispatch,\n                event,\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            const selectedJob = jobBoard.selectedJob;\n            const modifiedEvent = event.modifiedEvent;\n            const selectedSpeaker = speakerInfo.selectedSpeaker;\n            const jobEvent = modifiedEvent || selectedJob.jobDetail.get('event');\n            const myInfo = getMyInfo({\n                jobBoard,\n                speakerInfo,\n                eid: _determineEventId(this)\n            });\n\n            const mpAgreement = _.get(jobEvent.toJS(), ['MPAgreement', selectedSpeaker.get('sid')]);\n\n            const {\n                fees,\n                grand_total,\n                fee_speaking,\n                fee_materials,\n                fee_travel\n            } = getLedgerData({\n                event: jobEvent.toJS(),\n                Displaylists: displayData.get('displayLists').toJS(),\n                mp_agreement: mpAgreement\n            });\n\n            const offerStatus = getOfferEventStatus(jobEvent, selectedSpeaker.get('sid'));\n            const offerAcceptedPlus = getOfferStatusIndexByStatus(offerStatus) >= getOfferStatusIndexByStatus(OFFER_STATUS.OFFER_ACCEPTED);\n\n            return (\n                <div>\n                    <SectionHeader label={offerAcceptedPlus ? getText('Contract') : getText('Offer')}/>\n\n                    <DisplayField label={getText('Client')}\n                                  displayText={offerAcceptedPlus ? getCompanyName(jobEvent) : getBuyerName(jobEvent)}/>\n\n                    <DisplayField label={getText('Event')} displayText={jobEvent.get('organization')}/>\n\n                    <DisplayField label={getText('Date')} displayText={getEventDate(jobEvent)}/>\n\n                    <DisplayField label={getText('Location')}>\n                        {buildLocation(jobEvent, displayData, buildLocation)}\n                    </DisplayField>\n\n                    <DisplayField label={getText('Contracted Speaking Fee')}\n                                  displayText={getCurrency({number: fee_speaking})}/>\n\n                    <DisplayField label={getText('Payout To You')}>\n                        <div>\n                            <span>{getCurrency({number: grand_total})}</span>\n                            <span><FlatButton primary={true} label={getText(\"view details\")} onClick={() => {\n                                dispatch(addSubView(VIEWS.jobSubViews.PAYOUT_DETAIL_VIEW));\n                            }}/></span>\n                        </div>\n                    </DisplayField>\n\n                    {mpAgreement ? <DisplayField label={getText('Terms')} displayText={mpAgreement.terms}/> : null}\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobOfferSectionFactory }","import {connect} from \"react-redux\";\n\n/**\n * Generates a SpeakerList component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SpeakerListFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    // const {connect} = require('react-redux');\n\n    // Material UI\n    const List = require('material-ui/List').List;\n    const Divider = require('material-ui/Divider').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    // Components\n    const {SpeakerCardFactory} = require('../cards');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const SpeakerCard = SpeakerCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SpeakerList',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {speakerInfo} = this.props;\n            const speakerList = speakerInfo.get('speakerList');\n\n            return <List>\n                {speakerList ? speakerList.map((speaker) => {\n                    return <div key={`speaker-${speaker.get('sid')}`}>\n                        <SpeakerCard\n                            speaker={speaker}/>\n\n                        <Divider/>\n                    </div>;\n                }) : null}\n            </List>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component)\n}\n\nexport { SpeakerListFactory }","/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nimport BTN from \"./BTN\";\nimport DELIVERY_METHOD_ICONS from \"./DELIVERY_METHOD_ICONS\";\nimport EVENT_STATUSES from \"./EVENT_STATUSES\";\nimport GENERAL from \"./GENERAL\";\nimport OFFER_STATUS from \"./OFFER_STATUS\";\nimport RADIOS from \"./RADIOS\";\nimport STORAGE from \"./STORAGE\";\nimport VIEWS from \"./VIEWS\";\n\nexport default {\n    BTN,\n    DELIVERY_METHOD_ICONS,\n    EVENT_STATUSES,\n    GENERAL,\n    OFFER_STATUS,\n    RADIOS,\n    STORAGE,\n    VIEWS\n};","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst MeetingNotesFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const _ = require('lodash');\n\n    // Components\n    const {DisplayFieldFactory} = require('./DisplayField');\n    const {MessageContainerFactory} = require('./messages/MessageContainer');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        JobBoardActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n    const DisplayField = DisplayFieldFactory({});\n    const MessageContainer = MessageContainerFactory({});\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        getBuyerName,\n        getNotes\n    } = JobBoardActionsFactory();\n\n    const {\n        getText\n    } = TranslateActionsFactory();\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            jobDetail: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MeetingNotes',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                jobDetail\n            } = this.props;\n\n            let notes = getNotes(jobDetail);\n\n            let text_content = _.map(notes, (data) => {\n                return _.isEmpty(_.get(data, \"value\", \"\").trim()) ? \"\" : `\"${_.get(data, \"value\", \"\").trim()}\"`;\n            }).join(\"\\n\\n\").trim();\n\n            if(_.isEmpty(text_content))\n                return null;\n\n            return (\n                <MessageContainer\n                    type='note'\n                    boxStyle={{\n                        padding: 0,\n\n                    }}>\n                    <DisplayField label={getText(\"%1$s's meeting goals:\", {\n                        params: [\n                            getBuyerName(jobDetail.get('event'))\n                        ]\n                    })}\n                                  displayText={text_content}/>\n                </MessageContainer>\n            );\n        }\n    });\n\n    return component;\n}\n\nexport { MeetingNotesFactory }","/**\n * Generates a DashboardView component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst DashboardViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const _ = require('lodash');\n    const {\n        RadioServiceMixin,\n        radio\n    } = require('react-pubsub-via-radio.js');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateTools = require('../util/DateTools').default({});\n    const {\n        isEspeakers\n    } = require('../util/Platform').default;\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Lists\n    const {\n        ActivityListFactory,\n        PipelineListFactory,\n        TodoListFactory,\n        UpcomingConfirmedListFactory\n    } = require('../components/list');\n\n    const {TipCardFactory} = require('../components/cards');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        DashboardActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n        // Lists\n    const ActivityList = ActivityListFactory({});\n    const PipelineList = PipelineListFactory({});\n    const TipCard = TipCardFactory({});\n    const TodoList = TodoListFactory({});\n    const UpcomingConfirmedList = UpcomingConfirmedListFactory({});\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        updateDashboardStore,\n        loadDashboard\n    } = DashboardActionsFactory({});\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dashboard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            auth: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'dashboard',\n            'speakerInfo',\n            'auth'\n        ]\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debugging message\n         */\n        displayName: 'DashboardView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin, ViewMixin],\n        /**\n         * Sets up the Service radio channels we are interacting with\n         *\n         * @returns {object}\n         */\n        RadioService_setup() {\n            const {\n                dispatch\n            } = this.props;\n\n            let radios = {};\n\n            radios[RADIOS.services.LOAD_DASHBOARD] = {\n                key() {\n                    const {\n                        speakerInfo,\n                        auth\n                    } = this.props;\n\n                    let company = auth.get('authedUserSession').get(\"balboa\").get(\"company\") || 2;\n\n                    return `${speakerInfo.get('selectedSpeaker').get('sid')}_${company}`;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        dispatch(updateDashboardStore(_.assign({\n                            lastUpdated: new Date()\n                        }, data)));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        // TODO: i18n error messages\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            return radios;\n        },\n        /**\n         * Triggers when the component receives a new set of properties.  Refreshes the screen if a new selectedSpeaker\n         * is passed in.\n         *\n         * @param nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const {\n                speakerInfo,\n                auth\n            } = nextProps;\n\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n            const currentSpeakerInfo = this.props.speakerInfo;\n            const currentSelectedSpeaker = currentSpeakerInfo.get('selectedSpeaker');\n\n            let speakerMismatch = (currentSelectedSpeaker &&\n            selectedSpeaker &&\n            selectedSpeaker.get('sid') &&\n            currentSelectedSpeaker.get('sid') &&\n            currentSelectedSpeaker.get('sid').toString() !== selectedSpeaker.get('sid').toString());\n\n            if (speakerMismatch) {\n                if (isEspeakers()) {\n                    loadDashboard({\n                        sid: selectedSpeaker.get('sid')\n                    });\n                } else {\n                    loadDashboard({\n                        sid: selectedSpeaker.get('sid'),\n                        company_id: auth.get('authedUserSession').get(\"balboa\").get(\"company\")\n                    });\n                }\n            }\n        },\n        /**\n         * Triggers after the component and all child components render.  Calls to load the dashboard data\n         */\n        componentDidMount() {\n            const {\n                dashboard,\n                speakerInfo,\n                auth\n            } = this.props;\n\n            if (speakerInfo &&\n                speakerInfo.get('selectedSpeaker') &&\n                speakerInfo.get('selectedSpeaker').get('sid') && !dashboard.get('lastUpdated')) {\n                if (isEspeakers()) {\n                    loadDashboard({\n                        sid: speakerInfo.get('selectedSpeaker').get('sid')\n                    });\n                } else {\n                    loadDashboard({\n                        sid: speakerInfo.get('selectedSpeaker').get('sid'),\n                        company_id: auth.get('authedUserSession').get(\"balboa\").get(\"company\")\n                    });\n                }\n            }\n        },\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {\n                dashboard\n            } = this.props;\n\n            // if (!dashboard.get('lastUpdated')) {\n            //     return <div></div>;\n            // }\n\n            return <div>\n                {isEspeakers() ?\n                    <PipelineList/>\n                    : null}\n\n                {isEspeakers() ?\n                    <TipCard/>\n                    : null}\n\n                {isEspeakers() ?\n                    <TodoList canComplete={false}/>\n                    : null}\n\n                <ActivityList/>\n\n                <UpcomingConfirmedList/>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { DashboardViewFactory }\n","/**\n * Generates CalendarView Component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes RadioServiceMixin\n * @mixes ViewMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst CalendarViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const moment = require('moment');\n    const {\n        RadioServiceMixin,\n        radio\n    } = require('react-pubsub-via-radio.js');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Factories\n    const {\n        CalendarLegendDialogFactory\n    } = require('../components/dialogs');\n    const {EventCalendarFactory} = require('../components/eventCalendar/EventCalendar');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const DateTools = require('../util/DateTools').default({});\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        CalendarActionsFactory,\n        DialogActionsFactory,\n        EventActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const CalendarLegendDialog = CalendarLegendDialogFactory({});\n    const EventCalendar = EventCalendarFactory({});\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        loadCalendarData,\n        mergeCalendarData,\n        updateSelectedMonthYear,\n        updateSelectorYear\n    } = CalendarActionsFactory({});\n    const {\n        showLegend,\n        closeDialog\n    } = DialogActionsFactory({});\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        setHeaderActions\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _legendClickHandler;\n    let _loadCalendarData;\n    let _todayClickHandler;\n\n    /**\n     *\n     *\n     * @param event\n     * @private\n     */\n    _legendClickHandler = (event, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        stopProp(event);\n\n        dispatch(showLegend());\n    };\n\n    /**\n     *\n     *\n     * @param inst\n     * @private\n     */\n    _loadCalendarData = (props) => {\n        const {\n            speakerInfo,\n            calendar\n        } = props;\n\n        const selectedYear = calendar.get('selectedYear');\n        const selectedMonth = calendar.get('selectedMonth');\n        const calendarData = calendar.get('calendarData');\n\n        if (!calendarData.get(`${selectedYear}-${selectedMonth}`)) {\n            loadCalendarData(speakerInfo.get('selectedSpeaker'),\n                selectedYear,\n                selectedMonth);\n        }\n    };\n\n    /**\n     *\n     * @param event\n     * @param inst\n     * @private\n     */\n    _todayClickHandler = (event, inst) => {\n        stopProp(event);\n\n        const {\n            dispatch\n        } = inst.props;\n\n        const today = moment();\n\n        dispatch(updateSelectedMonthYear({\n            selectedMonth: today.month() + 1,\n            selectedYear: today.year()\n        }));\n\n        dispatch(updateSelectorYear({\n            selectorYear: today.year()\n        }));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired,\n            dialog: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'dialog',\n            'calendar',\n            'speakerInfo'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass(_.assign({}, {\n        /**\n         * Used for debug messages\n         */\n        displayName: 'CalendarView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin],\n        /**\n         * Registers the service channels we will be interacting with\n         *\n         * @returns {*}\n         */\n        RadioService_setup() {\n            const {\n                dispatch\n            } = this.props;\n\n            let radios = {};\n\n            radios[RADIOS.services.LOAD_CALENDAR] = {\n                key() {\n                    return RADIOS.services.LOAD_CALENDAR;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n\n                        dispatch(mergeCalendarData(data));\n                        dispatch(hideLoading());\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            return radios;\n        },\n        /**\n         * Invoked once immediately after the initial rendering occurs\n         */\n        componentDidMount() {\n            const {\n                speakerInfo\n            } = this.props;\n\n            if (speakerInfo && speakerInfo.get('selectedSpeaker')) {\n                _loadCalendarData(this.props);\n            }\n\n            this.updateHeaderActions();\n        },\n        /**\n         * Invoked when a component is receiving new props. This method is not\n         * called for the initial render.\n         *\n         * @param nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const {\n                calendar,\n                speakerInfo\n            } = nextProps;\n\n            // Only load calendar data if we don't have any for that date\n            const calendarData = calendar.get('calendarData');\n            const selectedYear = calendar.get('selectedYear');\n            const selectedMonth = calendar.get('selectedMonth');\n\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n            const currentSpeakerInfo = this.props.speakerInfo;\n            const currentSelectedSpeaker = currentSpeakerInfo.get('selectedSpeaker');\n\n            // for a data load you need to have a sid, year, and month\n            if (selectedSpeaker && selectedYear && selectedMonth) {\n                let speakerSelected = (!currentSelectedSpeaker && selectedSpeaker);\n\n                let speakerMismatch = (currentSelectedSpeaker &&\n                    selectedSpeaker &&\n                    currentSelectedSpeaker.get('sid').toString() !== selectedSpeaker.get('sid').toString());\n\n                let missingCalendarData = !calendarData.get(`${selectedYear}-${selectedMonth}`);\n\n                if (speakerSelected || speakerMismatch || missingCalendarData) {\n                    _loadCalendarData(nextProps);\n                }\n            }\n        },\n        /**\n         * Updates the icons/actions in the header\n         *\n         * @override ViewMixin\n         */\n        updateHeaderActions() {\n            const {\n                dispatch\n            } = this.props;\n\n            dispatch(setHeaderActions([{\n                onClick: (e) => {\n                    stopProp(e);\n\n                    _todayClickHandler(e, this);\n                },\n                primary: true,\n                label: getText('Today'),\n                iconClass: 'my-location'\n            }, {\n                onClick: (e) => {\n                    stopProp(e);\n\n                    _legendClickHandler(e, this);\n                },\n                primary: false,\n                label: getText('Legend'),\n                iconClass: 'info'\n            }]));\n        },\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                dialog,\n                dispatch\n            } = this.props;\n\n            const showLegend = dialog.get('showLegend');\n\n            return <div className='calendar-view'>\n                <CalendarLegendDialog\n                    widgetId='calendar-legend'\n                    showWidget={showLegend}\n                    onClose={() => {\n                        dispatch(closeDialog());\n                    }}\n                />\n\n                <EventCalendar/>\n\n            </div>;\n        }\n    }));\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CalendarViewFactory }\n","/**\n * Generates a NewEventView component\n *\n * @param spec\n * @returns {*}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst NewEventViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n    const moment = require('moment');\n\n    // Radio\n    const {\n        RadioServiceMixin,\n        radio\n    } = require('react-pubsub-via-radio.js');\n\n    // Factories\n    const {NewEventFormFactory} = require('../forms/NewEventForm');\n    const {FormLoadingFactory} = require('../components/FormLoading');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Radio\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const DateToolsFactory = require('../util/DateTools').default;\n    const {\n        isSolutionTree\n    } = require('../util/Platform').default;\n    // Actions\n    const {\n        EventActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        selectEvent\n    } = EventActionsFactory({});\n    const {\n        hideLoading,\n        showLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildDateTimeString;\n    let _submitHandler;\n\n    /**\n     * Handles the NewEventForm submission\n     * @param {object} form - Form values\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            speakerInfo,\n            auth\n        } = inst.props;\n\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n        let sid = _.parseInt(selectedSpeaker.get('sid'));\n\n        let startDateTime = DateTools.mergeDate(form.startDate, form.startTime);\n        let stopDateTime = DateTools.mergeDate(form.stopDate, form.stopTime);\n\n        let stageTime = {};\n\n        if (startDateTime) {\n            stageTime = {\n                Stagetime: [\n                    {\n                        starttime: startDateTime,\n                        stoptime: stopDateTime\n                    }\n                ]\n            };\n        }\n\n        let newEvent = _.assign({\n            eid: 0,\n            companyId: auth.get(\"sessionData\").get(\"company\") || 2,\n            sids: [sid],\n            zoomUrl: ((_.has(form, ['zoomUrl']) && !_.isEmpty(form['zoomUrl']) && !_.startsWith(_.toLower(form['zoomUrl']), 'http://') && !_.startsWith(_.toLower(form['zoomUrl']), 'https://')) ? ('https://' + form['zoomUrl']) : form['zoomUrl']),\n            organization: form.organization,\n            status: form.status,\n            isPersonal: form.personal,\n            deliveryMethod: form.deliveryMethod,\n            bureauID: esUtils.toInt(form.bureau),\n            todolistids: [{\n                sid: sid,\n                listid: _.parseInt(form.todolist || 0)\n            }]\n        }, stageTime);\n\n        if (!isSolutionTree()) {\n            _.set(newEvent, [\"pd_rep_id\"], esUtils.toInt(form.pd_rep_id));\n            _.set(newEvent, [\"sales_rep_id\"], esUtils.toInt(form.sales_rep_id));\n            _.set(newEvent, [\"project_manager_id\"], esUtils.toInt(form.project_manager_id));\n        }\n\n        radio(RADIOS.services.SAVE_EVENT).broadcast({\n            event: newEvent\n        });\n    };\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired,\n            auth: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'view',\n            'speakerInfo',\n            'auth'\n        ]\n    });\n\n    const NewEventForm = NewEventFormFactory({});\n    const FormLoading = FormLoadingFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'NewEventView',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin],\n        /**\n         * Sets up the Service Radio channels we are interacting with\n         *\n         * @returns {object}\n         */\n        RadioService_setup() {\n            const {\n                dispatch\n            } = this.props;\n\n            let radios = {};\n\n            radios[RADIOS.services.SAVE_EVENT] = {\n                key() {\n                    return \"0\"; //RADIOS.services.SAVE_EVENT.toString();\n                },\n                on: {\n                    waiting() {\n                        // dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        if (data && data.event && data.event.eid) {\n                            dispatch(selectEvent({\n                                event: data.event\n                            }));\n                        }\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            return radios;\n        },\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <NewEventForm\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }\n                    />\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { NewEventViewFactory }","/**\n * Generates the SearchView component\n *\n * @param {object} spec - Container for named parameters\n * @property {boolean} spec.noHeader - If the view is being loaded with no header\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SearchViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        is\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {SearchFormFactory} = require('../forms/SearchForm');\n    const {MessageListFactory, SearchListFactory} = require('../components/list');\n\n    // Radios\n    const {\n        RadioServiceMixin,\n        radio\n    } = require('react-pubsub-via-radio.js');\n    const RADIOS = require('../enums/RADIOS').default;\n    const EVENT_STATUSES = require('../enums/EVENT_STATUSES').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n\n    // Utilities\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Actions\n    const {\n        LoadingActionsFactory,\n        MessageActionsFactory,\n        SearchActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const {\n        noHeader\n    } = spec;\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        hideLoading,\n        showLoading\n    } = LoadingActionsFactory({});\n    const {\n        addMessage,\n        clearMessages\n    } = MessageActionsFactory({});\n    const {\n        updateSearchStore,\n        clearSearch,\n        searchEvents\n    } = SearchActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MessageList = MessageListFactory({});\n    const SearchForm = SearchFormFactory({});\n    const SearchList = SearchListFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     * Handles Search Form submission\n     *\n     * @param {object} form - Form values\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            speakerInfo\n        } = inst.props;\n\n        if (speakerInfo.get('selectedSpeaker')) {\n            // reset the state and clear the view then run the search again\n            dispatch(clearSearch());\n\n            dispatch(clearMessages());\n\n            dispatch(updateSearchStore({\n                searchTerm: form.search\n            }));\n\n            let excludeEventTypes = [EVENT_STATUSES.EVENT_STATUSES.zimbra, EVENT_STATUSES.EVENT_STATUSES.closed];\n\n            if (!form.includeCanceled) {\n                excludeEventTypes.push(EVENT_STATUSES.EVENT_STATUSES.canceled);\n            }\n\n            searchEvents(_.assign({}, form, {\n                sid: speakerInfo.get('selectedSpeaker').get('sid'),\n                excludeEventTypes: excludeEventTypes\n            }));\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            search: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'search',\n            'speakerInfo'\n        ]\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interfaces\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SearchView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin, ViewMixin],\n        /**\n         * Sets up the Service radio channels we are interacting with\n         *\n         * @returns {object}\n         */\n        RadioService_setup() {\n            const {\n                dispatch\n            } = this.props;\n\n            let radios = {};\n\n            radios[RADIOS.services.SEARCH_EVENTS] = {\n                key() {\n                    const {\n                        speakerInfo\n                    } = this.props;\n\n                    return speakerInfo.get('selectedSpeaker').get('sid').toString();\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        data.autoSearch = false;\n\n                        let hasResults = (data && data.results && data.results.length > 0);\n                        data.noResults = !hasResults;\n\n                        dispatch(updateSearchStore(data));\n\n                        if (!data || !data.results || !data.results.length) {\n                            dispatch(addMessage({\n                                text: getText('No Events Found'),\n                                type: 'info'\n                            }));\n                        }\n\n                        if (data.description && data.description.length) {\n                            dispatch(addMessage({\n                                text: data.description,\n                                type: 'info'\n                            }));\n                        }\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(addMessage({\n                            text: error,\n                            type: 'error'\n                        }));\n                    }\n                }\n            };\n\n            return radios;\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                isTablet\n            } = this.props;\n\n            return <div style={{\n                height: '100%'\n            }}>\n                <div style={{\n                    position: 'fixed',\n                    top: '66px',\n                    width: (isTablet ? '256px' : '100%'),\n                    zIndex: 10\n                }}>\n                    <SearchForm\n                        ref='searchForm'\n                        isTablet={isTablet}\n                        onSubmit={(e) => {\n                            _submitHandler(e, this);\n                        }}/>\n                </div>\n\n                <div style={{\n                    position: 'relative',\n                    paddingTop: (isTablet ? '150px' : '145px'),\n                    bottom: '56px',\n                    overflowY: 'scroll',\n                    overflowX: 'hidden',\n                    width: '100%'\n                }}>\n                    <MessageList/>\n                    <SearchList/>\n                </div>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SearchViewFactory }","/**\n * Creates a SettingsView React Component\n *\n * @param spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SettingsViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Factories\n    const MUIButtonGroupFactory = require('../forms/MUIButtonGroup').default;\n    const {SpeakerListFactory} = require('../components/list/SpeakerList');\n    const {ResponsiveLog} = require('../components/ResponsiveLog');\n    const {SectionHeaderFactory} = require('../components/SectionHeader');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    const Platform = require('../util/Platform').default;\n\n// Actions\n    const {\n        AuthActionsFactory,\n        DisplayDataActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const versionNumber = process.env.PACKAGE_JSON_VERSION;\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        logout\n    } = AuthActionsFactory({});\n    const {\n        refreshDisplayData\n    } = DisplayDataActionsFactory({});\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        changeMainView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /*********************************\n     * Factories\n     *********************************/\n\n    const ButtonGroup = MUIButtonGroupFactory({});\n    const SpeakerList = SpeakerListFactory({});\n    const SectionHeader = SectionHeaderFactory({});\n\n    /*********************************\n     * Methods\n     *********************************/\n\n    let _logoutTouchHandler;\n    let _refreshDataTouchHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _logoutTouchHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(logout());\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _refreshDataTouchHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        // We don't want this to happen silently\n        dispatch(refreshDisplayData(false));\n        dispatch(changeMainView(VIEWS.mainViews.CALENDAR_VIEW));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SettingsView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, ViewMixin],\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                speakerInfo\n            } = this.props;\n\n            const speakerList = speakerInfo.get('speakerList');\n\n            return <div className=\"settings\">\n                <ButtonGroup buttons={[\n                    {\n                        props: {\n                            label: getText('Refresh Data'),\n                            onClick: (e) => {\n                                stopProp(e);\n\n                                _refreshDataTouchHandler(this);\n                            }\n                        }\n                    },\n                    {\n                        props: {\n                            label: getText('Logout'),\n                            onClick: (e) => {\n                                stopProp(e);\n\n                                _logoutTouchHandler(this);\n                            }\n                        }\n                    }\n                ]}/>\n\n                {(speakerList && speakerList.size > 1) ? (\n                        <div>\n                            <SectionHeader>{getText('Select Speaker')}</SectionHeader>\n\n                            <SpeakerList/>\n\n                        </div>\n                    ) : null}\n\n                {(versionNumber && versionNumber.toString().length ?\n                    <div className='version-number'>\n                        {`Version: ${versionNumber.toString()}`}\n                    </div>\n                    : null)}\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SettingsViewFactory }","// event views\nimport { ContactsViewFactory } from './eventViews/ContactsView';\nimport { CustomViewFactory } from './eventViews/CustomView';\nimport { DetailsViewFactory } from './eventViews/DetailsView';\nimport { JobEventViewFactory } from './eventViews/JobEventView';\nimport { LibraryViewFactory } from './eventViews/LibraryView';\nimport { MiscViewFactory } from './eventViews/MiscView';\nimport { ServicesViewFactory } from './eventViews/ServicesView';\nimport { TodoListViewFactory } from './eventViews/TodoListView';\nimport { TravelViewFactory } from './eventViews/TravelView';\n\n// main views\nimport { DashboardViewFactory } from './DashboardView';\nimport { CalendarViewFactory } from './CalendarView';\nimport { LoginViewFactory } from './LoginView';\nimport { NewEventViewFactory } from './NewEventView';\nimport { SearchViewFactory } from './SearchView';\nimport { SettingsViewFactory } from './SettingsView';\n\n// job views\nimport { ConfirmedEventsViewFactory } from './jobViews/ConfirmedEventsView';\nimport { JobApplyViewFactory } from './jobViews/JobApplyView';\nimport { JobApplyConfirmationViewFactory } from './jobViews/JobApplyConfirmationView';\nimport { JobBoardViewFactory } from './jobViews/JobBoardView';\nimport { JobDetailViewFactory } from './jobViews/JobDetailView';\nimport { JobMessagesViewFactory } from './jobViews/JobMessagesView';\nimport { LeadOfferDetailViewFactory } from './jobViews/LeadOfferDetailView';\nimport { LeadsOffersViewFactory } from './jobViews/LeadsOffersView';\nimport { PayoutDetailViewFactory } from './jobViews/PayoutDetailView';\n\nconst eventViews = {\n    ContactsViewFactory,\n    CustomViewFactory,\n    DetailsViewFactory,\n    JobEventViewFactory,\n    LibraryViewFactory,\n    MiscViewFactory,\n    ServicesViewFactory,\n    TodoListViewFactory,\n    TravelViewFactory\n};\n\nconst mainViews = {\n    DashboardViewFactory,\n    CalendarViewFactory,\n    LoginViewFactory,\n    NewEventViewFactory,\n    SearchViewFactory,\n    SettingsViewFactory\n};\n\nconst jobViews = {\n    ConfirmedEventsViewFactory,\n    JobApplyViewFactory,\n    JobApplyConfirmationViewFactory,\n    JobBoardViewFactory,\n    JobDetailViewFactory,\n    JobMessagesViewFactory,\n    LeadOfferDetailViewFactory,\n    LeadsOffersViewFactory,\n    PayoutDetailViewFactory\n};\n\nexport {\n    mainViews,\n    eventViews,\n    jobViews,\n    DashboardViewFactory,\n    CalendarViewFactory,\n    LoginViewFactory,\n    NewEventViewFactory,\n    SearchViewFactory,\n    SettingsViewFactory\n}","/**\n * Generates a ListMessages Component.  This is for displaying error, warning,\n * and info messages inside a ListView component.\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ListMessagesFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Factories\n    const {\n        MessageCardFactory\n    } = require('../cards');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const MessageCard = MessageCardFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            messages: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used for debug messaging\n         */\n        displayName: 'ListMessages',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates virtual HTML/DOM\n         *\n         * @returns {Array}\n         */\n        render() {\n            const {\n                messages\n            } = this.props;\n\n            return <div>\n                        {messages.map((message, i) => {\n                            return <MessageCard key={i}\n                                                message={message} />;\n                        })}\n                    </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ListMessagesFactory }","/**\n *\n * @param spec\n * @returns {XML}\n * @constructor\n */\nconst MessageSnacksFactory = (spec) => {\n\n    //-------------------------------------------------------------------------\n    //\n    // Imports\n    //\n    //-------------------------------------------------------------------------\n\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Material UI\n    const Snackbar = require('material-ui/Snackbar').default;\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const AutoShouldUpdateMixinFactory = require('../../mixins/AutoShouldUpdateMixin').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        MessageActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //-------------------------------------------------------------------------\n    //\n    // Private Members\n    //\n    //-------------------------------------------------------------------------\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        clearMessages\n    } = MessageActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _determineStyle;\n\n    /**\n     *\n     * @param message\n     * @returns {object}\n     * @private\n     */\n    _determineStyle = (message) => {\n        let style = {};\n\n        if (!message)\n            return style;\n\n        let type = message.get('type');\n\n        if (type === 'info') {\n            style = {\n                color: mainTheme.infoBackgroundColor\n            };\n        } else if (type === 'error') {\n            style = {\n                color: mainTheme.errorBackgroundColor\n            };\n        } else if (type === 'warning') {\n            style = {\n                color: mainTheme.warningBackgroundColor\n            };\n        } else if (type === 'success') {\n            style = {\n                color: mainTheme.successBackgroundColor\n            };\n        }\n\n        return style;\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            messages: PropTypes.object.isRequired\n        }\n    });\n\n    //-------------------------------------------------------------------------\n    //\n    // Public Interface\n    //\n    //-------------------------------------------------------------------------\n\n    let component = createClass({\n        render() {\n            const {dispatch, messages} = this.props;\n\n            let message = messages.first();\n\n            if (!message)\n                return <div></div>;\n\n            let bgColor = 'white';\n\n            return <Snackbar\n                className='message-snack'\n                message={<div>\n                    <div style={_.assign(_determineStyle(message), {\n                        fontWeight: 'bold',\n                        fontSize: '14px'\n                    })}>{message.get('type').toUpperCase()}</div>\n                    <div style={{\n                        maxHeight: '128px',\n                        overflow: 'scroll',\n                        lineHeight: 1.5\n                    }}>\n                        {message.get('text')}\n                    </div>\n                </div>}\n                style={{\n                    backgroundColor: bgColor,\n                    height: 'auto',\n                    boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n                }}\n                contentStyle={{\n                    backgroundColor: bgColor,\n                    color: 'black',\n                    height: 'auto'\n                }}\n                bodyStyle={_.assign(_determineStyle(message), {\n                    backgroundColor: bgColor,\n                    height: 'auto'\n                })}\n                open={(!!message)}\n                autoHideDuration={7000}\n                action={getText('OK').toUpperCase()}\n                onRequestClose={(e) => {\n                    dispatch(clearMessages());\n                }}\n                onActionTouchTap={(e) => {\n                    dispatch(clearMessages());\n                }}\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { MessageSnacksFactory }","export default {\n    st: '1.0.7',\n    main: '3.0.12.0'\n};","/**\n * This is largely copied over from My Events.  Handles a lot of authentication\n * logic.\n *\n * @param {object} spec\n */\nconst AuthedUserSessionFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n\n    // Utilities\n    const esUtils = require('ES/utils/esUtils');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    const {\n        sessionData\n    } = spec;\n\n    const packages = {\n        STARTER: 7,\n        PLUS: 6,\n        PROFESSIONAL: 5,\n        PRO: 5\n    };\n\n    sessionData.balboa = {};\n\n    _.map(sessionData, (value, key) => {\n        if (key !== 'permissions' && key !== 'balboa') {\n            sessionData.balboa[key] = value;\n        }\n    });\n\n    let getSIDsAtAccessLevels = null;\n    let getSIDsNotAtAccessLevels = null;\n    let getSIDsAtPackageLevel = null;\n    let getEventSIDsNotAtAccessLevel = null;\n\n\n    getSIDsAtAccessLevels = (levels) => {\n        if (!_.isArray(levels)) {\n            levels = [levels];\n        }\n        return _.map(_.filter(_.toPairs(sessionData.permissions), (pair) => {\n            return _.includes(levels, pair[1].access);\n        }), (pair) => {\n            return _.parseInt(pair[0]);\n        });\n    };\n\n    getSIDsNotAtAccessLevels = (levels) => {\n        if (!_.isArray(levels)) {\n            levels = [levels];\n        }\n        return _.map(_.reject(_.toPairs(sessionData.permissions), (pair) => {\n            return _.includes(levels, pair[1].access);\n        }), (pair) => {\n            return _.parseInt(pair[0]);\n        });\n    };\n\n    getSIDsAtPackageLevel = (level) => {\n        if (!_.isString(level) || !packages[level.toUpperCase()]) {\n            return null;\n        }\n        let level_num = packages[level.toUpperCase()];\n        return _.map(_.filter(_.toPairs(_.mapValues(sessionData.permissions, 'version')), (pair) => {\n            return pair[1] === level_num;\n        }), (pair) => {\n            return _.parseInt(pair[0]);\n        });\n    };\n\n    getEventSIDsNotAtAccessLevel = (event, levels) => {\n        let sids_at_level = getSIDsAtAccessLevels(levels);\n        return _.reject(event.sids, (sid) => {\n            return _.includes(sids_at_level, sid);\n        });\n    };\n\n    let MY_USERNAME = sessionData.balboa && sessionData.balboa.username;\n    MY_USERNAME = _.isString(MY_USERNAME) ? MY_USERNAME.trim().toUpperCase() : 'ME';\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return {\n        balboa: sessionData.balboa || {},\n        permissions: sessionData.permissions || {},\n        balboa2_ical_token: sessionData.balboa2_ical_token || '',\n        getSIDsAtAccessLevels: getSIDsAtAccessLevels,\n        getSIDsNotAtAccessLevels: getSIDsNotAtAccessLevels,\n        getSIDsAtPackageLevel: getSIDsAtPackageLevel,\n        is_logged_in: MY_USERNAME !== 'ME',\n        MY_USERNAME: MY_USERNAME,\n\n        //utility functions\n        // TODO: Security restrictions need to be implemented\n        getSIDsCanViewDashboard() {\n            return getSIDsAtAccessLevels(['ADMN', 'SPKR', 'FULL', 'READ']);\n        },\n        getEventSIDsNotAtAccessLevel: getEventSIDsNotAtAccessLevel,\n        eventOnlyHasAccessLevels(event, levels) {\n            return getEventSIDsNotAtAccessLevel(event, levels).length === 0;\n        }\n    };\n}\n\nexport default AuthedUserSessionFactory;","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst {Record} = require('immutable');\n\n// Models\nconst DialogItemModel = require('./DialogItemModel').default;\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\nexport default Record({\n    undoConfirmation: DialogItemModel(),\n    exitDirtyConfirmation: DialogItemModel(),\n    deleteConfirmation: DialogItemModel(),\n    copyEventConfirmation: DialogItemModel(),\n    confirmedEventsDialog: DialogItemModel(),\n    showLegend: false,\n    showSpeakerSelector: DialogItemModel()\n});","module.exports = {\n    'en_US': require('./json/en_US.json')\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an ContactStore.  Handles all state changes to the contacts\n * area of the state\n *\n * @param {object} spec\n * @property {function} spec.deleteListItem\n * @property {function} spec.updateList\n * @returns {object}\n * @constructor\n */\nconst ContactStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {deleteListItem, updateList} = spec;\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteContact;\n    let _saveContact;\n    let _selectContact;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _deleteContact = (payload, event) => {\n        return deleteListItem(payload, event, 'EventContact');\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _saveContact = (payload, event) => {\n        return updateList(payload, event, 'EventContact');\n    };\n\n    /**\n     *\n     * @param payload\n     * @param event\n     * @returns {*}\n     * @private\n     */\n    _selectContact = (payload, event) => {\n        const selectedContact = fromJS(payload);\n\n        return event.set('selectedContact', selectedContact);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {Record|EventModel} event\n     * @param {object} action\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_DELETE_CONTACT:\n                return _deleteContact(payload, event);\n            case RADIOS.stores.EVENT_STORE_SAVE_CONTACT:\n                return _saveContact(payload, event);\n            case RADIOS.stores.EVENT_STORE_SELECT_CONTACT:\n                return _selectContact(payload, event);\n        }\n\n        return event;\n    };\n}\n\nexport {\n    ContactStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an VenueStore.  Handles all state changes to the Note\n * area of the state\n *\n * @param {object} spec\n * @property {function} spec.deleteListItem\n * @property {function} spec.updateList\n * @returns {object}\n * @constructor\n */\nconst NoteStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {deleteListItem, updateList} = spec;\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _saveNote;\n    let _selectNote;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _saveNote = (payload, event) => {\n        return updateList(payload, event, 'Note');\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _selectNote = (payload, event) => {\n        const selectedNote = fromJS(payload);\n\n        return event.set('selectedNote', selectedNote);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {Record|EventModel} event\n     * @param {object} action\n     *\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_SAVE_NOTE:\n                return _saveNote(payload, event);\n            case RADIOS.stores.EVENT_STORE_SELECT_NOTE:\n                return _selectNote(payload, event);\n        }\n\n        return event;\n    };\n}\n\nexport {\n    NoteStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an ProductStore.  Handles all state changes to the products\n * area of the state\n *\n * @param {object} spec\n * @property {function} spec.deleteListItem\n * @property {function} spec.updateList\n * @returns {object}\n * @constructor\n */\nconst ProductStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {deleteListItem, updateList} = spec;\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteProduct;\n    let _saveProduct;\n    let _selectProduct;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _deleteProduct = (payload, event) => {\n        return deleteListItem(payload, event, 'ProductSale');\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _saveProduct = (payload, event) => {\n        return updateList(payload, event, 'ProductSale');\n    };\n\n    /**\n     *\n     * @param payload\n     * @param event\n     * @private\n     */\n    _selectProduct = (payload, event) => {\n        const selectedProduct = fromJS(payload);\n\n        return event.set('selectedProduct', selectedProduct);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {Record|EventModel} event\n     * @param {object} action\n     *\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_DELETE_PRODUCT:\n                return _deleteProduct(payload, event);\n            case RADIOS.stores.EVENT_STORE_SAVE_PRODUCT:\n                return _saveProduct(payload, event);\n            case RADIOS.stores.EVENT_STORE_SELECT_PRODUCT:\n                return _selectProduct(payload, event);\n        }\n\n        return event;\n    };\n}\n\nexport {\n    ProductStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an ServiceStore.  Handles all state changes to the services\n * area of the state\n *\n * @param {object} spec\n * @property {function} spec.deleteListItem\n * @property {function} spec.updateList\n * @returns {object}\n * @constructor\n */\nconst ServiceStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {deleteListItem, updateList} = spec;\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteService;\n    let _saveService;\n    let _selectService;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _deleteService = (payload, event) => {\n        return deleteListItem(payload, event, 'Service');\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _saveService = (payload, event) => {\n        return updateList(payload, event, 'Service');\n    };\n\n    /**\n     *\n     * @param payload\n     * @param event\n     * @private\n     */\n    _selectService = (payload, event) => {\n        const selectedService = fromJS(payload);\n\n        return event.set('selectedService', selectedService);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {Record|EventModel} event\n     * @param {object} action\n     *\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_DELETE_SERVICE:\n                return _deleteService(payload, event);\n            case RADIOS.stores.EVENT_STORE_SAVE_SERVICE:\n                return _saveService(payload, event);\n            case RADIOS.stores.EVENT_STORE_SELECT_SERVICE:\n                return _selectService(payload, event);\n        }\n\n        return event;\n    };\n}\n\nexport {\n    ServiceStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an StageTimeStore.  Handles all state changes to the stageTimes\n * area of the state\n *\n * @param {object} spec\n * @property {function} spec.deleteListItem\n * @property {function} spec.updateList\n * @returns {object}\n * @constructor\n */\nconst StageTimeStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {deleteListItem, updateList} = spec;\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteStageTime;\n    let _saveStageTime;\n    let _selectStageTime;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _deleteStageTime = (payload, event) => {\n        return deleteListItem(payload, event, 'Stagetime');\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _saveStageTime = (payload, event) => {\n        return updateList(payload, event, 'Stagetime');\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _selectStageTime = (payload, event) => {\n        const selectedStageTime = fromJS(payload);\n\n        return event.set('selectedStageTime', selectedStageTime);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {Record|EventModel} event\n     * @param {object} action\n     *\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_DELETE_STAGETIME:\n                return _deleteStageTime(payload, event);\n            case RADIOS.stores.EVENT_STORE_SAVE_STAGETIME:\n                return _saveStageTime(payload, event);\n            case RADIOS.stores.EVENT_STORE_SELECT_STAGETIME:\n                return _selectStageTime(payload, event);\n        }\n\n        return event;\n    };\n}\n\nexport {\n    StageTimeStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an TodoStore.  Handles all state changes to the todo's\n * area of the state\n *\n * @param {object} spec\n * @property {function} spec.deleteListItem\n * @property {function} spec.updateList\n * @returns {object}\n * @constructor\n */\nconst TodoStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {deleteListItem, updateList} = spec;\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _deleteTodo;\n    let _saveTodo;\n    let _selectTodo;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _deleteTodo = (payload, event) => {\n        return deleteListItem(payload, event, 'EventTodo');\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _saveTodo = (payload, event) => {\n        return updateList(payload, event, 'EventTodo');\n    };\n\n    /**\n     *\n     * @param payload\n     * @param event\n     * @returns {*}\n     * @private\n     */\n    _selectTodo = (payload, event) => {\n        const selectedTodo = fromJS(payload);\n\n        return event.set('selectedTodo', selectedTodo);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {Record|EventModel} event\n     * @param {object} action\n     *\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_DELETE_TODO:\n                return _deleteTodo(payload, event);\n            case RADIOS.stores.EVENT_STORE_SAVE_TODO:\n                return _saveTodo(payload, event);\n            case RADIOS.stores.EVENT_STORE_SELECT_TODO:\n                return _selectTodo(payload, event);\n        }\n\n        return event;\n    };\n}\n\nexport {\n    TodoStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an VenueStore.  Handles all state changes to the venues\n * area of the state\n *\n * @param {object} spec\n * @property {function} spec.deleteListItem\n * @property {function} spec.updateList\n * @returns {object}\n * @constructor\n */\nconst VenueStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {deleteListItem, updateList} = spec;\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _saveVenue;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _saveVenue = (payload, event) => {\n        return updateList(payload, event, 'Venue');\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {Record|EventModel} event\n     * @param {object} action\n     *\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_SAVE_VENUE:\n                return _saveVenue(payload, event);\n        }\n\n        return event;\n    };\n}\n\nexport {\n    VenueStoreFactory\n};","const _ = require('lodash');\n\nfunction ArrayDispatchMiddleware() {\n    return (next) => {\n        return (action) => {\n            if (!_.isArray(action)) {\n                return next(action);\n            }\n\n            _.map(action, (a) => {\n                next(a);\n            });\n        };\n    };\n}\n\nexport default ArrayDispatchMiddleware;","/* global navigator */\n\n/**\n * Creates the MainView React Components\n *\n * @param {object} spec - Container for all named parameters\n * @constructor\n *\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n *\n * @return {function}\n */\nconst MainViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const Balboa = require('ES/services/Balboa');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const Immutable = require('immutable');\n    const {\n        is,\n        fromJS\n    } = Immutable;\n    const {\n        connect\n    } = require('react-redux');\n\n    // Material UI\n    const MuiThemeProvider = require('material-ui/styles/MuiThemeProvider').default;\n    const ThemeOverride = require('../theme/mui/ThemeOverride').default;\n\n    const Platform = require('../util/Platform').default;\n\n    // Services\n    const JobBoardService = require('../services/JobBoardService').default;\n\n    // Enums\n    const GENERAL = require('../enums/GENERAL').default;\n    const VIEWS = require('../enums/VIEWS').default;\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Factories\n    const {LoadingScreenFactory} = require('../components/LoadingScreen');\n    const {LoginViewFactory} = require('../views/LoginView');\n    const {NavigatorFactory} = require('./NavWrapperView');\n    const {SplashScreenFactory} = require('../components/SplashScreen');\n    const {PushManagerFactory} = require('../components/PushManager');\n\n    // Radios\n    const {\n        RadioServiceMixin,\n        radio\n    } = require(\"react-pubsub-via-radio.js\");\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Utilities\n    const {\n        convertToBalboaTrunkTimestamp\n    } = require('../util/DateTools').default({});\n    const {\n        convertBalboa3EventToJSEvent\n    } = require('ES/utils/esUtils');\n    const {\n        hasPush\n    } = require('../util/Platform').default;\n\n    // Actions\n    const {\n        AuthActionsFactory,\n        CompanyDataActionsFactory,\n        DialogActionsFactory,\n        DisplayDataActionsFactory,\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n        NavActionsFactory,\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    require('../services/index');\n    require('../forms/MUIInputs').default.install(require(\"react-loose-forms/InputTypes\"));\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        renewToken,\n        updateAuthStore\n    } = AuthActionsFactory({});\n    const {\n        closeDialog\n    } = DialogActionsFactory({});\n    const {\n        updateCompanyDataStore,\n        getCompanyLists\n    } = CompanyDataActionsFactory({});\n    const {\n        updateDisplayDataStore,\n        getDisplayLists\n    } = DisplayDataActionsFactory({});\n    const {\n        mergeEventData,\n        clearEvent,\n        clearEventAssociatedData,\n        fixCustomFields,\n        isMarketPlaceEvent,\n        selectEvent,\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        loadJobBoard,\n        loadJobMessages,\n        selectJob,\n        updateJobAgreement,\n        updateJobDetail,\n        updateJobBoardStore,\n        updateJobMessages\n    } = JobBoardActionsFactory();\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n    const {\n        changeEventView,\n        changeMainView,\n        setSubView,\n        clearSubView\n    } = NavActionsFactory({});\n    const {\n        updateShortProfile,\n        updateSpeakerInfoStore\n    } = SpeakerInfoActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        clearSubmitForm,\n        toggleKeyboardActive,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Views / Components\n     *********************************/\n\n    const LoadingScreen = LoadingScreenFactory({});\n    const LoginView = LoginViewFactory({});\n    const Navigator = NavigatorFactory({});\n    const PushManager = PushManagerFactory({});\n    const SplashScreen = SplashScreenFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _authHandler;\n    let _determineSpeaker;\n    let _determineView;\n    let _failToLogin;\n    let _initializeBalboa;\n    let _storeLoadedEvent;\n    let _verifyCompanyListsHandler;\n    let _verifyDisplayListsHandler;\n    let _verifyJobBoardHandler;\n\n    /**\n     * Handles post authentication.  Setups up the state and Balboa.\n     *\n     * @param {object} sessionData\n     * @param {object} inst\n     * @private\n     */\n    _authHandler = (sessionData, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        let speakerInfo = _determineSpeaker(sessionData.permissions, inst);\n\n        dispatch(updateAuthStore({\n            sessionData: sessionData\n        }));\n\n        dispatch(showLoading());\n\n        dispatch(updateSpeakerInfoStore(speakerInfo));\n    };\n\n    /**\n     * Takes in the various speaker collections, finds the correct one\n     * and merges with existing speaker information.\n     *\n     * @param {array|object} collection - Object or Array of speakers\n     * @param {object} inst - Reference to React Component\n     * @returns {object}\n     * @private\n     */\n    _determineSpeaker = (collection, inst) => {\n        const {\n            speakerInfo\n        } = inst.props;\n\n        let selectedSpeaker = speakerInfo.get('selectedSpeaker');\n\n        // determine speaker mode\n        let count = 0;\n        let determinedSpeaker = null;\n        let speakerList = [];\n\n        _.map(collection, (speaker, key) => {\n            count += 1;\n\n            speakerList.push(_.pick(speaker, ['sid', 'name_full']));\n\n            if (!selectedSpeaker || !selectedSpeaker.get('sid') ||\n                selectedSpeaker.get('sid') === \"undefined\") {\n                determinedSpeaker = speaker;\n            }\n            else if (speaker.sid &&\n                selectedSpeaker.get('sid') &&\n                speaker.sid.toString() === selectedSpeaker.get('sid').toString()) {\n                determinedSpeaker = _.assign({}, selectedSpeaker.toJS(), speaker);\n            }\n            else if (selectedSpeaker.get('sid') &&\n                key.toString() === selectedSpeaker.get('sid').toString()) {\n                determinedSpeaker = _.assign({}, selectedSpeaker.toJS(), speaker);\n            }\n\n            if (determinedSpeaker && !determinedSpeaker.sid) {\n                determinedSpeaker.sid = key;\n            }\n        });\n\n        let updatedSpeakerInfo = {\n            speakerMode: GENERAL.MULTIPLE_SPEAKER_MODE,\n            speakerList: speakerList\n        };\n\n        if (selectedSpeaker && determinedSpeaker && selectedSpeaker.get('sid').toString() === determinedSpeaker.sid.toString()) {\n            updatedSpeakerInfo = _.assign(updatedSpeakerInfo, {\n                selectedSpeaker: determinedSpeaker\n            });\n        }\n\n        if (count === 1) {\n            updatedSpeakerInfo = _.assign(updatedSpeakerInfo, {\n                speakerMode: GENERAL.SINGLE_SPEAKER_MODE,\n                selectedSpeaker: determinedSpeaker\n            });\n        }\n\n        return updatedSpeakerInfo;\n    };\n\n    /**\n     * Determines what sub view to show based on the current state.\n     *\n     * @param {object} inst - Reference to React Component\n     * @returns {XML} - React Component\n     * @private\n     */\n    _determineView = (inst) => {\n        let {\n            auth,\n            displayData,\n            companyData\n        } = inst.props;\n\n        if (!auth || !auth.get('authedUserSession') || !auth.get('authedUserSession').get('is_logged_in')) {\n\n            // if we are logging them in from a stored session token (renew token)\n            // don't show the login screen.  Show the splash screen instead\n            if (auth && auth.get('sessionData') && auth.get('sessionData').get('token')) {\n                return <SplashScreen/>;\n            }\n            else {\n                return <LoginView/>;\n            }\n        }\n\n        if (!displayData || !displayData.get('timestamp') || !companyData || !companyData.get('timestamp')) {\n            return <SplashScreen/>;\n        }\n\n        return <Navigator/>;\n    };\n\n    /**\n     * Handles any case of authentication failure and sets up the state accordingly\n     *\n     * @param {string} error - Message from the service\n     * @param {object} inst - Reference to React Component\n     * @private\n     */\n    _failToLogin = (error, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(updateAuthStore({\n            sessionData: {}\n        }));\n\n        dispatch(setMessage({\n            type: 'error',\n            text: error\n        }));\n\n        dispatch(hideLoading());\n    };\n\n    /**\n     * Given a configuration object, it initializes and sets up the Balboa service system.\n     *\n     * @param {object} balboa\n     * @private\n     */\n    _initializeBalboa = (balboa) => {\n        Balboa.init({\n            balboa_prefix: Platform.getBalboaUrl(),\n            extend_with_params: (balboa && _.isFunction(balboa.toJS) ? balboa.toJS() : {})\n        });\n    };\n\n\n    /**\n     * Merge or store the loaded event data on the immutable store for all event views to share\n     *\n     * @param {object} data\n     * @param {function} dispatch\n     * @private\n     */\n    _storeLoadedEvent = (data, dispatch) => {\n        if (data.displayMessage && data.displayMessage.length > 1) {\n            dispatch(setMessage({\n                type: 'warning',\n                text: data.displayMessage\n            }));\n        }\n\n        const convertedEvent = fixCustomFields(convertBalboa3EventToJSEvent(data.event));\n\n        dispatch(mergeEventData(convertedEvent));\n\n        return convertedEvent;\n    };\n\n    /**\n     * Verify that the locally stored and/or in memory display list data isn't\n     * out of date (over 24 hours old).  If it is, then refresh it silently in\n     * the background.\n     *\n     * @private\n     */\n    _verifyDisplayListsHandler = (inst) => {\n        const {\n            dispatch,\n            displayData\n        } = inst.props;\n\n        // if display list is over 24 hours old, we need to refresh it silently\n        let nowTime = convertToBalboaTrunkTimestamp(new Date());\n        let diff = nowTime - displayData.get('timestamp');\n\n        if (diff > 24 * 60 * 60) {\n            dispatch(showLoading());\n\n            getDisplayLists();\n        }\n    };\n\n    /**\n     * Verify that the locally stored and/or in memory display list data isn't\n     * out of date (over 24 hours old).  If it is, then refresh it silently in\n     * the background.\n     *\n     * @private\n     */\n    _verifyCompanyListsHandler = (inst) => {\n        const {\n            dispatch,\n            companyData\n        } = inst.props;\n\n        // if display list is over 24 hours old, we need to refresh it silently\n        let nowTime = convertToBalboaTrunkTimestamp(new Date());\n        let diff = nowTime - companyData.get('timestamp');\n\n        if (diff > 24 * 60 * 60) {\n            dispatch(showLoading());\n\n            getCompanyLists();\n        }\n    };\n\n    /**\n     * Verify that the locally stored and/or in memory display list data isn't\n     * out of date (over 24 hours old).  If it is, then refresh it silently in\n     * the background.\n     *\n     * @private\n     */\n    _verifyJobBoardHandler = (inst) => {\n        const {\n            dispatch,\n            jobBoard\n        } = inst.props;\n\n        // if display list is over 24 hours old, we need to refresh it silently\n        let nowTime = convertToBalboaTrunkTimestamp(new Date());\n        let diff = nowTime - jobBoard.get('lastUpdated');\n\n        if (diff > 24 * 60 * 60) {\n            dispatch(showLoading());\n\n            loadJobBoard();\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            browser: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired,\n            companyData: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            loading: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            overlay: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'loading',\n            'overlay',\n            'browser',\n            'nav',\n            'view',\n            'jobBoard',\n            'event',\n            'auth',\n            'speakerInfo',\n            'displayData',\n            'companyData'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MainView',\n        /**\n         * Pulls in functionality from other mixin files\n         *\n         * @see RadioServiceMixin\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin],\n        /**\n         * Configures the Radio Service Channels we are interacting with\n         *\n         * @returns {object}\n         */\n        RadioService_setup() {\n            let radios = {};\n            const {\n                dispatch\n            } = this.props;\n\n            radios[RADIOS.services.RENEW_TOKEN] = {\n                key() {\n                    const {\n                        auth\n                    } = this.props;\n\n                    return auth.get('sessionData').get('token');\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        const {\n                            auth\n                        } = this.props;\n\n                        dispatch(hideLoading());\n\n                        // token renewal doesn't come with permission, so we need to merge the old with the new\n                        data = _.assign(auth.get('sessionData').toJS(), data);\n\n                        dispatch(updateAuthStore({\n                            sessionData: data\n                        }));\n\n                        let speakerInfo = _determineSpeaker(data.permissions, this);\n\n                        dispatch(updateSpeakerInfoStore(speakerInfo));\n                    },\n                    failed(error) {\n                        _failToLogin(error, this);\n                    }\n                }\n            };\n\n            radios[RADIOS.services.GET_DISPLAY_LISTS] = {\n                key() {\n                    return RADIOS.services.GET_DISPLAY_LISTS;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        let speakerInfo = _determineSpeaker(data.perspeaker, this);\n                        dispatch(updateSpeakerInfoStore(speakerInfo));\n\n                        dispatch(updateDisplayDataStore({\n                            displayLists: data,\n                            timestamp: (convertToBalboaTrunkTimestamp(new Date()))\n                        }));\n                    },\n                    failed(error) {\n                        _failToLogin(error, this);\n                    }\n                }\n            };\n\n            radios[RADIOS.services.GET_COMPANY_LISTS] = {\n                key() {\n                    return RADIOS.services.GET_COMPANY_LISTS;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        dispatch(updateCompanyDataStore({\n                            companyLists: _.get(data, [\"sitelists\"]),\n                            timestamp: (convertToBalboaTrunkTimestamp(new Date()))\n                        }));\n                    },\n                    failed(error) {\n                        _failToLogin(error, this);\n                    }\n                }\n            };\n\n            // These calls need to be outside of event views as they need to be shared amongst all of them\n            // and there are multiple entry points to an event.  Ideally this would be outside a view entirely\n            // which is possible to do with the Radio system, we just need to design the pattern for it.\n            radios[RADIOS.services.LOAD_EVENT] = {\n                key() {\n                    const {\n                        event\n                    } = this.props;\n\n                    const selectedEvent = event.get('selectedEvent');\n\n                    return selectedEvent.get('eid').toString();\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        const {\n                            nav\n                        } = this.props;\n                        dispatch(hideLoading());\n\n                        const convertedEvent = _storeLoadedEvent(data, dispatch);\n\n                        // If it's a marketplace event, we need to default it to the job's view\n                        let defaultView = VIEWS.eventViews.DETAILS_VIEW;\n\n                        if(_.isEmpty(nav.mainView)) {\n                            if(isMarketPlaceEvent(convertedEvent)) {\n                                defaultView = VIEWS.eventViews.JOB_VIEW;\n                            }\n\n                            dispatch(changeEventView(defaultView));\n                        }\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(changeMainView(VIEWS.mainViews.CALENDAR_VIEW));\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.DELETE_EVENT] = {\n                key() {\n                    const {\n                        event\n                    } = this.props;\n                    const selectedEvent = event.get('selectedEvent');\n                    return selectedEvent.get('eid');\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded() {\n                        dispatch(hideLoading());\n\n                        dispatch(clearEventAssociatedData());\n\n                        dispatch(clearEvent());\n\n                        dispatch(setMessage({\n                            type: 'success',\n                            text: getText('Event Deleted')\n                        }));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.COPY_EVENT] = {\n                key() {\n                    const {\n                        event\n                    } = this.props;\n                    const selectedEvent = event.get('selectedEvent');\n                    return selectedEvent.get('eid');\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(eid) {\n                        dispatch(hideLoading());\n\n                        dispatch(toggleEventDirty(false));\n\n                        dispatch(clearEventAssociatedData());\n\n                        dispatch(selectEvent({\n                            event: {\n                                eid: eid\n                            }\n                        }));\n\n                        dispatch(closeDialog());\n\n                        dispatch(setMessage({\n                            type: 'success',\n                            text: getText('Event Copied')\n                        }));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n\n                        dispatch(closeDialog());\n                    }\n                }\n            };\n\n            radios[RADIOS.services.SAVE_EVENT] = {\n                key() {\n                    const {\n                        event\n                    } = this.props;\n                    const selectedEvent = event.get('selectedEvent');\n                    return (selectedEvent ? selectedEvent.get('eid').toString() : \"0\");\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        const {\n                            nav,\n                            view\n                        } = this.props;\n\n                        const currentView = nav.get('eventView');\n                        const doSubmitFormCallback = view.get('doSubmitFormCallback');\n\n                        dispatch(hideLoading());\n\n                        dispatch(toggleEventDirty(false));\n\n                        dispatch(clearEventAssociatedData());\n                        dispatch(selectEvent({\n                            event: convertBalboa3EventToJSEvent(data.event),\n                            view: currentView\n                        }));\n\n                        dispatch(setMessage({\n                            type: 'success',\n                            text: getText('Event Saved')\n                        }));\n\n                        if (doSubmitFormCallback) {\n                            doSubmitFormCallback();\n                            dispatch(clearSubmitForm());\n                        }\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.LOAD_JOB_AGREEMENT] = {\n                key() {\n                    const {\n                        event,\n                        speakerInfo,\n                        jobBoard\n                    } = this.props;\n\n                    let eid = '';\n\n                    if(event.modifiedEvent) {\n                        eid = event.modifiedEvent.get('eid');\n                    } else if(jobBoard.selectedJob) {\n                        eid = jobBoard.selectedJob.jobSummary.get('event_id');\n                    }\n\n                    return `${speakerInfo.get('selectedSpeaker').get('sid')}:${eid}`;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        dispatch(updateJobAgreement(data));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n                        // Go back to the job board\n                        dispatch(clearSubView());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.LOAD_JOB_EVENT] = {\n                key() {\n                    const {\n                        event,\n                        jobBoard\n                    } = this.props;\n\n                    let eid = '';\n\n                    if(event.modifiedEvent) {\n                        eid = event.modifiedEvent.get('eid');\n                    } else if(jobBoard.selectedJob) {\n                        eid = jobBoard.selectedJob.jobSummary.get('event_id');\n                    }\n\n                    return `${eid}`;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        dispatch(updateJobDetail(data));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n                        // Go back to the job board\n                        dispatch(clearSubView());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.LOAD_JOB_BOARD] = {\n                key() {\n                    return RADIOS.services.LOAD_JOB_BOARD;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        dispatch(updateJobBoardStore(_.assign({\n                            lastUpdated: new Date()\n                        }, data)));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.LOAD_JOB_MESSAGES] = {\n                key() {\n                    const {\n                        event,\n                        jobBoard\n                    } = this.props;\n\n                    let eid = '';\n\n                    if(event.modifiedEvent) {\n                        eid = event.modifiedEvent.get('eid');\n                    } else if(jobBoard.selectedJob) {\n                        eid = jobBoard.selectedJob.jobSummary.get('event_id');\n                    }\n\n                    return `${eid}`;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        dispatch(hideLoading());\n\n                        dispatch(updateJobMessages(data));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.SEND_JOB_MESSAGE] = {\n                key() {\n                    const {\n                        event,\n                        jobBoard,\n                        speakerInfo\n                    } = this.props;\n\n                    const selectedSpeaker = speakerInfo.selectedSpeaker;\n\n                    let eid = '';\n\n                    if(event.modifiedEvent) {\n                        eid = event.modifiedEvent.get('eid');\n                    } else if(jobBoard.selectedJob) {\n                        eid = jobBoard.selectedJob.jobSummary.get('event_id');\n                    }\n\n                    return `${eid}-${selectedSpeaker.get('sid')}`;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        const {\n                            event,\n                            jobBoard,\n                            speakerInfo\n                        } = this.props;\n\n                        let eid = '';\n\n                        if(event.modifiedEvent) {\n                            eid = event.modifiedEvent.get('eid');\n                        } else if(jobBoard.selectedJob) {\n                            eid = jobBoard.selectedJob.jobSummary.get('event_id');\n                        }\n\n                        dispatch(hideLoading());\n\n                        loadJobMessages({\n                            sid: speakerInfo.selectedSpeaker.get('sid'),\n                            event_id: eid\n                        });\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.GET_SHORT_PROFILE] = {\n                key() {\n                    const {\n                        speakerInfo\n                    } = this.props;\n\n                    const selectedSpeaker = speakerInfo.selectedSpeaker;\n\n                    return selectedSpeaker.get('sid');\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        const {\n                            speakerInfo\n                        } = this.props;\n\n                        dispatch(hideLoading());\n\n                        dispatch(updateShortProfile({sid: speakerInfo.selectedSpeaker.get('sid'), shortProfile: data}));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            radios[RADIOS.services.SEND_JOB_APPLICATION] = {\n                key() {\n                    const {\n                        event,\n                        jobBoard,\n                        speakerInfo\n                    } = this.props;\n\n                    const selectedSpeaker = speakerInfo.selectedSpeaker;\n\n                    let eid = '';\n\n                    if(event.modifiedEvent) {\n                        eid = event.modifiedEvent.get('eid');\n                    } else if(jobBoard.selectedJob) {\n                        eid = jobBoard.selectedJob.jobSummary.get('event_id');\n                    }\n\n                    return `${eid}-${selectedSpeaker.get('sid')}`;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded(data) {\n                        const {\n                            event,\n                            jobBoard\n                        } = this.props;\n\n                        let eid = '';\n\n                        if(event.modifiedEvent) {\n                            eid = event.modifiedEvent.get('eid');\n                        } else if(jobBoard.selectedJob) {\n                            eid = jobBoard.selectedJob.jobSummary.get('event_id');\n                        }\n\n                        JobBoardService.calls[RADIOS.services.LOAD_JOB_BOARD]({}, (error, data) => {\n                            dispatch(hideLoading());\n\n                            if(!_.isEmpty(error)) {\n                                dispatch(setMessage({\n                                    type: 'error',\n                                    text: error\n                                }));\n                            } else {\n                                dispatch(toggleViewDirty(false));\n                                dispatch(updateJobBoardStore(_.assign({\n                                    lastUpdated: new Date()\n                                }, data)));\n\n                                const jobs = _.get(data, 'jobs', []);\n\n                                const selectedJob = _.filter(jobs, (job) => {\n                                    return (job.event_id.toString() === eid.toString());\n                                });\n\n                                if(selectedJob && selectedJob.length && _.has(selectedJob[0], 'event_id')) {\n                                    const jobSummary = fromJS(selectedJob[0]);\n\n                                    dispatch(selectJob(jobSummary));\n                                    dispatch(setSubView([VIEWS.jobSubViews.JOB_BOARD_VIEW, VIEWS.jobSubViews.JOB_APPLY_CONFIRMATION_VIEW]));\n                                }\n                            }\n                        });\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n            return radios;\n        },\n        /**\n         * Configures the Radio Channels we are listening on\n         *\n         * @returns {object}\n         */\n        RadioService_Radio_setup() {\n            let radios = {};\n\n            radios[RADIOS.stores.LOGIN_SUCCESS] = (sessionData) => {\n                _authHandler(sessionData, this);\n            };\n\n            radios[RADIOS.stores.VERIFY_DISPLAY_LISTS] = () => {\n                _verifyDisplayListsHandler(this);\n                _verifyJobBoardHandler(this);\n            };\n\n            radios[RADIOS.stores.VERIFY_COMPANY_LISTS] = () => {\n                _verifyCompanyListsHandler(this);\n            };\n\n            return radios;\n        },\n        componentWillReceiveProps(nextProps) {\n            const {\n                auth,\n                browser,\n                speakerInfo,\n                dispatch,\n                view\n            } = nextProps;\n\n            // If our auth data has changed, then update balboa and our session store\n            if (!is(this.props.auth, auth)) {\n                if (auth.get('authedUserSession')) {\n                    _initializeBalboa(auth.get('authedUserSession').get('balboa'));\n                }\n\n                // If we've logged in and there is no display data, then make the request\n                if (auth.get('sessionData') && auth.get('sessionData').get('token')) {\n                    getDisplayLists();\n                }\n\n                if (auth.get('sessionData') && auth.get('sessionData').get('token')) {\n                    getCompanyLists();\n                }\n            }\n\n            if(auth.get('sessionData') && auth.get('sessionData').get('token')\n                && !is(this.props.speakerInfo.selectedSpeaker, speakerInfo.selectedSpeaker)) {\n                loadJobBoard();\n            }\n\n            // detect keyboard up\n            const currentBrowser = this.props.browser;\n\n            if(!is(currentBrowser, browser)) {\n                if(!view.keyboardActive && currentBrowser.height && (currentBrowser.height - browser.height) >= 50) {\n                    dispatch(toggleKeyboardActive(true));\n                } else if(view.keyboardActive && (currentBrowser.height - browser.height) < -50) {\n                    dispatch(toggleKeyboardActive(false));\n                }\n            }\n        },\n        /**\n         * Triggers after render() and the component has made it to the DOM\n         */\n        componentDidMount() {\n            const {\n                auth,\n                dispatch\n            } = this.props;\n            let sessionData = auth.get('sessionData');\n            let push = auth.get('push');\n\n            // Initialize it with the base URL for now so Forgot Password can still work\n            _initializeBalboa({});\n\n            if (sessionData && sessionData.get('token')) {\n                _initializeBalboa(sessionData.get('balboa'));\n                renewToken(sessionData);\n            }\n            else {\n                dispatch(hideLoading());\n            }\n\n            // hide the splash screen if we are all visually loaded\n            if (navigator && navigator.splashscreen && _.isFunction(navigator.splashscreen.hide)) {\n                navigator.splashscreen.hide();\n\n            }\n        },\n\n        componentDidUpdate(prevProps) {\n            const currentEvent = this.props.event;\n            const prevEvent = prevProps.event;\n\n            // This is here instead of willReceiveProps because the LOAD_EVENT will trigger the RadioService\n            // and that uses this.props, which isn't populated yet.\n\n            let eventsDiffer = !is(prevEvent, currentEvent) && !is(prevEvent.get('selectedEvent'), currentEvent.get('selectedEvent'));\n\n            if (eventsDiffer) {\n                let currentEid = currentEvent.get('selectedEvent') &&\n                    currentEvent.get('selectedEvent').get('eid') &&\n                    currentEvent.get('selectedEvent').get('eid').toString();\n                let prevEid = prevEvent.get('selectedEvent') &&\n                    prevEvent.get('selectedEvent').get('eid') &&\n                    prevEvent.get('selectedEvent').get('eid').toString();\n\n\n                if ((currentEid && (currentEid !== prevEid))\n                    || (currentEvent.get('selectedEvent') && currentEvent.get('selectedEvent').size === 1)) {\n                    // Load the event from the service\n                    radio(RADIOS.services.LOAD_EVENT).broadcast({\n                        eid: currentEid\n                    });\n                }\n            }\n        },\n        /**\n         * Builds the HTML/DOM to be rendered to the screen\n         *\n         * @returns {XML}\n         */\n        render() {\n            const {\n                loading\n            } = this.props;\n\n            return <MuiThemeProvider muiTheme={ThemeOverride}>\n                <div style={{\n                    height: '100%',\n                    minHeight: '100%'\n                }}>\n                    <div className='loading-screen'>\n                        {(loading && (loading.get('counter') > 0) ? <LoadingScreen/> : null)}\n                    </div>\n\n                    {_determineView(this)}\n\n                    {(hasPush() ? <PushManager/> : null)}\n                </div>\n            </MuiThemeProvider>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport default MainViewFactory;","const _ = require('lodash');\n\nconst {\n    darkBlack\n}  = require('material-ui/styles/colors');\n\nconst {fade}  = require('material-ui/utils/colorManipulator');\n\nconst lightBaseTheme = require('material-ui/styles/baseThemes/lightBaseTheme').default;\nconst getMuiTheme = require('material-ui/styles/getMuiTheme').default;\n\nconst mainTheme = require('../mainTheme').default;\n\n/**************************************\n * Base Theme\n *************************************/\n\nconst muiTheme = getMuiTheme(lightBaseTheme, {\n    palette: {\n        disabledColor: fade(darkBlack, 0.5)\n    }\n});\n\n\n/**************************************\n * App Bar\n *************************************/\n\nmuiTheme.appBar.color = mainTheme.backgroundColor;\nmuiTheme.appBar.textColor = mainTheme.foregroundColor;\n\nmuiTheme.toolbar.backgroundColor = mainTheme.backgroundColor;\nmuiTheme.toolbar.color = mainTheme.foregroundColor;\n\n/**************************************\n * Bottom Navigation\n *************************************/\n\nmuiTheme.bottomNavigation.selectedColor = mainTheme.primaryColor;\nmuiTheme.bottomNavigation.selectedFontSize = 8;\nmuiTheme.bottomNavigation.unselectedFontSize = 6;\n\n/**************************************\n * Buttons\n *************************************/\n\nmuiTheme.flatButton.primaryTextColor = mainTheme.primaryColor;\nmuiTheme.floatingActionButton.color = mainTheme.primaryColor;\nmuiTheme.raisedButton.primaryColor = mainTheme.primaryColor;\n\n/**************************************\n * Checkbox\n *************************************/\n\nmuiTheme.checkbox.checkedColor = mainTheme.primaryColor;\n\n/**************************************\n * Sub Header\n *************************************/\n\nmuiTheme.subheader.color = mainTheme.primaryColor;\n\n/**************************************\n * Text Field\n *************************************/\n\nmuiTheme.textField.focusColor = mainTheme.primaryColor;\nmuiTheme.textField.disabledTextColor = fade(darkBlack, 0.6);\n\n//-------------------------------------\n// Stepper\n//-------------------------------------\n\nmuiTheme.stepper.iconColor = '#7ca654';\n\nexport default muiTheme;","/**\n * Builds a Material UI Fields React Component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n *\n * @return {function} - React Component\n */\nconst MUIFieldsFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Factories\n    const MUIFieldFactory = require('./MUIField').default;\n\n    // MixinsM\n    const AutoShouldUpdateMixinFactory = require('../../mixins/AutoShouldUpdateMixin').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MUIField = MUIFieldFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            fields: PropTypes.object.isRequired,\n            errors: PropTypes.object,\n            buildInput: PropTypes.func.isRequired,\n            layout: PropTypes.array\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIFields',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [],\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            let fields = this.props.fields;\n            let errors = this.props.errors;\n            let buildInput = this.props.buildInput;\n\n            let layout = this.props.layout;\n\n            if (!layout || !_.isArray(layout)) {\n                layout = _.map(fields, (f, name) => {\n                    return [name];\n                });\n            }\n\n            return <div className='mui-fields'>\n                {_.map(layout, (row) => {\n                    return _.map(row, (name, i) => {\n                        return <div key={i}>\n                            {(_.has(fields, name) ? <MUIField\n                                field={fields[name]}\n                                error={((errors) ? errors[name] : null)}\n                                buildInput={buildInput}/> : null)}\n                        </div>;\n                    });\n                })}\n            </div>;\n        }\n    });\n}\n\nexport default MUIFieldsFactory;","/**\n * Creates a Material UI Field React Component\n *\n * @param {object} spec - Container for named parameters\n * @returns {function} - React Component\n * @constructor\n */\nconst MUIFieldFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Mixins\n    const AutoShouldUpdateMixinFactory = require('../../mixins/AutoShouldUpdateMixin').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            field: PropTypes.object.isRequired,\n            error: PropTypes.string,\n            buildInput: PropTypes.func.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIField',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [],\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {field, error, buildInput} = this.props;\n\n            return <div ref={field.name}>\n                {buildInput(_.assign({}, field, {error: error}))}\n            </div>;\n        }\n    });\n}\n\nexport default MUIFieldFactory;","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst FooterMessageInputFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const _ = require('lodash');\n    const {\n        connect\n    } = require('react-redux');\n\n    const IconButton = require('material-ui/IconButton').default;\n    const TextField = require('material-ui/TextField').default;\n    const IconMap = require('../theme/IconMap');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        JobBoardActionsFactory\n    } = require('../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        sendJobMessage\n    } = JobBoardActionsFactory();\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'FooterMessageInput',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        getInitialState() {\n            return {\n                msg: ''\n            };\n        },\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                msg\n            } = this.state;\n\n            const {\n                event,\n                jobBoard,\n                speakerInfo\n            } = this.props;\n\n            const selectedJob = jobBoard.selectedJob;\n            const selectedSpeaker = speakerInfo.selectedSpeaker;\n            const jobSummary = selectedJob.jobSummary;\n            const sid = selectedSpeaker.get('sid');\n            let eid;\n\n            if(event && event.modifiedEvent) {\n                eid = event.modifiedEvent.get('eid');\n            } else if(jobSummary) {\n                eid = jobSummary.get('event_id');\n            }\n\n            return (\n                <div>\n                    <TextField\n                      ref={(input) => {\n                        input && input.focus();\n                      }}\n                      name={\"message\"}\n                      autoFocus\n                      multiLine={true}\n                      value={msg}\n                      style={{\n                        width: 'calc(100% - 48px - 10px)'\n                      }}\n                      onChange={(e, val) => {\n                        this.setState({\n                            msg: val\n                        });\n                      }}\n                    />\n                    <IconButton onClick={(e) => {\n\n                        if(!_.isEmpty(_.trim(msg))) {\n                            sendJobMessage({\n                                sid,\n                                eid,\n                                msg: _.trim(msg)\n                            });\n                            this.setState({\n                                msg: ''\n                            });\n                        }\n                    }}>\n                        {IconMap.getFormIcon('send')}\n                    </IconButton>\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { FooterMessageInputFactory }","/**\n * Handles the main view rendering and navigation\n *\n * @param spec - Container of named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes RadioMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst NavigatorFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    /* global navigator */\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        is\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const VIEWS = require('../enums/VIEWS').default;\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Factories\n    const {\n        MessageSnacksFactory\n    } = require('../components/messages');\n    const LayoutManagerFactory = require('../layouts/LayoutManager').default;\n    const {DialogGroupFactory} = require('../components/dialogs/DialogGroup');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Radios\n    const {\n        radio,\n        RadioMixin\n    } = require('react-pubsub-via-radio.js');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    // Views\n    const {\n        CalendarViewFactory,\n        DashboardViewFactory,\n        NewEventViewFactory,\n        SearchViewFactory,\n        SettingsViewFactory\n    } = require('./');\n\n    const {\n        ContactsViewFactory,\n        CustomViewFactory,\n        DetailsViewFactory,\n        JobEventViewFactory,\n        LibraryViewFactory,\n        MiscViewFactory,\n        ServicesViewFactory,\n        TodoListViewFactory,\n        TravelViewFactory\n    } = require('./eventViews');\n\n    const {\n        ConfirmedEventsViewFactory,\n        JobApplyViewFactory,\n        JobApplyConfirmationViewFactory,\n        JobBoardViewFactory,\n        JobDetailViewFactory,\n        JobMessagesViewFactory,\n        LeadsOffersViewFactory,\n        LeadOfferDetailViewFactory,\n        PayoutDetailViewFactory\n    } = require('./jobViews');\n\n    const {\n        AddNoteViewFactory,\n        CalendarEventsViewFactory,\n        ContactViewFactory,\n        EmailCoworkersViewFactory,\n        ProductViewFactory,\n        ServiceViewFactory,\n        StageTimeViewFactory,\n        TodoViewFactory\n    } = require('./subViews');\n\n    // Actions\n    const {\n        NavActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        changeEventView,\n        changeMainView,\n        getCurrentSubView\n    } = NavActionsFactory({});\n\n    const {\n        clearSubmitForm\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const TodoListView = TodoListViewFactory({});\n    const CalendarView = CalendarViewFactory({});\n    const ContactsView = ContactsViewFactory({});\n    const CustomView = CustomViewFactory({});\n    const DashboardView = DashboardViewFactory({});\n    const DetailsView = DetailsViewFactory({});\n    const JobEventView = JobEventViewFactory({});\n    const LibraryView = LibraryViewFactory({});\n    const MessageSnacks = MessageSnacksFactory({});\n    const MiscView = MiscViewFactory({});\n    const NewEventView = NewEventViewFactory({});\n    const SearchView = SearchViewFactory({});\n    const ServicesView = ServicesViewFactory({});\n    const SettingsView = SettingsViewFactory({});\n    const TravelView = TravelViewFactory({});\n\n    const AddNoteView = AddNoteViewFactory({});\n    const CalendarEventsView = CalendarEventsViewFactory({});\n    const ContactView = ContactViewFactory({});\n    const EmailCoworkersView = EmailCoworkersViewFactory({});\n    const ProductView = ProductViewFactory({});\n    const ServiceView = ServiceViewFactory({});\n    const StageTimeView = StageTimeViewFactory({});\n    const TodoView = TodoViewFactory({});\n\n    // Job Views\n    const ConfirmedEventsView = ConfirmedEventsViewFactory({});\n    const JobApplyView = JobApplyViewFactory();\n    const JobApplyConfirmationView = JobApplyConfirmationViewFactory();\n    const JobBoardView = JobBoardViewFactory({});\n    const JobDetailView = JobDetailViewFactory();\n    const JobMessagesView = JobMessagesViewFactory();\n    const LeadOfferDetailView = LeadOfferDetailViewFactory({});\n    const LeadsOffersView = LeadsOffersViewFactory({});\n    const PayoutDetailView = PayoutDetailViewFactory();\n\n    const LayoutManager = LayoutManagerFactory({});\n    const DialogGroup = DialogGroupFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    // constants\n    const mainViewCycle = [\n        VIEWS.mainViews.CALENDAR_VIEW,\n        VIEWS.mainViews.DASHBOARD_VIEW,\n        VIEWS.mainViews.SEARCH_VIEW,\n        VIEWS.mainViews.NEW_EVENT_VIEW,\n        VIEWS.mainViews.SETTINGS_VIEW\n    ];\n\n    const eventViewCycle = [\n        VIEWS.eventViews.DETAILS_VIEW,\n        VIEWS.eventViews.CONTACTS_VIEW,\n        VIEWS.eventViews.TRAVEL_VIEW,\n        VIEWS.eventViews.SERVICES_VIEW,\n        VIEWS.eventViews.TODO_LIST_VIEW,\n        VIEWS.eventViews.CUSTOM_VIEW,\n        VIEWS.eventViews.LIBRARY_VIEW,\n        VIEWS.eventViews.MISC_VIEW\n    ];\n\n    let _swipeEnabled = true;\n    let _shelfOpened = false;\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _determineNextView;\n    let _determinePrevView;\n    let _determineScroll;\n    let _determineView;\n    let _getCurrentViewData;\n    let _isSwipeNavEnabled;\n    let _nextView;\n    let _prevView;\n    let _shelfChangeHandler;\n    let _shouldShowMessages;\n    let _swipeHandler;\n\n    /**\n     * Determines what view should be rendered next\n     *\n     * @param {object} inst - Reference to React Component\n     * @return {string} - Next View\n     * @private\n     */\n    _determineNextView = (inst) => {\n        const {\n            viewCycle,\n            currentView\n        } = _getCurrentViewData(inst);\n\n        let i = _.indexOf(viewCycle, currentView);\n\n        if (i < viewCycle.length - 1) {\n            i += 1;\n        }\n        else {\n            i = 0;\n        }\n\n        return viewCycle[i];\n    };\n\n    /**\n     * Determines what view would come before the current\n     *\n     * @param {object} inst - Reference to React Component\n     * @return {string} - Previous View\n     * @private\n     */\n    _determinePrevView = (inst) => {\n        const {\n            viewCycle,\n            currentView\n        } = _getCurrentViewData(inst);\n\n        let i = _.indexOf(viewCycle, currentView);\n\n        i -= 1;\n\n        if (i < 0) {\n            i = viewCycle.length - 1;\n        }\n\n        return viewCycle[i];\n    };\n\n    /**\n     * Determines if we should add a class that enables or prevents scrolling.\n     *\n     * @param {object} inst\n     * @returns {string}\n     * @private\n     */\n    _determineScroll = (inst) => {\n        const {\n            loading,\n            overlay\n        } = inst.props;\n\n        if ((loading && loading.get('show')) || (overlay && overlay.get('show'))) {\n            return 'no-scroll';\n        }\n        else {\n            return 'scroll';\n        }\n    };\n\n    /**\n     * Given current state information, determine what view to display\n     *\n     * @param {object} inst - Reference to React Component\n     * @returns {*} - React Component View\n     * @private\n     */\n    _determineView = (inst) => {\n        const {\n            nav\n        } = inst.props;\n\n        let currentMainView = nav.get('mainView');\n        let currentEventView = nav.get('eventView');\n        let currentSubView = getCurrentSubView(nav);\n\n        // Forgot password is handle a bit differently\n        if (currentSubView && !is(currentSubView, VIEWS.subViews.FORGOT_PASSWORD_VIEW)) {\n\n            if (currentSubView.get('id') === VIEWS.subViews.CALENDAR_EVENTS_VIEW.get('id')) {\n                return <CalendarEventsView/>;\n            }\n\n            if (is(currentSubView.get('id'), VIEWS.subViews.EMAIL_COWORKERS_VIEW.get('id'))) {\n                return <EmailCoworkersView/>;\n            }\n\n            if (is(currentSubView.get('id'), VIEWS.subViews.NOTE_VIEW.get('id'))) {\n                return <AddNoteView/>;\n            }\n\n            if (is(currentSubView.get('id'), VIEWS.subViews.STAGE_TIME_VIEW.get('id'))) {\n                return <StageTimeView/>;\n            }\n\n            if (is(currentSubView.get('id'), VIEWS.subViews.CONTACT_VIEW.get('id'))) {\n                return <ContactView/>;\n            }\n\n            if (is(currentSubView.get('id'), VIEWS.subViews.SERVICE_VIEW.get('id'))) {\n                return <ServiceView/>;\n            }\n\n            if (is(currentSubView.get('id'), VIEWS.subViews.PRODUCT_VIEW.get('id'))) {\n                return <ProductView/>;\n            }\n\n            if (is(currentSubView.get('id'), VIEWS.subViews.TODO_VIEW.get('id'))) {\n                return <TodoView/>;\n            }\n\n            if( (is(currentSubView.get('id'), VIEWS.jobSubViews.JOB_DETAIL_VIEW.get('id')))) {\n                return <JobDetailView/>;\n            }\n\n            if( (is(currentSubView.get('id'), VIEWS.jobSubViews.LEAD_OFFER_DETAIL_VIEW.get('id')))) {\n                return <LeadOfferDetailView/>;\n            }\n\n            if( (is(currentSubView.get('id'), VIEWS.jobSubViews.PAYOUT_DETAIL_VIEW.get('id')))) {\n                return <PayoutDetailView/>;\n            }\n\n            if( (is(currentSubView.get('id'), VIEWS.jobSubViews.JOB_MESSAGES_VIEW.get('id')))) {\n                return <JobMessagesView/>;\n            }\n\n            if( (is(currentSubView.get('id'), VIEWS.jobSubViews.JOB_APPLY_VIEW.get('id')))) {\n                return <JobApplyView/>;\n            }\n\n            if( (is(currentSubView.get('id'), VIEWS.jobSubViews.JOB_APPLY_CONFIRMATION_VIEW.get('id')))) {\n                return <JobApplyConfirmationView/>;\n            }\n        }\n        else if (currentEventView) {\n            if (is(currentEventView.get('id'), VIEWS.eventViews.TODO_LIST_VIEW.get('id'))) {\n                return <TodoListView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.CONTACTS_VIEW.get('id'))) {\n                return <ContactsView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.CUSTOM_VIEW.get('id'))) {\n                return <CustomView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.DETAILS_VIEW.get('id'))) {\n                return <DetailsView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.JOB_VIEW.get('id'))) {\n                return <JobEventView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.LIBRARY_VIEW.get('id'))) {\n                return <LibraryView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.MISC_VIEW.get('id'))) {\n                return <MiscView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.SERVICES_VIEW.get('id'))) {\n                return <ServicesView/>;\n            }\n\n            if (is(currentEventView.get('id'), VIEWS.eventViews.TRAVEL_VIEW.get('id'))) {\n                return <TravelView/>;\n            }\n        }\n        else if (currentMainView) {\n\n            if (is(currentMainView.get('id'), VIEWS.mainViews.CALENDAR_VIEW.get('id'))) {\n                return <CalendarView/>;\n            }\n\n            if (is(currentMainView.get('id'), VIEWS.mainViews.DASHBOARD_VIEW.get('id'))) {\n                return <DashboardView/>;\n            }\n\n            if (is(currentMainView.get('id'), VIEWS.mainViews.NEW_EVENT_VIEW.get('id'))) {\n                return <NewEventView/>;\n            }\n\n            if (is(currentMainView.get('id'), VIEWS.mainViews.SEARCH_VIEW.get('id'))) {\n                return <SearchView/>;\n            }\n\n            if (is(currentMainView.get('id'), VIEWS.mainViews.SETTINGS_VIEW.get('id'))) {\n                return <SettingsView/>;\n            }\n\n            // Job Board Views\n            if (is(currentMainView.id, VIEWS.jobViews.CONFIRMED_EVENTS_VIEW.id)) {\n                return <ConfirmedEventsView/>;\n            }\n\n            if (is(currentMainView.id, VIEWS.jobViews.JOB_BOARD_VIEW.id)) {\n                return <JobBoardView/>;\n            }\n\n            if (is(currentMainView.id, VIEWS.jobViews.LEADS_OFFERS_VIEW.id)) {\n                return <LeadsOffersView/>;\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Gets the view cycle information for next and previous functionality\n     *\n     * @param {object} inst - Reference to React Component\n     * @returns {{viewCycle: *[], currentView: *}}\n     * @private\n     */\n    _getCurrentViewData = (inst) => {\n        const {\n            nav\n        } = inst.props;\n        let currentMainView = nav.get('mainView');\n        let currentEventView = nav.get('eventView');\n\n        let viewCycle = mainViewCycle;\n        let currentView = currentMainView;\n\n        if (currentEventView) {\n            viewCycle = eventViewCycle;\n            currentView = currentEventView;\n        }\n\n        return {\n            viewCycle: viewCycle,\n            currentView: currentView\n        };\n    };\n\n    /**\n     * Determines if the swipe navigation should be enabled\n     *\n     * @param {object} inst - Reference to React Component\n     * @returns {boolean}\n     * @private\n     */\n    _isSwipeNavEnabled = (inst) => {\n        // Until we get a few workable use cases, this remains disabled\n        return false;\n\n        const {\n            nav\n        } = inst.props;\n\n        const eventView = nav.get('eventView');\n        const subView = getCurrentSubView(nav);\n\n        return (!_shelfOpened && _swipeEnabled && eventView && !subView);\n    };\n\n    /**\n     * Updates the state to change to the next view in the cycle\n     *\n     * @param {object} inst - Reference to React Component\n     * @private\n     */\n    _nextView = (inst) => {\n        const {\n            dispatch,\n            nav\n        } = inst.props;\n        const currentEventView = nav.get('eventView');\n\n        const nextView = _determineNextView(inst);\n\n        if (currentEventView) {\n            dispatch(changeEventView(nextView));\n        }\n        else {\n            dispatch(changeMainView(nextView));\n        }\n    };\n\n    /**\n     * Updates the state to change to the previous view in the cycle\n     *\n     * @param {object} inst - Reference to the React Component\n     * @private\n     */\n    _prevView = (inst) => {\n        const {\n            dispatch,\n            nav\n        } = inst.props;\n        const currentEventView = nav.get('eventView');\n\n        const prevView = _determinePrevView(inst);\n\n        if (currentEventView) {\n            dispatch(changeEventView(prevView));\n        }\n        else {\n            dispatch(changeMainView(prevView));\n        }\n    };\n\n    /**\n     * Updates the state with the current status of the shelf (open/closed)\n     * @param {boolean} isOpen\n     * @private\n     */\n    _shelfChangeHandler = (isOpen) => {\n        _shelfOpened = isOpen;\n    };\n\n    /**\n     * Determines if we should render the Messages block\n     *\n     * @param {object} inst\n     * @returns {*|boolean}\n     * @private\n     */\n    _shouldShowMessages = (inst) => {\n        const {\n            nav,\n            messages\n        } = inst.props;\n\n        return (messages && messages.size && nav.get('mainView') !== VIEWS.mainViews.SEARCH_VIEW);\n    };\n\n    /**\n     * Handles swipe interactions to change views\n     * @param {event} e\n     * @param {object} inst\n     * @private\n     */\n    _swipeHandler = (e, inst) => {\n        e.preventDefault();\n\n        if (!_isSwipeNavEnabled(inst)) return;\n\n        // if (e.deltaX > 0) {\n        //     _prevView(inst);\n        // }\n        // else {\n        //     _nextView(inst);\n        // }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            loading: PropTypes.object.isRequired,\n            messages: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            overlay: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'nav',\n            'overlay',\n            'loading',\n            'messages'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'NavWrapperView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioMixin],\n        /**\n         * Sets up the Radio channels we are listening on\n         *\n         * @returns {object}\n         */\n        Radio_setup() {\n            let radios = {};\n\n            radios[RADIOS.ui.TOGGLE_SWIPE_NAV] = (enabled) => {\n                _swipeEnabled = enabled;\n            };\n\n            return radios;\n        },\n\n        /**\n         * Invoked immediately after the component's updates are\n         * flushed to the DOM.\n         *\n         * @param prevProps\n         * @param prevState\n         */\n        componentDidUpdate(prevProps, prevState) {\n            const prevNav = prevProps.nav;\n            const {\n                dispatch,\n                nav,\n                messages\n            } = this.props;\n\n            const currentSubView = getCurrentSubView(nav);\n\n            // If we get a message in, then scroll to the top to see it\n            // Don't scroll to top for the message view\n            if (!is(nav, prevNav) && (currentSubView && currentSubView.id !== VIEWS.jobSubViews.JOB_MESSAGES_VIEW.id)) {\n                document.body.scrollTop = 0;\n                this.refs.content.scrollTop = 0;\n\n                dispatch(clearSubmitForm());\n            }\n        },\n\n        /**\n         * Builds the virtual DOM/HTml\n         *\n         * @returns {*|XML|JSX}\n         */\n        render() {\n            const {\n                nav\n            } = this.props;\n\n            const view = _determineView(this);\n\n            return <LayoutManager shelfChangeHandler={_shelfChangeHandler}>\n                <div id=\"content\" ref='content' className={`content ${_determineScroll(this)}`}>\n                    {(_shouldShowMessages(this) ? <MessageSnacks/> : null)}\n                    <DialogGroup/>\n                    <div>{view}</div>\n                </div>\n\n            </LayoutManager>;\n        }\n        // ,\n        // componentWillUnmount() {\n        //     _swipeEnabled = true;\n        //     _shelfOpened = false;\n        // }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { NavigatorFactory }","/**\n * Creates a LayoutManager component\n *\n * @param {object} spec\n * @constructor\n * @returns {*}\n * @mixes AutoShouldUpdateMixin\n */\nconst LayoutManagerFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     ******************************************************************************/\n\n    /* global navigator */\n\n    // NPM\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n    const {\n        is\n    } = require('immutable');\n    // Enums\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Layouts\n    const {\n        EventMobileLayoutFactory,\n        EventTabletLayoutFactory,\n        MainMobileLayoutFactory,\n        MainTabletLayoutFactory\n    } = require('./');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    const Platform = require('../util/Platform').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NavActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n        //---------------------------------\n        // Actions\n        //---------------------------------\n\n    const {\n            stopProp\n        } = EventActionsFactory({});\n\n    const {\n        getCurrentSubView\n    } = NavActionsFactory();\n\n    /**********************************\n     * Layouts\n     *********************************/\n\n    const EventMobileLayout = EventMobileLayoutFactory({});\n    const EventTabletLayout = EventTabletLayoutFactory({});\n    const MainMobileLayout = MainMobileLayoutFactory({});\n    const MainTabletLayout = MainTabletLayoutFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _determineLayout;\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _determineLayout = (inst) => {\n        const {\n            browser,\n            children,\n            nav,\n            shelfChangeHandler\n        } = inst.props;\n\n        if (getCurrentSubView(nav) || nav.get('eventView')) {\n            if (Platform.isTablet(browser)) {\n                return <EventTabletLayout>{children}</EventTabletLayout>;\n            }\n            else {\n                return <EventMobileLayout shelfChangeHandler={shelfChangeHandler}>{children}</EventMobileLayout>;\n            }\n        } else if (nav.get('mainView')) {\n            const currentMainView = nav.get('mainView');\n            if (Platform.isTablet(browser)) {\n                return <MainTabletLayout hide_search={is(currentMainView.get('id'), VIEWS.mainViews.SEARCH_VIEW.get('id'))}>{children}</MainTabletLayout>;\n            }\n            else {\n                return <MainMobileLayout>{children}</MainMobileLayout>;\n            }\n        } else {\n            if (Platform.isTablet(browser)) {\n                return <MainTabletLayout>{children}</MainTabletLayout>;\n            }\n            else {\n                return <MainMobileLayout>{children}</MainMobileLayout>;\n            }\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            browser: PropTypes.object.isRequired,\n            children: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            shelfChangeHandler: PropTypes.func.isRequired,\n            loading: PropTypes.object.isRequired,\n            overlay: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'LayoutManager',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Builds the virtual DOM/HTml\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                overlay\n            } = this.props;\n\n            return <div style={{\n                height: '100%'\n            }}>\n\n                {(overlay && overlay.get('show')) ? <div className={`overlay ${overlay.get('mode')}`}\n                                                         onClick={(e) => {\n                                                             stopProp(e);\n\n                                                             overlay.get('onClick')();\n                                                         }}></div> : null}\n\n                {_determineLayout(this)}\n\n\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport default LayoutManagerFactory;\n","/**\n * Generates DrawerItem component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst DrawerItemFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    const MenuItem = require('material-ui/MenuItem').default;\n\n    const IconMap = require('../theme/IconMap');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NavActionsFactory\n    } = require('../actions');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        changeEventView\n    } = NavActionsFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            iconClass: PropTypes.string,\n            view: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used for debug messages\n         */\n        displayName: 'DrawerItem',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {\n                dispatch,\n                iconClass,\n                view\n            } = this.props;\n\n            return (\n                <MenuItem\n                    {...this.props}\n                    leftIcon={IconMap.getElement(iconClass)}\n                    onClick={(e) => {\n                        stopProp(e);\n\n                        dispatch(changeEventView(view, true));\n                    }}>\n                    {view.get('label')}\n                </MenuItem>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { DrawerItemFactory }","const LegendCardFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            avatarSize: PropTypes.number,\n            avatarStyle: PropTypes.object,\n            primaryText: PropTypes.string.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'LegendCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                avatarSize,\n                avatarStyle,\n                primaryText\n            } = this.props;\n\n            return (\n                <div style={{\n                    display: 'flex'\n                }}>\n\n                    <div style={{\n                        order: 1,\n                        width: '56px',\n                        height: '56px',\n                        textAlign: 'center',\n                        margin: 'auto'\n                    }}>\n                        <Avatar\n                            size={avatarSize}\n                            style={avatarStyle}/>\n                    </div>\n\n                    <div style={{\n                        order: 2,\n                        flexGrow: 1,\n                        flexShrink: 1\n                    }}>\n                        {primaryText}\n                    </div>\n\n                </div>\n            );\n        }\n    });\n}\n\nexport { LegendCardFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst EventCalendarFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n    const moment = require('moment');\n    const Hammer = require('react-hammerjs');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {CalendarDayFactory} = require('./CalendarDay');\n    const {CalendarHeaderFactory} = require('./CalendarHeader');\n    const {MonthSelectorFactory} = require('./MonthSelector');\n\n    // Theme\n    const IconMap = require('../../theme/IconMap');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        CalendarActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        nextMonth,\n        prevMonth,\n        updateSelectorYear\n    } = CalendarActionsFactory({});\n\n    /*********************************\n     * Methods\n     ********************************/\n\n    let _selectorToggleHandler;\n    let _swipeHandler;\n    let _weeksHaveMoreThanOneSID;\n\n    /**\n     *\n     * @param open\n     * @param inst\n     * @private\n     */\n    _selectorToggleHandler = (open, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        inst.setState({\n            showSelector: open\n        });\n\n        if (!open) {\n            dispatch(updateSelectorYear({\n                selectorYear: undefined\n            }));\n        }\n    };\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _swipeHandler = (event, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        if (event.deltaX < -50) {\n            dispatch(nextMonth());\n        } else if (event.deltaX > 50) {\n            dispatch(prevMonth());\n        }\n    };\n\n    /**\n     *\n     * @param cal_details\n     * @param cal_data\n     * @param weeks\n     * @returns {*}\n     * @private\n     */\n    _weeksHaveMoreThanOneSID = (cal_details, cal_data, weeks) => {\n        let da_one_sid = undefined;\n        return _.some(weeks, (week) => {\n            return _.some(week, (day) => {\n                let day_data = _.has(cal_data, day.date) ? cal_data[day.date] : {};\n                return _.some(day_data.detail_ids, (detail_id) => {\n                    let e = cal_details && cal_details[detail_id];\n                    return _.some(e && e.sids, (sid) => {\n                        let id = _.parseInt(sid, 10);\n                        if (da_one_sid === undefined) {\n                            da_one_sid = id;\n                        } else if ((id > 0) && da_one_sid !== id) {\n                            //we found more than one sid\n                            return true;\n                        }\n                        return false;\n                    });\n                });\n            });\n        });\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const CalendarHeader = CalendarHeaderFactory({});\n    const CalendarDay = CalendarDayFactory({});\n    const MonthSelector = MonthSelectorFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired,\n            displayData: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'EventCalendar',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                showEvents: false,\n                showSelector: false\n            };\n        },\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                calendar,\n                displayData\n            } = this.props;\n\n            const {\n                showEvents,\n                showSelector\n            } = this.state;\n\n            const calendarData = calendar.get('calendarData');\n            const selectedMonth = calendar.get('selectedMonth');\n            const selectedYear = calendar.get('selectedYear');\n            const currentData = calendarData.get(`${selectedYear}-${selectedMonth}`);\n\n            // const {year, month, cal_details, cal_data, Displaylists} = this.props;\n            const weeks = esUtils.build_calendar_weeks(selectedYear, selectedMonth, true);\n            let isMultiSidMode = false;\n\n            if (currentData) {\n                isMultiSidMode = _weeksHaveMoreThanOneSID(currentData.get('details').toJS(), currentData.get('calendar').toJS(), weeks);\n            }\n\n            if (showEvents) {\n\n            }\n\n            if (showSelector) {\n                return <MonthSelector onSelectorClose={() => {\n                    _selectorToggleHandler(false, this);\n                }}/>;\n            }\n\n            return (\n                <div>\n                    {/*<Hammer onSwipe={(event) => {*/}\n                    {/*    _swipeHandler(event, this);*/}\n                    {/*}}>*/}\n                        <table style={{\n                            width: '100%'\n                        }}>\n                            <thead>\n                            <CalendarHeader\n                                onSelectorOpen={() => {\n                                    _selectorToggleHandler(true, this);\n                                }}/>\n                            <tr>\n                                {_.map(_.range(1, 8), (d) => {\n                                    return (\n                                        <th key={d} className=\"dow text-center\">\n                                            {esUtils.get_day_of_week(d, true)}\n                                        </th>\n                                    );\n                                })}\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {\n                                _.map(weeks, (week, i) => {\n                                    return <tr key={i}>\n                                        {_.map(week, (day, i) => {\n                                            return <CalendarDay\n                                                key={i}\n                                                day={day}\n                                                isMultiSidMode={isMultiSidMode}\n                                            />;\n                                        })}\n                                    </tr>;\n                                })\n                            }\n                            </tbody>\n                        </table>\n                    {/*</Hammer>*/}\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { EventCalendarFactory }\n\n\n","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst CalendarDayFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Enums\n    const EVENT_STATUSES = require('../../enums/EVENT_STATUSES').default;\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n    const {fade}  = require('material-ui/utils/colorManipulator');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        CalendarActionsFactory,\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        extractMonthData,\n        selectDay\n    } = CalendarActionsFactory({});\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _showDayEvents;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _showDayEvents = (inst, details) => {\n        const {\n            day,\n            dispatch\n        } = inst.props;\n\n        if (!details || !details.length)\n            return;\n\n        dispatch(selectDay(_.get(day, [\"date\"])));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired,\n            day: PropTypes.shape({\n                date: PropTypes.number.isRequired,\n                out_of_month: PropTypes.bool\n            }).isRequired,\n            displayData: PropTypes.object.isRequired,\n            isMultiSidMode: PropTypes.bool.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messages\n         */\n        displayName: 'CalendarDay',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                calendar,\n                day,\n                displayData\n            } = this.props;\n\n            let calData;\n            let calDetails;\n            let details;\n            let dayData;\n            let dayStatus;\n            let isPersonal;\n            let decorators = [];\n\n            const monthData = extractMonthData(calendar);\n\n            // Styles\n\n            const tdBaseStyle = {\n                textAlign: 'center',\n                width: '56px'\n            };\n\n            const spanBaseStyle = {\n                borderRadius: '50%',\n                display: 'inline-block',\n                padding: '5px',\n                minHeight: '18px',\n                minWidth: '18px',\n                width: '36px',\n                height: '36px',\n                lineHeight: '26px'\n            };\n\n            const baseDecoratorStyle = {\n                display: 'none',\n                width: '5px',\n                height: '4px',\n                borderRadius: '12px',\n                padding: '3px',\n                position: 'relative'\n            };\n\n            let tdAppliedStyle = _.assign({}, tdBaseStyle);\n            let spanAppliedStyle = _.assign({}, spanBaseStyle);\n\n            let appliedCallStyle = _.assign({}, baseDecoratorStyle, {\n                background: mainTheme.callColor,\n                top: '-10px',\n                right: '8px'\n            });\n\n            let appliedDailyStyle = _.assign({}, baseDecoratorStyle, {\n                background: mainTheme.dailyColor,\n                top: '10px',\n                right: '8px'\n            });\n\n            let appliedTravelStyle = _.assign({}, baseDecoratorStyle, {\n                background: mainTheme.travelColor,\n                top: '10px',\n                left: '8px'\n            });\n\n            let appliedCoachingStyle = _.assign({}, baseDecoratorStyle, {\n                background: mainTheme.coachingColor,\n                top: '-10px',\n                left: '8px'\n            });\n\n            if (day.out_of_month) {\n                tdAppliedStyle = _.assign(tdAppliedStyle, {\n                    color: 'rgba(0, 0, 0, 0.2)'\n                });\n            }\n\n            // Process calendar data\n\n            if (monthData && !day.out_of_month) {\n                calData = monthData.data;\n                calDetails = monthData.details;\n\n                dayData = _.has(calData, day.date) ? calData[day.date] : {};\n\n                details = _.uniq(_.reject(_.map(dayData.detail_ids, (detail_id) => {\n                    return calDetails && calDetails[detail_id];\n                }), _.isEmpty), (detail) => {\n                    if (detail.eid && detail.eid > 0) {\n                        return detail.eid;\n                    }\n                    return [detail.desc, detail.type].join(\"$\");\n                });\n            }\n\n            // Determine Event Status\n\n            dayStatus = -1;\n            isPersonal = false;\n            _.each(details, (detail) => {\n                if ((detail.type === \"event\") && ((dayStatus < 0) || (EVENT_STATUSES.EVENT_STATUS_PRIORITY[detail.sta] > EVENT_STATUSES.EVENT_STATUS_PRIORITY[EVENT_STATUSES.EVENT_STATUSES_by_num[dayStatus]]))) {\n                    dayStatus = EVENT_STATUSES.EVENT_STATUSES[detail.sta];\n                }\n\n                isPersonal = detail.psnl;\n            });\n\n            if (dayStatus > -1) {\n                let bgColor = mainTheme[`${EVENT_STATUSES.EVENT_STATUSES_by_num[dayStatus]}Color`];\n                let fontColor = mainTheme[`${EVENT_STATUSES.EVENT_STATUSES_by_num[dayStatus]}FontColor`];\n                let personalFontColor = mainTheme[`${EVENT_STATUSES.EVENT_STATUSES_by_num[dayStatus]}PersonalFontColor`];\n\n                spanAppliedStyle = _.assign(spanAppliedStyle, {\n                    backgroundColor: bgColor,\n                    color: mainTheme[`${EVENT_STATUSES.EVENT_STATUSES_by_num[dayStatus]}FontColor`]\n                });\n\n                if (isPersonal) {\n                    let fader = fade(bgColor, 2);\n                    spanAppliedStyle = _.assign(spanAppliedStyle, {\n                        color: (personalFontColor ? personalFontColor : mainTheme.calendarFontColor),\n                        backgroundColor: fade(bgColor, 0.3),\n                        border: `4px solid ${fader}`,\n                        padding: '3px'\n                    });\n                }\n            }\n\n            // Proccess Decorators\n\n            if (_.has(dayData, 'decorators')) {\n                _.map(dayData.decorators, (decorator) => {\n                    if (decorator === 'call') {\n                        appliedCallStyle = _.assign(appliedCallStyle, {\n                            display: 'block'\n                        });\n                    } else if (decorator === 'coaching') {\n                        appliedCoachingStyle = _.assign(appliedCoachingStyle, {\n                            display: 'block'\n                        });\n                    } else if (decorator === 'daily') {\n                        appliedDailyStyle = _.assign(appliedDailyStyle, {\n                            display: 'block'\n                        });\n                    } else if (decorator === 'travel' || decorator === 'flight' || decorator === 'ground') {\n                        appliedTravelStyle = _.assign(appliedTravelStyle, {\n                            display: 'block'\n                        });\n                    }\n                });\n            }\n\n            return (\n                <td style={tdAppliedStyle} onClick={(e) => {\n                    stopProp(e);\n\n                    _showDayEvents(this, details);\n                }}>\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'column'\n                    }}>\n                        <div style={{\n                            order: 1,\n                            display: 'flex'\n                        }}>\n                            <div style={{\n                                order: 1,\n                                flexGrow: 0,\n                                flexShrink: 0,\n                                width: '10px',\n                                height: '10px'\n                            }}>\n                                <div style={appliedTravelStyle}>&nbsp;</div>\n                            </div>\n\n                            <div style={{\n                                order: 2,\n                                flexGrow: 1,\n                                flexShrink: 1\n                            }}></div>\n\n                            <div style={{\n                                order: 3,\n                                flexGrow: 0,\n                                flexShrink: 0,\n                                width: '10px',\n                                height: '10px'\n                            }}>\n                                <div style={appliedDailyStyle}>&nbsp;</div>\n                            </div>\n                        </div>\n\n                        <div style={{\n                            order: 2,\n                            display: 'flex',\n                            flexGrow: 1,\n                            flexShrink: 1,\n                            margin: 'auto'\n                        }}>\n                            <span style={spanAppliedStyle}>\n                                {day.date}\n                            </span>\n                        </div>\n\n                        <div style={{\n                            order: 3,\n                            display: 'flex'\n                        }}>\n                            <div style={{\n                                order: 1,\n                                flexGrow: 0,\n                                flexShrink: 0,\n                                width: '10px',\n                                height: '10px'\n                            }}>\n                                <div style={appliedCoachingStyle}>&nbsp;</div>\n                            </div>\n\n                            <div style={{\n                                order: 2,\n                                flexGrow: 1,\n                                flexShrink: 1\n                            }}></div>\n\n                            <div style={{\n                                order: 3,\n                                flexGrow: 0,\n                                flexShrink: 0,\n                                width: '10px',\n                                height: '10px'\n                            }}>\n                                <div style={appliedCallStyle}>&nbsp;</div>\n                            </div>\n                        </div>\n                    </div>\n                </td>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CalendarDayFactory }","/**\n *\n * @param spec\n * @returns {XML}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst CalendarHeaderFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Theme\n    const IconMap = require('../../theme/IconMap');\n\n    // Utils\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        CalendarActionsFactory,\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        nextMonth,\n        prevMonth\n    } = CalendarActionsFactory({});\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _nextMonthHandler;\n    let _prevMonthHandler;\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _nextMonthHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n\n        dispatch(nextMonth());\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _prevMonthHandler = (inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(prevMonth());\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired,\n            onSelectorOpen: PropTypes.func.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        displayName: 'CalendarHeader',\n\n        mixins: [AutoShouldUpdateMixin],\n\n        render() {\n            const {\n                calendar,\n                onSelectorOpen\n            } = this.props;\n\n            const selectedMonth = calendar.get('selectedMonth');\n            const selectedYear = calendar.get('selectedYear');\n\n            return (\n                <tr>\n                    <th>{IconMap.getButton('chevron-left', {\n                        onClick: (e) => {\n                            stopProp(e);\n\n                            _prevMonthHandler(this);\n                        }\n                    })}</th>\n\n                    <th colSpan=\"5\" onClick={(e) => {\n                        stopProp(e);\n\n                        onSelectorOpen();\n                    }} className={\"text-center\"}>\n                        {esUtils.get_month_name(selectedMonth)}\n                        &nbsp;\n                        {selectedYear}\n                    </th>\n\n                    <th>{IconMap.getButton('chevron-right', {\n                        onClick: (e) => {\n                            stopProp(e);\n\n                            _nextMonthHandler(this);\n                        }\n                    })}</th>\n                </tr>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CalendarHeaderFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n * @returns {*}\n */\nconst MonthSelectorFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n\n    // Material UI\n    const Avatar = require('material-ui/Avatar').default;\n    const DropDownMenu = require('material-ui/DropDownMenu').default;\n    const MenuItem = require('material-ui/MenuItem').default;\n\n    // Theme\n    const IconMap = require('../../theme/IconMap');\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Actions\n    const {\n        CalendarActionsFactory,\n        EventActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default\n    const esUtils = require('ES/utils/esUtils');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        updateSelectedMonthYear,\n        updateSelectorYear\n    } = CalendarActionsFactory({});\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _generateMonths;\n    let _monthChangeHandler;\n    let _nextYearHandler;\n    let _prevYearHandler;\n    let _yearChangeHandler;\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    _generateMonths = () => {\n        let rows = [];\n        let monthCount = 1;\n        let colCount = 0;\n\n        _.map(_.range(4), (i) => {\n            rows[i] = [];\n            colCount = 0;\n            while (colCount < 3) {\n                rows[i].push({key: monthCount, value: esUtils.get_month_name(monthCount, true)});\n                colCount += 1;\n                monthCount += 1;\n            }\n        });\n\n        return rows;\n    };\n\n    /**\n     *\n     * @param month\n     * @param inst\n     * @private\n     */\n    _monthChangeHandler = (month, inst) => {\n        const {\n            calendar,\n            dispatch,\n            onSelectorClose\n        } = inst.props;\n\n        const selectorYear = calendar.get('selectorYear');\n        const selectedYear = calendar.get('selectedYear');\n\n        dispatch(updateSelectedMonthYear({\n            selectedMonth: month.key,\n            selectedYear: selectorYear || selectedYear\n        }));\n\n        onSelectorClose();\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _nextYearHandler = (inst) => {\n        const {\n            calendar,\n            dispatch\n        } = inst.props;\n\n        const maxYear = DateTools.getSystemMaxDate().getFullYear();\n        const selectorYear = calendar.get('selectorYear');\n        const selectedYear = calendar.get('selectedYear');\n        let nextYear = (selectorYear || selectedYear) + 1;\n\n        if (nextYear > maxYear) {\n            nextYear = maxYear;\n        }\n\n        if (nextYear !== selectorYear) {\n            dispatch(updateSelectorYear({\n                selectorYear: nextYear\n            }));\n        }\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _prevYearHandler = (inst) => {\n        const {\n            calendar,\n            dispatch\n        } = inst.props;\n\n        const minYear = DateTools.getSystemMinDate().getFullYear();\n        const selectorYear = calendar.get('selectorYear');\n        const selectedYear = calendar.get('selectedYear');\n        let prevYear = (selectorYear || selectedYear) - 1;\n\n        if (prevYear < minYear) {\n            prevYear = minYear;\n        }\n\n        if (prevYear !== selectorYear) {\n            dispatch(updateSelectorYear({\n                selectorYear: prevYear\n            }));\n        }\n    };\n\n    /**\n     *\n     * @param value\n     * @param inst\n     * @private\n     */\n    _yearChangeHandler = (value, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(updateSelectorYear({\n            selectorYear: value\n        }));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired,\n            onSelectorClose: PropTypes.func.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MonthSelector',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                calendar\n            } = this.props;\n\n            const minDate = DateTools.getSystemMinDate();\n            const maxDate = DateTools.getSystemMaxDate();\n            const minYear = minDate.getFullYear();\n            const maxYear = maxDate.getFullYear();\n            const minMonth = minDate.getMonth();\n            const maxMonth = maxDate.getMonth();\n\n            const selectedMonth = calendar.get('selectedMonth');\n            const selectedYear = calendar.get('selectedYear');\n            const selectorYear = calendar.get('selectorYear');\n            const ddValue = selectorYear || selectedYear;\n\n            const baseMonthStyle = {\n                flexGrow: 1,\n                flexShrink: 1,\n                textAlign: 'center',\n                margin: 'auto'\n            };\n\n            let appliedMonthStyle = _.assign({}, baseMonthStyle);\n\n            return (\n                <div>\n                    <div style={{\n                        display: 'flex',\n                        flexWrap: 'nowrap',\n                        justifyContent: 'center'\n                    }}>\n\n                        <div style={{\n                            order: 1,\n                            width: '56px',\n                            flexGrow: 0,\n                            flexShrink: 0,\n                            paddingTop: '5px'\n                        }}>\n                            {IconMap.getButton('chevron-left', {\n                                onClick: (e) => {\n                                    stopProp(e);\n\n                                    _prevYearHandler(this);\n                                }\n                            })}\n                        </div>\n\n                        <div style={{\n                            order: 2,\n                            flexGrow: 1,\n                            flexShrink: 1,\n                            textAlign: 'center',\n                            fontWeight: 'bold'\n                        }}>\n                            <DropDownMenu value={ddValue} onChange={(event, index, value) => {\n                                _yearChangeHandler(value, this);\n                            }}>\n                                {_.map(_.range(minYear, maxYear + 1), (year) => {\n                                    return <MenuItem key={`menu-${year}`} value={year} primaryText={year}/>;\n                                })}\n                            </DropDownMenu>\n                        </div>\n\n                        <div style={{\n                            order: 3,\n                            width: '56px',\n                            flexGrow: 0,\n                            flexShrink: 0,\n                            paddingTop: '5px'\n                        }}>\n                            {IconMap.getButton('chevron-right', {\n                                onClick: (e) => {\n                                    stopProp(e);\n\n                                    _nextYearHandler(this);\n                                }\n                            })}\n                        </div>\n                    </div>\n\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        justifyContent: 'space-between'\n                    }}>\n\n                        {_.map(_generateMonths(), (row, i) => {\n                            let orderCount = 0;\n\n                            return <div key={`row-${i}`} style={{\n                                display: 'flex',\n                                justifyContent: 'center'\n                            }}>\n                                {\n                                    _.map(row, (month) => {\n                                        let backgroundColor = mainTheme.appBackgroundColor;\n                                        let color = mainTheme.fontColor;\n                                        let disabled = false;\n\n                                        orderCount += 1;\n\n                                        appliedMonthStyle = _.assign(appliedMonthStyle, {\n                                            order: orderCount\n                                        });\n\n                                        if ((ddValue >= maxYear && month.key > maxMonth) || (ddValue <= minYear && month.key < minMonth)) {\n                                            color = 'rgba(0, 0, 0, 0.2)';\n                                            disabled = true;\n                                        }\n\n                                        if (selectedYear === ddValue && month.key === selectedMonth) {\n                                            backgroundColor = mainTheme.backgroundColor;\n                                            color = mainTheme.foregroundColor;\n                                        }\n\n                                        return <div style={appliedMonthStyle}\n                                                    key={`month-${month.key}`}\n                                                    onClick={(e) => {\n                                                        stopProp(e);\n\n                                                        if (!disabled) {\n                                                            _monthChangeHandler(month, this);\n                                                        }\n                                                    }}>\n                                            <Avatar\n                                                backgroundColor={backgroundColor}\n                                                color={color}\n                                                size={50}\n                                                style={{\n                                                    fontSize: '20px'\n                                                }}>\n                                                {month.value}\n                                            </Avatar>\n                                        </div>;\n                                    })\n                                }\n                            </div>;\n                        })}\n\n                    </div>\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { MonthSelectorFactory }","/**\n * Generates a SearchForm component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @mixes FormMixin\n * @mixes FormHelperMixin\n */\nconst SearchFormFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const v = require('react-loose-forms.validation');\n    const {\n        connect\n    } = require('react-redux');\n    const {is} = require('immutable');\n    const moment = require('moment');\n\n    // Factories\n    const {\n        LinkCollapseAreaFactory\n    } = require('../components');\n\n    const IconButton = require('material-ui/IconButton').default;\n    const IconMap = require('../theme/IconMap');\n\n    const Paper = require('material-ui/Paper').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        SearchActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    // Utils\n    const Platform = require('../util/Platform').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        updateSearchStore\n    } = SearchActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const LinkCollapseArea = LinkCollapseAreaFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _autoSearch;\n    let _buildAdvancedSearchFormSchema;\n    let _buildSearchFormSchema;\n    let _clearSearchFocus;\n    let _hasExistingSearch;\n    let _searchClickHandler;\n    let _toggleAutoFocus;\n\n    /**\n     * Triggers an automatic search if a searchTerm is provided\n     *\n     * @param {object} inst - Reference to React Component\n     * @private\n     */\n    _autoSearch = (inst) => {\n        inst.Form_onSubmit(null);\n    };\n\n    /**\n     * Builds form input instructions for the Search section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildSearchFormSchema = (inst) => {\n        const {\n            search\n        } = inst.props;\n        const searchTerm = search.get('searchTerm');\n\n        let focusObj = _.clone(inst.state);\n\n        return {\n            search: _.assign({\n                name: 'search',\n                type: 'text',\n                placeholder: getText('Search'),\n                validate: (search.autoSearch ? v.optional : v.required),\n                icon: false\n            }, focusObj)\n        };\n    };\n\n    /**\n     * Builds form input instructions for the Advanced Search section\n     *\n     * @returns {object}\n     * @private\n     */\n    _buildAdvancedSearchFormSchema = (inst) => {\n        const {\n            isTablet\n        } = inst.props;\n\n        let schema = {\n            deepSearch: {\n                name: 'deepSearch',\n                type: 'checkbox',\n                label: getText('Deep Search'),\n                noIcon: isTablet\n            },\n            includeCanceled: {\n                name: 'includeCanceled',\n                type: 'checkbox',\n                label: getText('Include Canceled'),\n                noIcon: isTablet\n            },\n            onlyDatelessEvents: {\n                name: 'onlyDatelessEvents',\n                type: 'checkbox',\n                label: getText('Only Dateless Events'),\n                noIcon: isTablet\n            }\n        };\n\n        if (Platform.isEspeakers()) {\n            schema = _.assign(schema, {\n                marketplaceOnly: {\n                    name: 'marketplaceOnly',\n                    type: 'checkbox',\n                    label: getText('Marketplace Only'),\n                    noIcon: isTablet\n                },\n                futureOnly: {\n                    name: 'futureOnly',\n                    type: 'checkbox',\n                    label: getText('Future Only'),\n                    noIcon: isTablet\n                }\n            });\n        }\n\n        return schema;\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _clearSearchFocus = (inst) => {\n        _toggleAutoFocus(false, inst);\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {boolean}\n     * @private\n     */\n    _hasExistingSearch = (inst) => {\n        const {\n            search\n        } = inst.props;\n\n        const results = search.get('results');\n        const noResults = search.get('noResults');\n\n        if (noResults === true) {\n            return true;\n        }\n\n        if (results && results.size > 0) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Handles the Search button events.\n     *\n     * @param {event} event\n     * @private\n     */\n    _searchClickHandler = (event, inst) => {\n        _clearSearchFocus(inst);\n        inst.Form_onSubmit(event);\n        inst.refs.searchAdvancedOptions.hide();\n    };\n\n    /**\n     *\n     * @param isFocused\n     * @private\n     */\n    _toggleAutoFocus = (isFocused, inst) => {\n        inst.setState({\n            autoFocus: isFocused,\n            focusStamp: moment()\n        });\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            browser: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            search: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SearchForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, FinalFormMixin],\n\n        /**\n         * Combines all the form input instructions\n         *\n         * @returns {object}\n         */\n        buildSchema() {\n            return _.assign({}, _buildSearchFormSchema(this),\n                _buildAdvancedSearchFormSchema(this));\n        },\n\n        getInitialState() {\n            return {\n                autoFocus: undefined\n            };\n        },\n\n        /**\n         * Sets the initial values of a form\n         *\n         * @returns {object}\n         */\n        getInitialValues() {\n            const {search} = this.props;\n\n            return {\n                search: search.searchTerm,\n                deepSearch: search.deepSearch,\n                includeCanceled: search.includeCanceled,\n                onlyDatelessEvents: search.onlyDatelessEvents,\n                marketplaceOnly: search.marketplaceOnly,\n                futureOnly: search.futureOnly\n            };\n        },\n\n        /**\n         * Triggers when the component receives a new set of props\n         *\n         * @param {object} nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            if(!is(this.props.search, nextProps.search)) {\n                this.setState({\n                    data: {\n                        search: nextProps.search.searchTerm,\n                        deepSearch: nextProps.search.deepSearch,\n                        includeCanceled: nextProps.search.includeCanceled,\n                        onlyDatelessEvents: nextProps.search.onlyDatelessEvents,\n                        marketplaceOnly: nextProps.search.marketplaceOnly,\n                        futureOnly: nextProps.search.futureOnly\n                    }\n                }, () => {\n                    if(nextProps.search.autoSearch) {\n                        _autoSearch(this);\n                    }\n                });\n            }\n\n            if (!is(nextProps.search, this.props.search) && nextProps.search && nextProps.search.get('results')) {\n                _clearSearchFocus(this);\n            }\n        },\n        /**\n         * Invoked once immediately after the initial rendering occurs.\n         */\n        componentDidMount() {\n            const {\n                browser,\n                search\n            } = this.props;\n\n            if (search.autoSearch && !_hasExistingSearch(this)) {\n                _autoSearch(this);\n            }\n\n            if (_.isEmpty(search.searchTerm) && !search.autoSearch && Platform.isPhone(browser)) {\n                _toggleAutoFocus(true, this);\n            }\n        },\n\n        /**\n         *\n         * @param field\n         * @param value\n         */\n        onFormChanged(field, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            if(field !== 'search') {\n                dispatch(updateSearchStore(_.pick(this.state.data, [\n                    'deepSearch',\n                    'includeCanceled',\n                    'onlyDatelessEvents',\n                    'marketplaceOnly',\n                    'futureOnly',\n                    'autoSearch'\n                ])));\n            }\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            return <form\n                id='search-form'\n                ref='search-form'\n                onSubmit={this.Form_onSubmit}\n                style={{\n                    width: '100%'\n                }}>\n                <Paper rounded={false} style={{\n                    position: 'relative',\n                    top: '-10px',\n                    width: '100%'\n                }}>\n                    <div style={{\n                        display: 'flex',\n                        flexWrap: 'nowrap'\n                    }}>\n                        <div style={{\n                            order: 1,\n                            flexGrow: 1\n                        }}>\n                            {this.generateFields({fields: _buildSearchFormSchema(this)})}\n                        </div>\n                        <div style={{\n                            order: 1,\n                            flexGrow: 0,\n                            width: '56px',\n                            paddingTop: '30px'\n                        }}>\n                            <IconButton\n                                onClick={(e) => {\n                                    stopProp(e);\n\n                                    _searchClickHandler(e, this);\n                                }}>\n\n                                {IconMap.getElement('search')}\n                            </IconButton>\n                        </div>\n                    </div>\n                    <LinkCollapseArea ref='searchAdvancedOptions'>\n                        {this.generateFields({fields: _buildAdvancedSearchFormSchema(this)})}\n                    </LinkCollapseArea>\n                </Paper>\n            </form>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SearchFormFactory }\n","/**\n * Generates JobApplyForm component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @mixes EventMixin\n * @mixes FormMixin\n * @mixes FormHelperMixin\n * @mixes AutoShouldUpdateMixin\n * @returns {*} - React Component\n */\nconst JobApplyFormFactory = (spec) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const moment = require('moment');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const BTN = require('../enums/BTN').default;\n\n    const {DisplayFieldFactory} = require('../components/DisplayField');\n    const {MessageContainerFactory} = require('../components/messages/MessageContainer');\n    const RaisedButton = require('material-ui/RaisedButton').default;\n\n    // Mixins\n    const FormMixin = require('react-loose-forms');\n    const {\n        AutoShouldUpdateMixinFactory,\n        EventMixinFactory,\n        FormHelperMixinFactory\n    } = require('../mixins');\n    const v = require('react-loose-forms.validation');\n\n    // Utilities\n    const {\n        log\n    } = require('../util/DevTools').default;\n    const esUtils = require('ES/utils/esUtils');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        stopProp\n    } = EventActionsFactory();\n\n    const {\n        getFeeRange\n    } = SpeakerInfoActionsFactory({});\n\n    const {\n        setHeaderActions,\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    const DisplayField = DisplayFieldFactory({});\n    const MessageContainer = MessageContainerFactory({});\n\n    //---------------------------------\n    // Components\n    //---------------------------------\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _toggleAutoFocus;\n    let _updateHeaderActions;\n\n    /**\n     *\n     * @param isFocused\n     * @private\n     */\n    _toggleAutoFocus = (isFocused, inst) => {\n        inst.setState({\n            autoFocus: isFocused,\n            focusStamp: moment()\n        });\n    };\n\n    _updateHeaderActions = (spec) => {\n        const {\n            props,\n            isDirty,\n            inst\n        } = spec;\n\n        const {\n            dispatch\n        } = props;\n\n        let actions = [];\n\n        if (isDirty) {\n            actions = [{\n                type: BTN.SAVE,\n                onClick: inst.onSubmit\n            }, {\n                type: BTN.DISCARD,\n                onClick: inst.onDiscard\n            }];\n        }\n\n        dispatch(setHeaderActions(actions));\n    };\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const EventMixin = EventMixinFactory({\n        overrides: {\n            updateHeaderActions() {\n                const {\n                    view\n                } = this.props;\n\n                _updateHeaderActions({\n                    props: this.props,\n                    isDirty: view.get('dirty'),\n                    inst: this\n                });\n            },\n            componentWillReceiveProps(nextProps) {\n                const nextView = nextProps.view;\n                const currentView = this.props.view;\n\n\n                // update header if dirty changes\n                if (nextView.get('dirty') !== currentView.get('dirty')) {\n                    _updateHeaderActions({\n                        props: nextProps,\n                        isDirty: nextView.get('dirty'),\n                        inst: this\n                    });\n                }\n            }\n        }\n    });\n\n    const FormHelperMixin = FormHelperMixinFactory({});\n\n    const FinalFormMixin = _.assign({}, FormMixin, FormHelperMixin);\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            displayData: PropTypes.object.isRequired,\n            jobBoard: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            speakerInfo: PropTypes.object.isRequired,\n            view: PropTypes.object.isRequired\n        },\n        compareState: true,\n        propsPriority: [\n            'onSubmit',\n            'view',\n            'jobBoard',\n            'nav',\n            'speakerInfo',\n            'displayData'\n        ]\n    });\n\n    //=========================================================================\n    //\n    // React / Public Interfaces\n    //\n    //=========================================================================\n\n    let component = createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'JobApplyForm',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, EventMixin, FinalFormMixin],\n\n        getInitialState() {\n            return {\n                autoFocus: undefined,\n                focusStamp: undefined\n            };\n        },\n\n        componentDidMount() {\n            if(!this.state.autoFocus) {\n                _toggleAutoFocus(true, this);\n            }\n        },\n\n        /**\n         * Combines the form input instructions\n         *\n         * @return {object}\n         * @overrides FormMixin\n         */\n        buildSchema() {\n            const {\n                speakerInfo\n            } = this.props;\n\n            const feeRange = getFeeRange(speakerInfo.selectedSpeaker) || [];\n\n            const overrides = {\n                floatingLabelFixed: false,\n                    floatingLabelStyle: {\n                    top: 18\n                }\n            };\n\n            let focusObj = _.clone(this.state);\n\n            return {\n                est_fee: _.assign({\n                    name: 'est_fee',\n                    label: getText(\"What is your normal fee for this type of service?\"),\n                    type: \"number\",\n                    validate: v.optional,\n                    showIcon: false,\n                    hintText: feeRange[0],\n                    helperText: getText(\"Your published fee range is %1$s to %2$s. You can add travel expenses later when you make a firm offer.\", {params: feeRange}),\n                    overrides\n                }, focusObj),\n                will_do: {\n                    name: 'will_do',\n                    label: getText(\"What will you do for the buyer at this price?\"),\n                    type: \"textarea\",\n                    validate: v.required,\n                    showIcon: false,\n                    helperText: getText(\"example: I will travel to your meeting to deliver a keynote of up to 1 hour. I will also provide a 30 minute webinar before the event, and another webinar after the event to make the message more effective. Flat travel fee not included. etc...\"),\n                    overrides\n                },\n                need_info: {\n                    name: 'need_info',\n                    label: getText(\"What else do you need to know about this job to make a firm offer?\"),\n                    type: \"textarea\",\n                    showIcon: false,\n                    helperText: getText(\"example: What is the main goal of your meeting? Who will be in the audience? Would you like me to provide webinar support before or after? etc...\"),\n                    overrides\n                },\n                agreement: {\n                    name: 'agreement',\n                    label: getText(\"I agree to the eSpeakers Marketplace Finders Fee\"),\n                    type: \"toggle\",\n                    noIcon: true,\n                    overrides\n                }\n            };\n        },\n\n        /**\n         * Returns pre-filled values for the form based on the props\n         *\n         * @param props\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        getInitialValues(props) {\n            const {} = props;\n\n\n            let initialValues = {\n            };\n\n            return initialValues;\n        },\n\n        /**\n         *\n         *\n         * @returns {object}\n         * @overrides FormMixin\n         */\n        onFormChanged: function (name, value) {\n            const {\n                dispatch\n            } = this.props;\n\n            const viewDirty = this.Form_areChangesMade();\n\n            dispatch(toggleViewDirty(viewDirty));\n        },\n\n        prepareFormData() {\n            let formData = _.clone(this.state.data);\n        },\n\n        /**\n         * Submits the form when changes are saved.\n         *\n         * @returns {object}\n         */\n        onSubmit(event) {\n            this.Form_onSubmit(event);\n        },\n\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @return {*}\n         */\n        render() {\n            return (\n                <form\n                    ref='job-apply-form'\n                    onSubmit={this.Form_onSubmit}>\n\n                    <MessageContainer text={getText(\"Give the client a ballpark figure for their needs and ask intelligent questions about their goals.\")} />\n                    <MessageContainer text={getText(\"After this opening response to the client, converse with them in the message area until you are ready to use the MAKE OFFER button in your desktop version of EventCX.\")} />\n                    <MessageContainer>\n                        <DisplayField label={getText(\"Start a conversation!\")}>\n                            <div>\n                                <p>{getText(\"Give the client a ballpark figure for their needs and ask intelligent questions about their goals.\")}</p>\n\n                                <p>{getText(\"After this opening response to the client, converse with them in the message area until you are ready to use the MAKE OFFER button in your desktop version of EventCX.\")}</p>\n                            </div>\n                        </DisplayField>\n                    </MessageContainer>\n\n                    {_.map(this.buildSchema(), (schema, key, i) => {\n                        let fields = {};\n                        fields[key] = schema;\n\n                        return (\n                            <div key={`field-${key}`} style={{\n                                marginTop: '1em',\n                                marginBottom: '1em'\n                            }}>\n                                {this.generateFields({fields})}\n                            </div>\n                        );\n                    })}\n\n                    <div style={{\n                        padding: 10\n                    }}>\n                        <RaisedButton primary onClick={this.onSubmit} fullWidth label={getText('Submit')}></RaisedButton>\n                    </div>\n\n                </form>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { JobApplyFormFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ChipperFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const _ = require('lodash');\n\n    const Chip = require('material-ui/Chip').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            containerStyle: PropTypes.object,\n            chipStyle: PropTypes.object,\n            children: PropTypes.func\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'Chipper',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                containerStyle,\n                chipStyle,\n                chipLabelStyle,\n                chipLabels\n            } = this.props;\n\n            return (\n                <div style={_.assign({\n                    display: 'flex',\n                    flexWrap: 'wrap'\n                }, containerStyle)}>\n                    {_.map(chipLabels, (chipLabel, i) => {\n                        return <Chip key={i} style={_.assign({\n                            margin: '4px'\n                        }, chipStyle)} labelStyle={_.assign({}, chipLabelStyle)}>{chipLabel}</Chip>;\n                    })}\n                </div>\n            );\n        }\n    });\n\n    return component;\n}\n\nexport { ChipperFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobMessageCardFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const _ = require('lodash');\n    const moment = require('moment');\n\n    const Chip = require('material-ui/Chip').default;\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        getText\n    } = TranslateActionsFactory();\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            msg: PropTypes.object.isRequired,\n            senderName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n            isYou: PropTypes.bool.isRequired,\n            lastItem: PropTypes.bool\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'JobMessageCard',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        scrollToBottom() {\n            const {\n                lastItem\n            } = this.props;\n\n            if (lastItem) {\n                setTimeout(() => {\n                    this.el.scrollIntoView({behaviour: 'smooth'});\n                }, 125);\n            }\n        },\n        componentDidMount() {\n            this.scrollToBottom();\n        },\n        componentDidUpdate() {\n            this.scrollToBottom();\n        },\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                isYou,\n                msg,\n                senderName\n            } = this.props;\n\n            let is_unread = !isYou && !msg.receiver_opened;\n            let created = new Date(_.get(msg, \"created_ISO8601\", null));\n\n            const baseContainerStyle = {\n                border: '1px solid #ddd',\n                borderRadius: '4px',\n                backgroundColor: 'white',\n                margin: \"10px 0px\",\n                marginLeft: 10,\n                marginRight: 30,\n                padding: 15\n            };\n\n            const messageStyle = {\n                whiteSpace: 'pre-wrap'\n            };\n\n            const metaStyle = {\n                color: mainTheme.mutedFontColor,\n                textAlign: 'right',\n                paddingBottom: 5,\n                fontSize: '.8em'\n            };\n\n            let containerStyle = _.assign({}, baseContainerStyle, (isYou ? {\n                background: '#F0F7FF',\n                color: '#748AA4',\n                borderColor: '#8099B8',\n                marginLeft: 30,\n                marginRight: 10\n            } : null));\n\n            return (\n                <div style={containerStyle} ref={(el) => {\n                    this.el = el;\n                }}>\n                    <div style={{\n                        display: 'flex'\n                    }}>\n                        <div style={{\n                            width: 55\n                        }}>\n                            {is_unread ? <Chip labelStyle={{\n                                    lineHeight: '24px'\n                                }}\n                                                          backgroundColor={mainTheme.errorBackgroundColor}\n                                                          labelColor={mainTheme.errorFontColor}>{getText(\"NEW\")}</Chip>\n                                : null}\n\n                        </div>\n                        <div style={_.assign({}, metaStyle, {\n                            flexGrow: 1\n                        })}>\n                            <div style={{\n                                fontStyle: 'italic'\n                            }}>{moment(created).fromNow()}</div>\n                            <div>{senderName}</div>\n                        </div>\n                    </div>\n\n\n                    <div style={messageStyle}>\n                        {msg.content}\n                    </div>\n                </div>\n            );\n        }\n    });\n\n    return component;\n}\n\nexport { JobMessageCardFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst ActionDescriptionFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t  const PropTypes = require('prop-types');\n    const _ = require('lodash');\n\n    // Components\n    const {DisplayFieldFactory} = require('./DisplayField');\n    const {MessageContainerFactory} = require('./messages/MessageContainer');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        JobBoardActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Actions\n    //---------------------------------\n\n    const {\n        getBuyerName,\n        getNotes\n    } = JobBoardActionsFactory();\n\n    const {\n        getText\n    } = TranslateActionsFactory();\n\n    const DisplayField = DisplayFieldFactory({});\n    const MessageContainer = MessageContainerFactory({});\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            mpAgreement: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ActionDescription',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                mpAgreement\n            } = this.props;\n\n            // TODO: Find a easier way to i18n mixed content\n\n            //no offer pending\n            if (!mpAgreement) {\n                return (\n                    <MessageContainer\n                        type='warning'\n                        boxStyle={{\n                            padding: 0,\n\n                        }}>\n                        <DisplayField label={getText(\"Ready to make an offer?\")}>\n                            <div>\n                                <p>{getText(\"Once you have all the information you need about the work, use the\")}\n                                    <span className=\"btnName\">{getText(\"make offer\")}</span>\n                                    {getText(\"button to give the client a firm price and to detail what you will provide for them.\")}\n                                    <br/>{getText(\"It is common to have exchanged messages with the client before making a firm offer.\")}</p>\n                            </div>\n                        </DisplayField>\n\n                        <DisplayField label={getText(\"If the client accepts your offer:\")}>\n                            <div>\n                                &middot; <span>it becomes the contract for this engagement and the client will be able\n                                to leave public feedback for you, so impress them from the start!</span>\n                                <br/>\n                                &middot; <span>we collect 50% of the speaking fee and deposit it (less any fees) in your\n                                Stripe account.</span>\n                            </div>\n                        </DisplayField>\n                    </MessageContainer>\n                );\n            }\n\n            //speaker initiated offer\n            if (mpAgreement && !mpAgreement.is_accepted) {\n                if (mpAgreement.flags_as_map.initiated_by_speaker.is_set) {\n                    return (\n                        <MessageContainer\n                            type='warning'\n                            boxStyle={{\n                                padding: 0\n                            }}>\n\n                            <DisplayField label={getText('Waiting on the client.')}>\n                                <div>\n                                    <p>You have made an offer to the client for this job, and now it's in their court. They often have several offers to consider, so be patient.</p>\n\n                                    <p>Use the <span className=\"btnName\">messages</span> area to communicate at a respectful frequency.</p>\n                                </div>\n                            </DisplayField>\n\n                        </MessageContainer>\n                    );\n                } else {\n                    return (\n                        <MessageContainer\n                            type='warning'\n                            boxStyle={{\n                                padding: 0\n                            }}>\n\n                            <DisplayField label={getText('Waiting on you.')}>\n                                <div>\n                                    <p>The client has made you an offer, and it waiting for you to <span className=\"btnName\">accept</span> it or to make a counter offer using the <span className=\"btnName\">revise</span> button.</p>\n\n                                    <p><strong>If you need longer than 1 business day</strong> to make your decision, be courteous and use the <span className=\"btnName\">messages</span> area to let them know when to expect an answer from you.</p>\n                                </div>\n                            </DisplayField>\n\n                        </MessageContainer>\n                    );\n                }\n            }\n\n            if (mpAgreement && mpAgreement.is_accepted) {\n                return (\n                    <MessageContainer\n                        type='warning'\n                        boxStyle={{\n                            padding: 0\n                        }}>\n\n                        <DisplayField label={getText('The deal is on!')}>\n                            <div>\n                                <p>{getText(\"You and the buyer have agreed to terms and you are hired. Exceed the client's expectations to earn a great review that turns into more work.\")}</p>\n                            </div>\n                        </DisplayField>\n\n                    </MessageContainer>\n                );\n            }\n        }\n    });\n\n    return component;\n}\n\nexport { ActionDescriptionFactory }","/**\n *\n * @param spec\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst JobButtonFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n    const _ = require('lodash');\n    const RaisedButton = require('material-ui/RaisedButton').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            label: PropTypes.string.isRequired,\n            clickHandler: PropTypes.func.isRequired,\n            primary: PropTypes.bool,\n            secondary: PropTypes.bool\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Methods\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'JobButton',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            const {\n                label,\n                clickHandler,\n                primary,\n                secondary\n            } = this.props;\n\n            return (\n                <div style={{\n                    padding: '10px'\n                }}>\n                    <RaisedButton label={label} primary={primary} secondary={secondary} fullWidth={true} onClick={() => {\n                        if(_.isFunction(clickHandler)) {\n                            clickHandler();\n                        }\n                    }}/>\n                </div>\n            );\n        }\n    });\n\n    return component;\n}\n\nexport { JobButtonFactory }","/**\n * Creates a DialogGroup Component\n *\n * @param {object} spec\n * @constructor\n * @returns {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst DialogGroupFactory = (spec = {}) => {\n\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Dialogs\n    const {ConfirmedEventsDialogFactory} = require('./ConfirmedEventsDialog');\n    const {CopyEventConfirmationDialogFactory} = require('./CopyEventConfirmationDialog');\n    const {DeleteConfirmationDialogFactory} = require('./DeleteConfirmationDialog');\n    const {ExitDirtyConfirmationDialogFactory} = require('./ExitDirtyConfirmationDialog');\n    const {SpeakerSelectorDialogFactory} = require('./SpeakerSelectorDialog');\n    const {UndoConfirmationDialogFactory} = require('./UndoConfirmationDialog');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Dialogs\n    //---------------------------------\n\n    const ConfirmedEventsDialog = ConfirmedEventsDialogFactory({});\n    const CopyEventConfirmationDialog = CopyEventConfirmationDialogFactory({});\n    const DeleteConfirmationDialog = DeleteConfirmationDialogFactory({});\n    const ExitDirtyConfirmationDialog = ExitDirtyConfirmationDialogFactory({});\n    const SpeakerSelectorDialog = SpeakerSelectorDialogFactory({});\n    const UndoConfirmationDialog = UndoConfirmationDialogFactory({});\n\n    //---------------------------------\n    // Mixins\n    //---------------------------------\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dialog: PropTypes.object.isRequired\n        }\n    });\n\n    //=========================================================================\n    //\n    // Public Interface / React Component\n    //\n    //=========================================================================\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'DialogGroup',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Generates virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                dialog\n            } = this.props;\n\n            return (<div id=\"dialog-group\">\n                <CopyEventConfirmationDialog\n                    dialogItem={dialog.get('copyEventConfirmation')}/>\n\n                <UndoConfirmationDialog\n                    dialogItem={dialog.get('undoConfirmation')}/>\n\n                <ExitDirtyConfirmationDialog\n                    dialogItem={dialog.get('exitDirtyConfirmation')}/>\n\n                <DeleteConfirmationDialog\n                    dialogItem={dialog.get('deleteConfirmation')}/>\n\n                <ConfirmedEventsDialog\n                    dialogItem={dialog.get('confirmedEventsDialog')}/>\n\n                <SpeakerSelectorDialog\n                  dialogItem={dialog.get('speakerSelectorDialog')}/>\n            </div>);\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { DialogGroupFactory }","/**\n * Creates an CopyEventConfirmationDialog components\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst CopyEventConfirmationDialogFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // MUI\n    const Dialog = require('material-ui/Dialog').default;\n    const FlatButton = require('material-ui/FlatButton').default;\n    const Toggle = require('material-ui/Toggle').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        closeDialog\n    } = DialogActionsFactory({});\n    const {\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _cancelHandler;\n    let _continueHandler;\n\n    /**\n     * Handles the Cancel button of the Widget\n     *\n     * @param {object} inst - Reference to React Component Instance\n     * @private\n     */\n    _cancelHandler = (inst) => {\n        const {\n            dialogItem,\n            dispatch\n        } = inst.props;\n\n        const onCancel = dialogItem.get('onCancel');\n\n        dispatch(closeDialog());\n\n        if (onCancel) {\n            onCancel.call();\n        }\n    };\n\n    /**\n     * Hnaldes the Copy button of the Widget\n     *\n     * @param {object} inst - Reference to React Component Instance\n     * @private\n     */\n    _continueHandler = (inst) => {\n        const {\n            dialogItem,\n            dispatch\n        } = inst.props;\n        const {\n            checked\n        } = inst.state;\n\n        const onContinue = dialogItem.get('onContinue');\n\n        dispatch(closeDialog());\n\n        if (onContinue) {\n            onContinue(checked);\n        }\n    };\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dialogItem: PropTypes.object.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'CopyEventConfirmationDialog',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                checked: true\n            };\n        },\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {function|XML|JSX}\n         */\n        render() {\n            const {\n                dialogItem\n            } = this.props;\n            const {\n                checked\n            } = this.state;\n\n            const show = dialogItem.get('show');\n\n            return <Dialog\n                title={getText('Duplicate Event')}\n                open={show}\n                actions={\n                    [<FlatButton\n                        label={getText('Copy')}\n                        primary={true}\n                        onClick={(e) => {\n                            stopProp(e);\n\n                            _continueHandler(this);\n                        }}/>,\n                        <FlatButton\n                            label={getText('Cancel')}\n                            primary={true}\n                            onClick={(e) => {\n                                stopProp(e);\n\n                                _cancelHandler(this);\n                            }}/>]\n                }>\n\n                <Toggle\n                    label={getText('Copy Lists')}\n                    toggled={checked}\n                    onToggle={(e, v) => {\n                        this.setState({\n                            checked: v\n                        });\n                    }}/>\n\n                {getText('(services, contacts, actions, etc...)')}\n\n            </Dialog>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CopyEventConfirmationDialogFactory }","/**\n * Creates an SpeakerSelectorDialog components\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst SpeakerSelectorDialogFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect,\n        Provider,\n        ReactReduxContext\n    } = require('react-redux');\n\n    // MUI\n    const Dialog = require('material-ui/Dialog').default;\n    const {SpeakerListFactory} = require('../list/SpeakerList');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        DialogActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        closeDialog\n    } = DialogActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const SpeakerList = SpeakerListFactory();\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            dialog: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'SpeakerSelectorDialog',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates HTML/DOM\n         * We have to recover and send the Context on to the <SpeakerList /> component because of a\n         * bug with the <Dialog /> component and React.\n         * https://stackoverflow.com/questions/56757015/could-not-find-store-error-in-connected-component-nested-in-dialog\n         * @return {function|XML|JSX}\n         */\n        render() {\n            const {\n                dialog,\n                speakerInfo\n            } = this.props;\n\n            const show = dialog.get('showSpeakerSelector').get('show');\n            const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n            const speakerList = speakerInfo.get('speakerList');\n\n            return (\n              <ReactReduxContext.Consumer>\n                {((ctx) => (\n                  <Dialog\n                    modal={true}\n                    open={(show || !selectedSpeaker)}\n                    title={getText('Select Speaker')}\n                    bodyStyle={{\n                        overflowY: 'scroll'\n                    }}>\n                      <Provider store={ctx.store}>\n                        <SpeakerList />\n                      </Provider>\n                    </Dialog>\n                  ))}\n                </ReactReduxContext.Consumer>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { SpeakerSelectorDialogFactory }","import { ContactsViewFactory } from \"./ContactsView\";\nimport { CustomViewFactory } from \"./CustomView\";\nimport { DetailsViewFactory } from \"./DetailsView\";\nimport { JobEventViewFactory } from \"./JobEventView\";\nimport { LibraryViewFactory } from \"./LibraryView\";\nimport { MiscViewFactory } from \"./MiscView\";\nimport { ServicesViewFactory } from \"./ServicesView\";\nimport { TodoListViewFactory } from \"./TodoListView\";\nimport { TravelViewFactory } from \"./TravelView\";\n\nexport {\n  ContactsViewFactory,\n  CustomViewFactory,\n  DetailsViewFactory,\n  JobEventViewFactory,\n  LibraryViewFactory,\n  MiscViewFactory,\n  ServicesViewFactory,\n  TodoListViewFactory,\n  TravelViewFactory\n}","import { ConfirmedEventsViewFactory } from './ConfirmedEventsView';\nimport { JobApplyConfirmationViewFactory } from './JobApplyConfirmationView';\nimport { JobApplyViewFactory } from './JobApplyView';\nimport { JobBoardViewFactory } from './JobBoardView';\nimport { JobDetailViewFactory } from './JobDetailView';\nimport { JobMessagesViewFactory } from './JobMessagesView';\nimport { LeadOfferDetailViewFactory } from './LeadOfferDetailView';\nimport { LeadsOffersViewFactory } from './LeadsOffersView';\nimport { PayoutDetailViewFactory } from './PayoutDetailView';\n\nexport {\n    ConfirmedEventsViewFactory,\n    JobApplyConfirmationViewFactory,\n    JobApplyViewFactory,\n    JobBoardViewFactory,\n    JobDetailViewFactory,\n    JobMessagesViewFactory,\n    LeadOfferDetailViewFactory,\n    LeadsOffersViewFactory,\n    PayoutDetailViewFactory\n}","/**\n * Generates a PushManager component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst PushManagerFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    /* global app, PushNotification */\n\n    // NPM\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        is,\n        fromJS\n    } = require('immutable');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Material UI\n    const Snackbar = require('material-ui/Snackbar').default;\n\n    // Theme\n    const mainTheme = require('../theme/mainTheme').default;\n\n    // Enums\n    const VIEWS = require('../enums/VIEWS').default;\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        JobBoardActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n        NavActionsFactory,\n        PushActionsFactory,\n        SpeakerInfoActionsFactory,\n        TranslateActionsFactory\n    } = require('../actions');\n\n    // Services\n    const JobBoardService = require('../services/JobBoardService');\n\n    // Utils\n    const {\n        log\n    } = require('../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        selectEvent,\n        stopProp\n    } = EventActionsFactory({});\n    const {\n        isJobLead,\n        isJobOffer,\n        selectJob,\n        updateJobBoardStore\n    } = JobBoardActionsFactory();\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n    const {\n        setSubView\n    } = NavActionsFactory({});\n    const {\n        clearNotification,\n        notify,\n        parseBody,\n        register\n    } = PushActionsFactory({});\n    const {\n        clearSpeakerData,\n        selectSpeakerBySid\n    } = SpeakerInfoActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _determineRequestedView;\n    let _errorHandler;\n    let _goHandler;\n    let _goToEvent;\n    let _goToJob;\n    let _isJobEvent;\n    let _notificationHandler;\n    let _registrationHandler;\n    let _speakerSelected;\n\n    /**\n     *\n     * @param requestedView\n     * @private\n     */\n    _determineRequestedView = (requestedView) => {\n        switch (requestedView) {\n            case \"services\":\n                return VIEWS.eventViews.SERVICES_VIEW;\n            case \"messages\":\n                return VIEWS.jobSubViews.JOB_MESSAGES_VIEW;\n        }\n\n        // If there is no match, just go with existing default processing\n        return null;\n    };\n\n    /**\n     *\n     * @param err\n     * @param inst\n     * @private\n     */\n    _errorHandler = (err, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        dispatch(setMessage({\n            type: 'error',\n            text: err.message\n        }));\n        log(`push error: ${err.message}`);\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _goHandler = (props) => {\n        const {\n            auth,\n            dispatch,\n            push,\n            speakerInfo\n        } = props;\n        const sessionData = auth.get('sessionData');\n        const selectedSpeaker = speakerInfo.get('selectedSpeaker');\n        const notification = push.get('notification');\n        const additionalData = notification.get('additionalData');\n        let requestedSpeaker;\n        let requestedView;\n        let flags;\n        let requestedEvent;\n\n        if(additionalData) {\n            requestedEvent = additionalData.get('eid');\n            flags = additionalData.get('flags');\n            requestedSpeaker = additionalData.get('sid');\n            requestedView = additionalData.get('view');\n        }\n\n        dispatch(clearNotification());\n\n        if(!_.get(auth.toJS(), 'authedUserSession.is_logged_in', false)) {\n            dispatch(setMessage({\n                type: 'error',\n                text: getText('Please sign in to access your account.')\n            }));\n            return;\n        }\n\n        if(!_.isEmpty(requestedEvent)) {\n            _goToEvent({\n                dispatch,\n                requestedEvent,\n                requestedSpeaker,\n                requestedView,\n                sessionData,\n                selectedSpeaker\n            });\n        } else if(!_.isEmpty(requestedEvent) && _isJobEvent(additionalData)) {\n            _goToJob({\n                dispatch,\n                requestedEvent,\n                requestedSpeaker,\n                requestedView,\n                speakerInfo\n            });\n        } else if(!_.isEmpty(requestedView)) {\n            // TODO: We may some day want to go to a main level view, such as dash or calendar\n        }\n    };\n\n    _goToEvent = (params = {}) => {\n        const {\n            dispatch,\n            requestedEvent,\n            requestedView\n        } = params;\n\n        if(_speakerSelected(params)) {\n            dispatch(selectEvent({\n                event: {\n                    eid: requestedEvent.toString()\n                },\n                views: _determineRequestedView(requestedView)\n            }));\n        }\n    };\n\n    _goToJob = (params = {}) => {\n        const {\n            dispatch,\n            requestedEvent,\n            requestedView,\n            speakerInfo\n        } = params;\n\n        let jobView = _determineRequestedView(requestedView);\n\n        if(_speakerSelected(params)) {\n            dispatch(showLoading());\n\n            JobBoardService.calls[RADIOS.services.LOAD_JOB_BOARD]({}, (error, data) => {\n                dispatch(hideLoading());\n\n                if(!_.isEmpty(error)) {\n                    dispatch(setMessage({\n                        type: 'error',\n                        text: error\n                    }));\n                } else {\n                    dispatch(updateJobBoardStore(_.assign({\n                        lastUpdated: new Date()\n                    }, data)));\n\n                    const jobs = _.get(data, 'jobs', []);\n\n                    const selectedJob = _.filter(jobs, (job) => {\n                        return (job.event_id.toString() === requestedEvent.toString());\n                    });\n\n                    if(selectedJob && selectedJob.length && _.has(selectedJob[0], 'event_id')) {\n                        const jobSummary = fromJS(selectedJob[0]);\n                        const jobBoard = fromJS(data);\n\n                        let subViewList = [];\n\n                        // determine if this is a lead or offer\n                        if(!jobView && isJobLead({jobBoard, speakerInfo, job: jobSummary})) {\n                            subViewList.push(VIEWS.jobSubViews.JOB_DETAIL_VIEW);\n                        } else if(!jobView && isJobOffer({jobBoard, speakerInfo, job: jobSummary})) {\n                            subViewList.push(VIEWS.jobSubViews.LEAD_OFFER_DETAIL_VIEW);\n                        } else if(jobView.id === VIEWS.jobSubViews.JOB_MESSAGES_VIEW.id) {\n                            subViewList.push(jobView);\n                            // subViewList.push(VIEWS.jobSubViews.LEAD_OFFER_DETAIL_VIEW);\n                        }\n\n                        dispatch(selectJob(jobSummary, subViewList));\n                    }\n                }\n            });\n        }\n    };\n\n    /**\n     *\n     * @param additionalData\n     * @returns {boolean}\n     * @private\n     */\n    _isJobEvent = (additionalData) => {\n        const {\n            flags\n        } = additionalData;\n\n        if(_.isEmpty(flags)) {\n            return false;\n        }\n\n        return (flags & 2) > 0;\n    };\n\n    /**\n     *\n     * @param data\n     * @param inst\n     * @private\n     */\n    _notificationHandler = (data, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        let bodyData;\n        // log(data);\n\n        if (data && _.has(data, 'additionalData')) {\n            bodyData = parseBody(data.additionalData);\n        }\n\n        if (bodyData) {\n            data.additionalData = _.assign(data.additionalData, bodyData);\n        }\n\n        dispatch(notify(data));\n    };\n\n    /**\n     *\n     * @param data\n     * @param inst\n     * @private\n     */\n    _registrationHandler = (data, inst) => {\n        const {\n            dispatch,\n            push\n        } = inst.props;\n\n        // log(`registration event: ${data.registrationId}`);\n        let oldRegId = push.get('registrationId');\n        if (oldRegId !== data.registrationId) {\n            // Save new registration ID\n            dispatch(register(data.registrationId));\n            // localStorage.setItem('registrationId', data.registrationId);\n            // Post registrationId to your app server as the value has changed\n        }\n    };\n\n    _speakerSelected = (params = {}) => {\n        const {\n            dispatch,\n            requestedSpeaker,\n            sessionData,\n            selectedSpeaker\n        } = params;\n\n        // If there is no sid, then assume we are on the right one?\n        if (_.isEmpty(requestedSpeaker)) {\n            return true;\n        }\n\n        // If we are on the right speaker or we know we can safely change to the right one\n        // Then go ahead and update the selected event as well\n        if (requestedSpeaker.toString() === selectedSpeaker.get('sid').toString()) {\n            return true;\n        }\n\n        // check if the speaker also needs to change\n        if (requestedSpeaker.toString() !== selectedSpeaker.get('sid').toString() &&\n            sessionData.get('permissions').has(requestedSpeaker.toString())) {\n\n            dispatch(clearSpeakerData());\n            dispatch(selectSpeakerBySid(requestedSpeaker));\n\n            return true;\n        }\n\n        return false;\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            push: PropTypes.object.isRequired,\n            speakerInfo: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'PushManager',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Invoked once immediately after the initial rendering occurs.\n         */\n        componentDidMount() {\n            app.push = PushNotification.init({\n                \"android\": {\n                    \"senderID\": \"179304634258\",\n                    \"icon\": \"ic_stat_name\"\n                },\n                \"ios\": {\n                    \"sound\": true,\n                    \"vibration\": true,\n                    \"badge\": true\n                },\n                \"windows\": {}\n            });\n\n            app.push.on('registration', (data) => {\n                _registrationHandler(data, this);\n            });\n\n            app.push.on('notification', (data) => {\n                _notificationHandler(data, this);\n            });\n\n            app.push.on('error', (e) => {\n                _errorHandler(e, this);\n            });\n        },\n\n        /**\n         * Invoked when a component is receiving new props. This method\n         * is not called for the initial render.\n         *\n         * @param {object} nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const currentPush = this.props.push;\n            const nextPush = nextProps.push;\n            let notification;\n            let additionalData;\n\n            // call this.setState if certain props are changed\n            if (is(currentPush.get('notification'), nextPush.get('notification')) === false) {\n                notification = nextPush.get('notification');\n\n                if (notification) {\n                    additionalData = notification.get('additionalData');\n                }\n\n                // If this was caught in the background, then we want to open the app and act as if they\n                // selected \"Go\"\n                if (additionalData &&\n                    additionalData.has('foreground') &&\n                    additionalData.get('foreground') === false) {\n                    _goHandler(nextProps);\n                }\n            }\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         * @returns {*}\n         */\n        render() {\n            const {\n                dispatch,\n                push\n            } = this.props;\n\n            let additionalData = null;\n\n            const notification = push.get('notification');\n\n            if (notification) {\n                additionalData = notification.get('additionalData');\n            }\n\n            let showAction = (additionalData && (additionalData.get('eid') || additionalData.get('jid') || additionalData.get('view')));\n\n            let bgColor = 'white';\n\n            return (\n                <div>\n                    <div className='push-reg-id'\n                         style={{display: 'none'}}>\n\n                        {(push ? push.get('registrationId') : null)}\n                    </div>\n\n                    {notification ? <Snackbar\n                        id='push-notification'\n                        ref='push-notification'\n                        open={(additionalData && additionalData.get('foreground'))}\n                        onActionTouchTap={(e) => {\n                            stopProp(e);\n\n                            _goHandler(this.props);\n                        }}\n                        onRequestClose={(e) => {\n                            dispatch(clearNotification());\n                        }}\n                        style={{\n                            backgroundColor: bgColor,\n                            height: 'auto',\n                            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n                        }}\n                        contentStyle={{\n                            backgroundColor: bgColor,\n                            color: 'black',\n                            height: 'auto'\n                        }}\n                        bodyStyle={{\n                            backgroundColor: bgColor,\n                            height: 'auto'\n                        }}\n                        autoHideDuration={7000}\n                        action={(showAction ? getText('GO') : getText('OK'))}\n                        message={<div>\n                            <div style={{\n                                color: mainTheme.primaryColor,\n                                fontWeight: 'bold',\n                                fontSize: '10px'\n                            }}>{notification.get('title')}</div>\n                            <div className=\"push-message\" style={{\n                                lineHeight: 1.5\n                            }}>\n                                {notification.get('message')}\n                            </div>\n                        </div>}/> : null}\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { PushManagerFactory }","const AuthenticateService = require('./AuthenticateService').default;\nconst CalendarService = require('./CalendarService').default;\nconst EventService = require('./EventService').default;\nconst JobBoardService = require('./JobBoardService').default;\nconst SearchService = require('./SearchService').default;\nconst LocalStorageServiceFactory = require('./LocalStorageService').default;\nconst LoginServiceFactory = require('./LoginService');\n\nAuthenticateService.init();\nCalendarService.init();\nEventService.init();\nJobBoardService.init();\nSearchService.init();\n\nexport {\n    AuthenticateService,\n    CalendarService,\n    EventService,\n    JobBoardService,\n    LocalStorageServiceFactory,\n    LoginServiceFactory,\n    SearchService\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Balboa = require('ES/services/Balboa');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Radios\nconst RadioService = require('react-pubsub-via-radio.js/service');\nconst {radio} = require('react-pubsub-via-radio.js');\n\n// Utilities\nconst {log} = require('../util/DevTools').default;\nconst {isSolutionTree} = require('../util/Platform').default;\n\n// Actions\nconst {TranslateActionsFactory} = require('../actions');\n\nconst {getText} = TranslateActionsFactory({});\n\nconst SharedParams = require('./SharedParams').default;\n\n/******************************************************************************\n *\n * Public Interface\n *\n *****************************************************************************/\nconst init = () => {\n    RadioService(RADIOS.services.RENEW_TOKEN, (data, callback) => {\n        // data is all session data and we only need these 3 fields\n        let params = _.pick(data, ['username', 'token', 'timestamp'], SharedParams);\n        Balboa.api('/authenticate/renewtoken', params, (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Authenticate User'), null);\n        });\n    }, (data) => {\n        // token is a good unique identifier for the call\n        return data.token;\n    });\n\n    RadioService(RADIOS.services.GET_DISPLAY_LISTS, (data, callback) => {\n        Balboa.api('/authenticate/getdisplaylists', SharedParams, (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Retrieve Display Data'), null);\n        });\n    }, (data) => {\n        return RADIOS.services.GET_DISPLAY_LISTS;\n    });\n\n    RadioService(RADIOS.services.GET_COMPANY_LISTS, (data, callback) => {\n        if (isSolutionTree()) {\n            Balboa.api('/authenticate/getsitelists', SharedParams, (successResponse) => {\n                if (successResponse.success === true) {\n                    callback(null, successResponse.data);\n                } else {\n                    callback(successResponse.message, null);\n                }\n            }, (failureResponse) => {\n                callback((failureResponse && failureResponse.message) || getText('Failed to Retrieve Companylist Data'), null);\n            });\n        } else {\n            callback(null, {});\n        }\n    }, (data) => {\n        return RADIOS.services.GET_COMPANY_LISTS;\n    });\n\n    RadioService(RADIOS.services.FORGOT_PASSWORD, (data, callback) => {\n        Balboa.api('/authenticate/forgotpassword', _.assign({}, data, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, true);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Send Email'), null);\n        });\n    }, (data) => {\n        return RADIOS.services.FORGOT_PASSWORD;\n    });\n};\n\nexport default {\n    init\n}","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Balboa = require('ES/services/Balboa');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Radios\nconst RadioService = require('react-pubsub-via-radio.js/service');\nconst {radio} = require('react-pubsub-via-radio.js');\n\n// Utilities\nconst {log} = require('../util/DevTools').default;\n\n// Actions\nconst {TranslateActionsFactory} = require('../actions');\n\nconst {getText} = TranslateActionsFactory({});\n\nconst SharedParams = require('./SharedParams').default;\n\n/******************************************************************************\n *\n * Public Interface\n *\n *****************************************************************************/\nconst init = () => {\n    RadioService(RADIOS.services.LOAD_DASHBOARD, (data, callback) => {\n        // data is all session data and we only need these 3 fields\n        let params = {\n            company_id: _.get(data, ['company_id'], 0),\n            formatdates: true,\n            onlysections: []\n        };\n\n        Balboa.api('/calendar/dashboard', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Load Dashboard Data'), null);\n        });\n    }, (data) => {\n        return `${data.sid.toString()}_${data.company_id || 2}`;\n    });\n\n    RadioService(RADIOS.services.LOAD_CALENDAR, (data, callback) => {\n        let params = {\n            include_details: true,\n            formatdates: true,\n            exclude_event_types: []\n        };\n\n        params = _.assign(params, data, SharedParams);\n\n        Balboa.api('/calendar', params, (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Load Calendar Data'), null);\n        });\n    }, (data) => {\n        return RADIOS.services.LOAD_CALENDAR;\n    });\n};\n\nexport default {\n    init\n}","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Balboa = require('ES/services/Balboa');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Radios\nconst RadioService = require('react-pubsub-via-radio.js/service');\nconst {radio} = require('react-pubsub-via-radio.js');\n\n// Utilities\nconst {log} = require('../util/DevTools').default;\nconst esUtils = require('ES/utils/esUtils');\n\n// Actions\nconst {TranslateActionsFactory} = require('../actions');\n\nconst {getText} = TranslateActionsFactory({});\n\nconst SharedParams = require('./SharedParams').default;\n\n/******************************************************************************\n *\n * Public Interface\n *\n *****************************************************************************/\n\nconst init = () => {\n    RadioService(RADIOS.services.LOAD_EVENT, (data, callback) => {\n        Balboa.api(`/event/read/${data.eid}`, SharedParams, (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Load Event'), null);\n        });\n    }, (data) => {\n        return data.eid.toString();\n    });\n\n    RadioService(RADIOS.services.SAVE_EVENT, (data, callback) => {\n        let event = esUtils.convertJSEventToBalboa3Event(data.event);\n\n        if (event === null) {\n            return;\n        }\n        Balboa.api(`/event/update/${event.eid}`, _.assign({\n            event_json: event\n        }, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Save Event'), null);\n        });\n    }, (data) => {\n        return data.event.eid.toString();\n    });\n\n    RadioService(RADIOS.services.DELETE_EVENT, (data, callback) => {\n        Balboa.api(`/event/destroy/${data.eid}`, _.assign({\n            confirm: 'y'\n        }, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Delete Event'), null);\n        });\n    }, (data) => {\n        return data.eid;\n    });\n\n    RadioService(RADIOS.services.COPY_EVENT, (data, callback) => {\n        Balboa.api(`/event/copyevent/${data.eid}`, _.assign({\n            target_sid: data.targetSid,\n            copylists: data.copyLists\n        }, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.event_id);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Copy Event'), null);\n        });\n    }, (data) => {\n        return data.eid;\n    });\n\n    RadioService(RADIOS.services.EMAIL_COWORKERS, (data, callback) => {\n        let params = _.pick(data, ['subject', 'note', 'coworkers']);\n\n        Balboa.api(`/event/emailtocoworkers/${data.eid}`, _.assign(params, SharedParams),\n            (successResponse) => {\n                if (successResponse.success === true) {\n                    callback(null, true);\n                } else {\n                    callback(successResponse.message, null);\n                }\n            }, (failureResponse) => {\n                callback((failureResponse && failureResponse.message) || getText('Failed to Email Coworkers'), null);\n            });\n    }, (data) => {\n        return `${RADIOS.services.EMAIL_COWORKERS}-${data.eid}`;\n    });\n};\n\nexport default {\n    init\n}","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Balboa = require('ES/services/Balboa');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Radios\nconst RadioService = require('react-pubsub-via-radio.js/service');\nconst {radio} = require('react-pubsub-via-radio.js');\n\n// Utilites\nconst {log} = require('../util/DevTools').default;\n\n// Actions\nconst {TranslateActionsFactory} = require('../actions');\n\nconst {getText} = TranslateActionsFactory({});\n\nconst SharedParams = require('./SharedParams').default;\n\n/******************************************************************************\n *\n * Public Interface\n *\n *****************************************************************************/\nconst init = () => {\n    RadioService(RADIOS.services.SEARCH_EVENTS, (data, callback) => {\n\n        let params = {\n            sids: [data.sid],\n            searchterm: data.search,\n            deepsearch: data.deepSearch || false,\n            marketplaceonly: data.marketplaceOnly ? 1 : 0,\n            futureonly: data.futureOnly ? 1 : 0,\n            datelessonly: data.onlyDatelessEvents ? 'true' : 'false',\n            exclude_event_types: data.excludeEventTypes,\n            formatdates: true\n        };\n\n        Balboa.api('/search', _.assign(params, SharedParams), (successResponse) => {\n            if (successResponse.success === true) {\n                callback(null, successResponse.data);\n            } else {\n                callback(successResponse.message, null);\n            }\n        }, (failureResponse) => {\n            callback((failureResponse && failureResponse.message) || getText('Failed to Search Events'), null);\n        });\n    }, (data) => {\n        return data.sid.toString();\n    });\n};\n\nexport default {\n    init\n}","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\nconst STORAGE = require('../enums/STORAGE').default;\n\n// Models\nconst AuthModel = require('./models/AuthModel').default;\nconst MessageModel = require('./models/MessageModel').default;\nconst PushModel = require('./models/PushModel').default;\n\n// Services\nconst {fetchItem, storeItem, removeItem, clear} = require('../services/LocalStorageService').default();\n\n// Factories\nconst AuthedUserSessionFactory = require('../util/AuthedUserSession').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an AuthStore.  Handles all state changes to the auth area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst AuthStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**\n     * Loads session/authentication object form local storage.\n     *\n     * @returns {object}\n     * @private\n     */\n    let _loadSessionFromStorage = () => {\n        try {\n            return fetchItem(STORAGE.SESSION_DATA, JSON.parse);\n        } catch (e) {\n            return null;\n        }\n    };\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const _initialState = () => {\n        return new AuthModel({\n            sessionData: fromJS(_loadSessionFromStorage() || {}),\n            authedUserSession: fromJS(AuthedUserSessionFactory({sessionData: _loadSessionFromStorage() || {}}))\n        });\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _logout;\n    let _updateStore;\n\n    /**\n     * Clears the session data\n     *\n     * @param {AuthModel} auth\n     * @returns {AuthModel}\n     * @private\n     */\n    _logout = (auth) => {\n        let sessionData = fromJS({});\n        removeItem(STORAGE.SESSION_DATA);\n        return auth.set('sessionData', sessionData).set('authedUserSession', fromJS(AuthedUserSessionFactory({sessionData: sessionData.toJS()})));\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {AuthModel} auth\n     * @returns {AuthModel}\n     * @private\n     */\n    _updateStore = (payload, auth) => {\n        let updatedAuth = auth;\n\n        if (_.has(payload, 'sessionData')) {\n            updatedAuth = updatedAuth\n                .set('sessionData', fromJS(payload.sessionData))\n                .set('authedUserSession', fromJS(AuthedUserSessionFactory({sessionData: payload.sessionData})));\n\n            storeItem(STORAGE.SESSION_DATA, payload.sessionData);\n        }\n        return updatedAuth;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|AuthModel} auth\n     * @param {object} action\n     * @returns {Record|AuthModel}\n     */\n    return (auth, action) => {\n        if (!auth) {\n            auth = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.AUTH_STORE_UPDATE:\n                return _updateStore(payload, auth);\n            case RADIOS.stores.LOGOUT:\n                return _logout(auth);\n        }\n\n        return auth;\n    };\n}\n\nexport {\n    AuthStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst {Map} = require('immutable');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst CompanyDataModel = require('./models/CompanyDataModel').default;\n\n/**\n * Creates an CompanyDataStore.  Handles all state changes to the companyData\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst CompanyDataStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|DisplayDataModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new CompanyDataModel({\n            companyLists: Map()\n        });\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearData;\n    let _updateStore;\n\n    /**\n     *\n     * @returns {Record|DisplayDataModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|CompanyDataModel} companyData\n     * @returns {Record|CompanyDataModel}\n     * @private\n     */\n    _updateStore = (payload, companyData) => {\n        let updatedModel = companyData;\n\n        if (_.has(payload, 'timestamp')) {\n            updatedModel = updatedModel.set('timestamp', payload.timestamp);\n        }\n\n        if (_.has(payload, ['companyLists'])) {\n            updatedModel = updatedModel\n                .set('companyLists', companyData.get('companyLists').merge(_.get(payload, ['companyLists'])));\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handler for all actions this Reducer cares about\n     *\n     * @param {null|Record|CompanyDataModel} companyData\n     * @param {object} action\n     *\n     * @returns {Record|CompanyDataModel}\n     */\n    return (companyData, action) => {\n        if (!companyData) {\n            companyData = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.COMPANY_DATA_STORE_UPDATE:\n                return _updateStore(payload, companyData);\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        return companyData;\n    };\n}\n\nexport {\n    CompanyDataStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst {fromJS} = require('immutable');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst DashboardModel = require('./models/DashboardModel').default;\n\n/**\n * Creates an DashboardStore.  Handles all state changes to the dashboard\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst DashboardStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const _initialState = () => {\n        return new DashboardModel();\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearData;\n    let _updateStore;\n\n    /**\n     * @returns {Record|DashboardModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|DashboardModel} dashboard\n     * @returns {Record|DashboardModel}\n     * @private\n     */\n    _updateStore = (payload, dashboard) => {\n        let updatedModel = dashboard;\n\n        if (_.has(payload, 'actionlist')) {\n            updatedModel = updatedModel.set('todoList', fromJS(payload.actionlist));\n        }\n\n        if (_.has(payload, 'activity')) {\n            updatedModel = updatedModel.set('activity', fromJS(payload.activity));\n        }\n\n        if (_.has(payload, 'pipeline')) {\n            updatedModel = updatedModel.set('pipeline', fromJS(payload.pipeline));\n        }\n\n        if (_.has(payload, 'upcoming')) {\n            updatedModel = updatedModel.set('upcoming', fromJS(payload.upcoming));\n        }\n\n        if (_.has(payload, 'lastUpdated')) {\n            updatedModel = updatedModel.set('lastUpdated', payload.lastUpdated);\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|DashboardModel} dashboard\n     * @param {object} action\n     * @return {Record|DashboardModel}\n     */\n    return (dashboard, action) => {\n        if (!dashboard) {\n            dashboard = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.DASHBOARD_STORE_UPDATE:\n                return _updateStore(payload, dashboard);\n            case RADIOS.stores.CLEAR_EVENT_ASSOCIATED_DATA:\n            case RADIOS.stores.CLEAR_SPEAKER_DATA:\n            case RADIOS.stores.REFRESH_DATA:\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        return dashboard;\n    };\n}\n\nexport {\n    DashboardStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst {Map} = require('immutable');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst DisplayDataModel = require('./models/DisplayDataModel').default;\n\n/**\n * Creates an DisplayDataStore.  Handles all state changes to the displayData\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst DisplayDataStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|DisplayDataModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new DisplayDataModel({\n            displayLists: Map()\n        });\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearData;\n    let _updateStore;\n\n    /**\n     *\n     * @returns {Record|DisplayDataModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|DisplayDataModel} displayData\n     * @returns {Record|DisplayDataModel}\n     * @private\n     */\n    _updateStore = (payload, displayData) => {\n        let updatedModel = displayData;\n        let bureauMap = Map();\n\n        if (_.has(payload, 'timestamp')) {\n            updatedModel = updatedModel.set('timestamp', payload.timestamp);\n        }\n\n        if (_.has(payload, 'displayLists')) {\n            // flatten/optimize the big list of bureaus\n            if (payload['displayLists'] && payload['displayLists']['universal'] && payload['displayLists']['universal']['bureaus']) {\n                _.map(payload['displayLists']['universal']['bureaus'], (item) => {\n                    bureauMap = bureauMap.set(item['bid'], item['bname']);\n                });\n            }\n\n            updatedModel = updatedModel\n                .set('bureauMap', bureauMap)\n                .set('displayLists', displayData.get('displayLists').merge(payload.displayLists));\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handler for all actions this Reducer cares about\n     *\n     * @param {null|Record|DisplayDataModel} displayData\n     * @param {object} action\n     *\n     * @returns {Record|DisplayDataModel}\n     */\n    return (displayData, action) => {\n        if (!displayData) {\n            displayData = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.DISPLAY_DATA_STORE_UPDATE:\n                return _updateStore(payload, displayData);\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        return displayData;\n    };\n}\n\nexport {\n    DisplayDataStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS, is, Map} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst EventModel = require('./models/EventModel').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\nconst DateTools = require('../util/DateTools').default({});\n\n// Actions\nconst {StoreActionsFactory} = require('../actions');\n\n// Stores\nconst {ContactStoreFactory} = require('./ContactStore');\nconst {NoteStoreFactory} = require('./NoteStore');\nconst {ProductStoreFactory} = require('./ProductStore');\nconst {ServiceStoreFactory} = require('./ServiceStore');\nconst {StageTimeStoreFactory} = require('./StageTimeStore');\nconst {TodoStoreFactory} = require('./TodoStore');\nconst {VenueStoreFactory} = require('./VenueStore');\n\n/**\n * Creates an EventStore.  Handles all state changes to the event\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst EventStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {generateAddId} = StoreActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|EventModel}\n     * @privatee\n     */\n    const _initialState = () => {\n        return new EventModel();\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearData;\n    let _deleteListItem;\n    let _discardEventChanges;\n    let _isCustomFieldsEmpty;\n    let _mergeEventData;\n    let _mergeModifiedEvent;\n    let _selectEvent;\n    let _toggleDirty;\n    let _updateList;\n    let _updateStore;\n\n    /**\n     * Reverts the store to initial state.\n     *\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @param {string} listName\n     * @param {string} listIdentifier\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _deleteListItem = (payload, event, listName, listIdentifier) => {\n        listIdentifier = listIdentifier || 'id';\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const list = modifiedEvent.get(listName);\n\n        const filteredList = list.filter((item) => {\n            if (item.get(listIdentifier)\n                && payload[listIdentifier]\n                && item.get(listIdentifier).toString() !== payload[listIdentifier].toString()) {\n                return true;\n            }\n\n            return false;\n        });\n\n        const updatedEvent = modifiedEvent.set(listName, filteredList);\n\n        return event.set('modifiedEvent', updatedEvent);\n    };\n\n    /**\n     * Replaces modifiedEvent with selectedEvent, discarding all changes done to\n     * modifiedEvent\n     *\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _discardEventChanges = (event) => {\n        return event.set('modifiedEvent', event.get('selectedEvent'));\n    };\n\n    /**\n     *\n     * @param {object} customFields\n     * @return {boolean}\n     * @private\n     */\n    _isCustomFieldsEmpty = (customFields) => {\n        let isEmpty = true;\n\n        _.map(customFields, (sid) => {\n            _.map(sid, (field) => {\n                isEmpty = false;\n            });\n        });\n\n        return isEmpty;\n    };\n\n    /**\n     * Merges given data into the existing selectedEvent.  Often as a result as event/read\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _mergeEventData = (payload, event) => {\n        const selectedEvent = event.get('selectedEvent');\n\n        const updatedEvent = selectedEvent.merge(payload);\n\n        // We want to put another reference to the event in modifiedEvent so we can\n        // persist the event edits through multiple screens\n        return event.set('selectedEvent', updatedEvent).set('modifiedEvent', updatedEvent);\n    };\n\n    /**\n     * Merges given data into the existing modifiedEvent.  So we can track the changes across screens\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _mergeModifiedEvent = (payload, event) => {\n        const modifiedEvent = event.get('modifiedEvent');\n        const selectedEvent = event.get('selectedEvent');\n        let updatedEvent;\n        let eventDirty;\n\n        if (!modifiedEvent)\n            return event;\n\n        updatedEvent = modifiedEvent;\n\n        // convert some strings to integers.  Doesn't impact save, but since the original event is an integer it causes\n        // a false dirty flag\n        _.each(['eid', 'bureauID', 'deliveryMethod', 'productQtyBoxes', 'depositPercent', 'presentingproductid', 'pd_rep_id', 'sales_rep_id', 'project_manager_id'], (key) => {\n            if (_.has(payload, key)) {\n                if (_.isString(payload[key])) {\n                    payload[key] = DateTools.parseNum(payload[key]);\n                }\n            }\n        });\n\n        if (_.has(payload, 'Customfields')) {\n            if (!_isCustomFieldsEmpty(payload['Customfields']['contents'])) {\n                const Customfields = updatedEvent.get('Customfields');\n                let contents = Customfields.get('contents');\n\n                // contents can be set to a List by default, but it needs to be a Map()\n                if (!contents.size)\n                    contents = Map();\n\n                updatedEvent = updatedEvent.set('Customfields',\n                    Customfields.set('contents',\n                        contents.merge(payload['Customfields']['contents'])\n                    )\n                );\n            }\n        } else {\n            updatedEvent = updatedEvent.merge(fromJS(payload));\n        }\n\n        eventDirty = !is(selectedEvent, updatedEvent);\n\n        return event.set('modifiedEvent', updatedEvent).set('dirty', eventDirty);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {object} payload.event\n     * @param {Record|EventModel} state\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _selectEvent = (payload, state) => {\n        const {\n            event\n        } = payload;\n\n        const selectedEvent = fromJS(event);\n\n        return state.set('selectedEvent', selectedEvent).set('modifiedEvent', selectedEvent);\n    };\n\n    /**\n     *\n     * @param {boolean} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _toggleDirty = (payload, event) => {\n        return event.set('dirty', payload);\n    };\n\n    /**\n     * Generic method for updating a List\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @param {string} listName\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _updateList = (payload, event, listName) => {\n        const modifiedEvent = event.get('modifiedEvent');\n        const list = modifiedEvent.get(listName);\n\n        let updatedList;\n        let updateIndex = undefined;\n        let mergedItem = null;\n\n        if (payload.id && payload.id.toString() === '0') {\n            payload.id = generateAddId();\n        }\n\n        // edit\n        list.map((item, i) => {\n            if (item.get('id') === payload.id) {\n                updateIndex = i;\n            }\n        });\n\n        if (updateIndex !== undefined) {\n            mergedItem = list.get(updateIndex).merge(fromJS(payload));\n            updatedList = list.set(updateIndex, mergedItem);\n        } else {\n            updatedList = list.push(fromJS(payload));\n        }\n\n        const updatedEvent = event.set('modifiedEvent', modifiedEvent.set(listName, updatedList));\n\n        return updatedEvent;\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|EventModel} event\n     * @returns {Record|EventModel}\n     * @private\n     */\n    _updateStore = (payload, event) => {\n        let updatedModel = event;\n        if (_.has(payload, 'selectedEvent')) {\n            updatedModel = updatedModel.set('selectedEvent', fromJS(payload.selectedEvent));\n        }\n\n        return updatedModel;\n    };\n\n    /**********************************\n     * Stores\n     *********************************/\n\n    const subStoreSpec = {\n        deleteListItem: _deleteListItem,\n        updateList: _updateList\n    };\n\n    const ContactStore = ContactStoreFactory(subStoreSpec);\n    const NoteStore = NoteStoreFactory(subStoreSpec);\n    const ProductStore = ProductStoreFactory(subStoreSpec);\n    const ServiceStore = ServiceStoreFactory(subStoreSpec);\n    const StageTimeStore = StageTimeStoreFactory(subStoreSpec);\n    const TodoStore = TodoStoreFactory(subStoreSpec);\n    const VenueStore = VenueStoreFactory(subStoreSpec);\n\n    const subStoreList = [\n        ContactStore,\n        NoteStore,\n        ProductStore,\n        ServiceStore,\n        StageTimeStore,\n        TodoStore,\n        VenueStore\n    ];\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|EventModel} event\n     * @param {object} action\n     *\n     * @returns {Record|EventModel}\n     */\n    return (event, action) => {\n\n        if (!event) {\n            event = _initialState();\n        }\n\n        const {payload} = action;\n        switch (action.type) {\n            case RADIOS.stores.EVENT_STORE_DISCARD_EVENT_CHANGES:\n                return _discardEventChanges(event);\n            case RADIOS.stores.EVENT_STORE_MERGE_EVENT_DATA:\n                return _mergeEventData(payload, event);\n            case RADIOS.stores.EVENT_STORE_MERGE_MODIFIED_EVENT:\n                return _mergeModifiedEvent(payload, event);\n            case RADIOS.stores.EVENT_STORE_SELECT_EVENT:\n                return _selectEvent(payload, event);\n            case RADIOS.stores.EVENT_STORE_TOGGLE_DIRTY:\n                return _toggleDirty(payload, event);\n            case RADIOS.stores.EVENT_STORE_UPDATE:\n                return _updateStore(payload, event);\n            case RADIOS.stores.CLEAR_EVENT_DATA:\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        _.map(subStoreList, (store) => {\n            event = store(event, action);\n        });\n\n        return event;\n    };\n}\n\nexport {\n    EventStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst LoadingModel = require('./models/LoadingModel').default;\n\n// Utilities\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an LoadingStore.  Handles all state changes to the loading area\n * of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst LoadingStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|LoadingModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new LoadingModel({});\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|LoadingModel} loading\n     * @returns {Record|LoadingModel}\n     * @private\n     */\n    const _updateStore = (payload, loading) => {\n        let updatedModel = loading;\n\n        if (_.has(payload, 'show')) {\n            updatedModel = updatedModel.set('show', payload.show);\n        }\n\n        if (_.has(payload, 'silentRefresh')) {\n            updatedModel = updatedModel.set('silentRefresh', payload.silentRefresh);\n        }\n\n        return updatedModel;\n    };\n\n    /**\n     *\n     * @param {Record|LoadingModel} loading\n     * @returns {Record|LoadingModel}\n     * @private\n     */\n    const _showLoading = (loading) => {\n        let show = true;\n\n        if (loading.get('silentRefresh')) {\n            show = false;\n        }\n\n        return loading.set('counter', (loading.get('counter') + 1)).set('show', true);\n    };\n\n    /**\n     *\n     * @param {Record|LoadingModel} loading\n     * @returns {Record|LoadingModel}\n     * @private\n     */\n    const _hideLoading = (loading) => {\n        return loading.set('counter', (loading.get('counter') - 1)).set('show', false).set('silentRefresh', false);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|LoadingModel} loading\n     * @param {object} action\n     *\n     * @returns {Record|LoadingModel}\n     */\n    return (loading, action) => {\n        if (!loading) {\n            loading = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.LOADING_STORE_UPDATE:\n                return _updateStore(payload, loading);\n            case RADIOS.stores.LOADING_STORE_HIDE:\n                return _hideLoading(loading);\n            case RADIOS.stores.LOADING_STORE_SHOW:\n                return _showLoading(loading);\n        }\n\n        return loading;\n    };\n}\n\nexport {\n    LoadingStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst MessageModel = require('../stores/models/MessageModel').default;\n\n// Actions\nconst {TranslateActionsFactory} = require('../actions');\n\n/**\n * Creates an MessageStore.  Handles all state changes to the messages\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst MessageStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {getText} = TranslateActionsFactory({});\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {List<MessageModel>|List<any>}\n     * @private\n     */\n    const _initialState = () => {\n        return Immutable.List();\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _addMessage;\n    let _clearMessages;\n    let _logout;\n\n    /**\n     * Adds a MessageModel to the state\n     *\n     * @param {Record|MessageModel} payload\n     * @param {List<MessageModel>|List<any>} messages\n     * @returns {List<MessageModel>|List<any>}\n     * @private\n     * @see MessageModel\n     * @see List\n     */\n    _addMessage = (payload, messages) => {\n        return messages.push(new MessageModel(payload));\n    };\n\n    /**\n     * Clears all messages off the state\n     *\n     * @param {List<MessageModel>|List<any>} messages\n     * @returns {List<MessageModel>|List<any>}\n     * @private\n     * @see MessageModel\n     * @see List\n     */\n    _clearMessages = (messages) => {\n        return messages.clear();\n    };\n\n    /**\n     *\n     * @param {List<MessageModel>|List<any>} messages\n     * @returns {List<MessageModel>|List<any>}\n     * @private\n     * @see MessageModel\n     * @see List\n     */\n    _logout = (messages) => {\n        return _addMessage({type: 'success', text: getText('You Have Been Logged Out')}, messages);\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|List<MessageModel>|List<any>} messages\n     * @param {object} action\n     *\n     * @returns {List<MessageModel>|List<any>}\n     */\n    return (messages, action) => {\n        if (!messages) {\n            messages = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.MESSAGE_STORE_ADD:\n                return _addMessage(payload, messages);\n            case RADIOS.stores.MESSAGE_STORE_CLEAR:\n                return _clearMessages(messages);\n            case RADIOS.stores.LOGOUT:\n                return _logout(messages);\n        }\n\n        return messages;\n    };\n}\n\nexport {\n    MessageStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst OverlayModel = require('./models/OverlayModel').default;\n\n/**\n * Creates an OverlayStore.  Handles all state changes to the overlay\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst OverlayStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|OverlayModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new OverlayModel({});\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearStore;\n    let _updateStore;\n\n    /**\n     *\n     * @returns {Record|OverlayModel}\n     * @private\n     */\n    _clearStore = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|OverlayModel} overlay\n     * @returns {Record|OverlayModel}\n     * @private\n     * @see Record\n     * @see OverlayModel\n     */\n    _updateStore = (payload, overlay) => {\n        let updatedModel = overlay;\n\n        if (_.has(payload, 'show')) {\n            updatedModel = updatedModel.set('show', payload.show);\n        }\n\n        if (_.has(payload, 'mode')) {\n            updatedModel = updatedModel.set('mode', payload.mode);\n        }\n\n        if (_.has(payload, 'onClick')) {\n            updatedModel = updatedModel.set('onClick', payload.onClick);\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|OverlayModel} overlay\n     * @param {object} action\n     *\n     * @returns {Record|OverlayModel}\n     */\n    return (overlay, action) => {\n        if (!overlay) {\n            overlay = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.OVERLAY_STORE_UPDATE:\n                return _updateStore(payload, overlay);\n            case RADIOS.stores.OVERLAY_STORE_CLEAR:\n                return _clearStore();\n        }\n\n        return overlay;\n    };\n}\n\nexport {\n    OverlayStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\nconst STORAGE = require('../enums/STORAGE').default;\n\n// Models\nconst PushModel = require('./models/PushModel').default;\n\n// Services\nconst {fetchItem, storeItem, removeItem} = require('../services/LocalStorageService').default();\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an PushStore.  Handles all state changes to the push area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst PushStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const _initialState = () => {\n        return new PushModel({\n            registrationId: fetchItem(STORAGE.PUSH_REG_ID)\n        });\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _notify;\n    let _register;\n    let _updateStore;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {PushModel} push\n     * @returns {PushModel}\n     * @private\n     */\n    _notify = (payload, push) => {\n        return push.set('notification', fromJS(payload));\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {PushModel} push\n     * @returns {PushModel}\n     * @private\n     */\n    _register = (payload, push) => {\n        storeItem(STORAGE.PUSH_REG_ID, payload);\n        return push.set('registrationId', payload);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {PushModel} push\n     * @returns {PushModel}\n     * @private\n     */\n    _updateStore = (payload, push) => {\n        let updatedModel = push;\n\n        if (_.has(payload, 'registrationId')) {\n            updatedModel = updatedModel.set('registrationId', payload.registrationId);\n            storeItem(STORAGE.PUSH_REG_ID, payload.registrationId);\n        }\n\n        if (_.has(payload, 'notification')) {\n            updatedModel = updatedModel.set('notification', fromJS(payload.notification));\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|PushModel} push\n     * @param {object} action\n     *\n     * @returns {Record|PushModel}\n     */\n    return (push, action) => {\n        if (!push) {\n            push = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.PUSH_STORE_NOTIFY:\n                return _notify(payload, push);\n            case RADIOS.stores.PUSH_STORE_REGISTER:\n                return _register(payload, push);\n            case RADIOS.stores.PUSH_STORE_UPDATE:\n                return _updateStore(payload, push);\n        }\n\n        return push;\n    };\n}\n\nexport {\n    PushStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst {fromJS, List} = require('immutable');\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst SearchModel = require('./models/SearchModel').default;\n\n/**\n * Creates an SearchStore.  Handles all state changes to the search\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst SearchStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|SearchModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new SearchModel();\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _autoSearch;\n    let _clearResults;\n    let _clearStore;\n    let _updateStore;\n\n    /**\n     *\n     * @param {object} payload\n     * @returns {Record|SearchModel}\n     * @private\n     */\n    _autoSearch = (payload) => {\n        return new SearchModel(payload).set('autoSearch', true);\n    };\n\n    /**\n     *\n     * @param {Record|SearchModel} search\n     * @returns {Record|SearchModel}\n     * @private\n     */\n    _clearResults = (search) => {\n        return search.set('results', List()).set('noResults', false);\n    };\n\n    /**\n     *\n     * @returns {Record|SearchModel}\n     * @private\n     */\n    _clearStore = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|SearchModel} search\n     * @returns {Record|SearchModel}\n     * @private\n     */\n    _updateStore = (payload, search) => {\n        let updatedModel = search;\n\n        updatedModel = updatedModel.mergeDeep(fromJS(payload));\n\n        // if (_.has(payload, 'description')) {\n        //     updatedModel = updatedModel.set('description', payload.description);\n        // }\n        //\n        // if (_.has(payload, 'results')) {\n        //     updatedModel = updatedModel.set('results', fromJS(payload.results));\n        // }\n        //\n        // if (_.has(payload, 'noResults')) {\n        //     updatedModel = updatedModel.set('noResults', payload.noResults);\n        // }\n        //\n        // if (_.has(payload, 'searchTerm')) {\n        //     updatedModel = updatedModel.set('searchTerm', payload.searchTerm);\n        // }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|SearchModel} search\n     * @param {object} action\n     *\n     * @returns {Record|SearchModel}\n     */\n    return (search, action) => {\n        if (!search) {\n            search = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.SEARCH_STORE_AUTO_SEARCH:\n                return _autoSearch(payload, search);\n            case RADIOS.stores.SEARCH_STORE_CLEAR:\n            case RADIOS.stores.CLEAR_EVENT_ASSOCIATED_DATA:\n                return _clearResults(search);\n            case RADIOS.stores.SEARCH_STORE_UPDATE:\n                return _updateStore(payload, search);\n            case RADIOS.stores.LOGOUT:\n            case RADIOS.stores.REFRESH_DATA:\n                return _clearStore();\n        }\n\n        return search;\n    };\n}\n\nexport {\n    SearchStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\nconst GENERAL = require('../enums/GENERAL').default;\nconst STORAGE = require('../enums/STORAGE').default;\n\n// Services\nconst {fetchItem, storeItem} = require('../services/LocalStorageService').default();\n\n// Models\nconst SpeakerInfoModel = require('./models/SpeakerInfoModel').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an SpeakerInfoStore.  Handles all state changes to the speakerInfo\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst SpeakerInfoStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**\n     * Loads the last selected speaker from local storage\n     * @returns {null|{sid: {string}}}\n     * @private\n     */\n    let _loadSpeakerFromStorage = () => {\n        let sid = null;\n\n        try {\n            sid = fetchItem(STORAGE.SELECTED_SPEAKER);\n\n            if (sid) {\n                return {sid: sid};\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    };\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|SpeakerInfoModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new SpeakerInfoModel({\n            speakerMode: GENERAL.SINGLE_SPEAKER_MODE,\n            selectedSpeaker: fromJS(_loadSpeakerFromStorage())\n        });\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearData;\n    let _selectSpeaker;\n    let _selectSpeakerBySid;\n    let _updateShortProfile;\n    let _updateStore;\n\n    /**\n     *\n     * @returns {Record|SpeakerInfoModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|SpeakerInfoModel} speakerInfo\n     * @returns {Record|SpeakerInfoModel}\n     * @private\n     */\n    _updateShortProfile = (payload, speakerInfo) => {\n        let updatedModel = speakerInfo;\n        let speakerList = speakerInfo.speakerList;\n        let selectedSpeaker = updatedModel.selectedSpeaker;\n        const shortProfile = payload.shortProfile;\n\n\n        _.map(shortProfile, (profile, sid) => {\n            if(sid.toString() === selectedSpeaker.get('sid').toString()) {\n                updatedModel = updatedModel.set('selectedSpeaker', selectedSpeaker.set('shortProfile', fromJS(profile)));\n            }\n\n            speakerList = speakerList.map((speaker) => {\n                if(speaker.get('sid').toString() === sid.toString()) {\n                    return speaker.set('shortProfile', fromJS(profile));\n                }\n\n                return speaker;\n            });\n        });\n\n        return updatedModel.set('speakerList', speakerList);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|SpeakerInfoModel} speakerInfo\n     * @returns {Record|SpeakerInfoModel}\n     * @private\n     */\n    _updateStore = (payload, speakerInfo) => {\n        let updatedModel = speakerInfo;\n\n        if (_.has(payload, 'speakerMode')) {\n            updatedModel = updatedModel.set('speakerMode', payload.speakerMode);\n        }\n\n        if (_.has(payload, 'selectedSpeaker')) {\n            updatedModel = updatedModel.set('selectedSpeaker', fromJS(payload.selectedSpeaker));\n        }\n\n        if (_.has(payload, 'speakerList')) {\n            updatedModel = updatedModel.set('speakerList', fromJS(payload.speakerList));\n        }\n\n        return updatedModel;\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|SpeakerInfoModel} speakerInfo\n     * @returns {Record|SpeakerInfoModel}\n     * @private\n     */\n    _selectSpeaker = (payload, speakerInfo) => {\n        storeItem(STORAGE.SELECTED_SPEAKER, payload.sid);\n        return speakerInfo.set('selectedSpeaker', fromJS(payload));\n    };\n\n    /**\n     *\n     * @param {string|number} sid\n     * @param {Record|SpeakerInfoModel} speakerInfo\n     * @param {Record|AuthModel} auth\n     * @param {Record|DisplayDataModel} displayData\n     * @returns {Record|SpeakerInfoModel}\n     * @private\n     */\n    _selectSpeakerBySid = (sid, speakerInfo, auth, displayData) => {\n        const sessionData = auth.get('sessionData');\n        const displayLists = displayData.get('displayLists');\n\n        // find the speaker in both session data and display data\n        let perspeaker = {};\n\n        displayLists.get('perspeaker').map((per) => {\n            if (per.get('sid').toString() === sid.toString()) {\n                perspeaker = per.toJS();\n            }\n        });\n\n        let session_speaker = sessionData.get('permissions').get(sid.toString());\n        if (!_.isNull(session_speaker)) {\n            session_speaker = session_speaker.toJS();\n        } else {\n            session_speaker = {};\n        }\n\n        let selectedSpeaker = _.assign({}, session_speaker, perspeaker);\n\n        storeItem(STORAGE.SELECTED_SPEAKER, sid);\n\n        return speakerInfo.set('selectedSpeaker', fromJS(selectedSpeaker));\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|SpeakerInfoModel} speakerInfo\n     * @param {object} action\n     *\n     * @returns {Record|SpeakerInfoModel}\n     */\n    return (speakerInfo, action) => {\n        if (!speakerInfo) {\n            speakerInfo = _initialState();\n        }\n\n        const {payload, auth, displayData} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.SPEAKER_INFO_STORE_UPDATE:\n                return _updateStore(payload, speakerInfo);\n            case RADIOS.stores.SPEAKER_INFO_STORE_SELECT_SPEAKER:\n                return _selectSpeaker(payload, speakerInfo);\n            case RADIOS.stores.SPEAKER_INFO_STORE_SELECT_SPEAKER_BY_SID:\n                return _selectSpeakerBySid(payload, speakerInfo, auth, displayData);\n            case RADIOS.stores.SPEAKER_INFO_STORE_UPDATE_SHORT_PROFILE:\n                return _updateShortProfile(payload, speakerInfo);\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        return speakerInfo;\n    };\n}\n\nexport {\n    SpeakerInfoStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst Immutable = require('immutable');\nconst {fromJS} = Immutable;\n\n// Enums\nconst RADIOS = require('../enums/RADIOS').default;\n\n// Models\nconst ViewModel = require('./models/ViewModel').default;\n\n// Utils\nconst {log} = require('../util/DevTools').default;\n\n/**\n * Creates an ViewStore.  Handles all state changes to the view\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst ViewStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new ViewModel();\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearData;\n    let _clearDoSubmitForm;\n    let _setDoSubmitForm;\n    let _setUndo;\n    let _toggleDirty;\n    let _toggleKeyboardActive;\n    let _updateStore;\n\n    /**\n     *\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {Record|ViewModel} view\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    _clearDoSubmitForm = (view) => {\n        return view.set('doSubmitForm', false).set('doSubmitFormCallback', undefined);\n    };\n\n    /**\n     *\n     * @param {Record} payload\n     * @param {Record|ViewModel} view\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    _setDoSubmitForm = (payload, view) => {\n        return view.set('doSubmitForm', true).set('doSubmitFormCallback', payload.callback);\n    };\n\n    /**\n     *\n     * @param {Record} payload\n     * @param {Record|ViewModel} view\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    _setUndo = (payload, view) => {\n        const todoView = view.get('todoView');\n        if (_.has(todoView, [\"get\"])) {\n            const todoUndo = todoView.get('todoUndo');\n\n            let updatedTodoUndo = todoUndo.set(payload.get('id'), payload);\n\n            return view.set('todoView', todoView.set('todoUndo', updatedTodoUndo));\n        }\n        return view;\n    };\n\n    /**\n     *\n     * @param {bool} payload\n     * @param {Record|ViewModel} view\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    _toggleDirty = (payload, view) => {\n        return view.set('dirty', payload);\n    };\n\n    /**\n     *\n     * @param {bool} payload\n     * @param {Record|ViewModel} view\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    _toggleKeyboardActive = (payload, view) => {\n        return view.set('keyboardActive', payload);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|ViewModel} view\n     * @returns {Record|ViewModel}\n     * @private\n     */\n    _updateStore = (payload, view) => {\n        let updatedModel = view;\n\n        if (_.has(payload, 'dirty')) {\n            updatedModel = updatedModel.set('dirty', payload.dirty);\n        }\n\n        if (_.has(payload, 'actions')) {\n            updatedModel = updatedModel.set('actions', fromJS(payload.actions));\n        }\n\n        if(_.has(payload, 'headerText')) {\n            updatedModel = updatedModel.set('headerText', payload.headerText);\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|ViewModel} view\n     * @param {object} action\n     *\n     * @returns {Record|ViewModel}\n     */\n    return (view, action) => {\n        if (!view) {\n            view = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.VIEW_STORE_CLEAR_SUBMIT_FORM:\n                return _clearDoSubmitForm(view);\n            case RADIOS.stores.CLEAR_EVENT_DATA:\n                return _toggleDirty(false, view);\n            case RADIOS.stores.VIEW_STORE_DO_SUBMIT_FORM:\n                return _setDoSubmitForm(payload, view);\n            case RADIOS.stores.VIEW_STORE_UPDATE:\n                return _updateStore(payload, view);\n            case RADIOS.stores.VIEW_STORE_TODO_SET_UNDO:\n                return _setUndo(payload, view);\n            case RADIOS.stores.VIEW_STORE_TOGGLE_DIRTY:\n                return _toggleDirty(payload, view);\n            case RADIOS.stores.VIEW_STORE_TOGGLE_KEYBOARD_ACTIVE:\n                return _toggleKeyboardActive(payload, view);\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        return view;\n    };\n}\n\nexport {\n    ViewStoreFactory\n};","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// NPM\nconst {combineReducers} = require('redux');\nconst {responsiveStateReducer} = require('redux-responsive');\n\nimport {AuthStoreFactory} from \"./AuthStore\";\nimport {CalendarStoreFactory} from \"./CalendarStore\";\nimport {CompanyDataStoreFactory} from \"./CompanyDataStore\";\nimport {DashboardStoreFactory} from \"./DashboardStore\";\nimport {DialogStoreFactory} from \"./DialogStore\";\nimport {DisplayDataStoreFactory} from \"./DisplayDataStore\";\nimport {EventStoreFactory} from \"./EventStore\";\nimport {JobBoardStoreFactory} from \"./JobBoardStore\";\nimport {LoadingStoreFactory} from \"./LoadingStore\";\nimport {MessageStoreFactory} from \"./MessageStore\";\nimport {NavStoreFactory} from \"./NavStore\";\nimport {OverlayStoreFactory} from \"./OverlayStore\";\nimport {PushStoreFactory} from \"./PushStore\";\nimport {SearchStoreFactory} from \"./SearchStore\";\nimport {SpeakerInfoStoreFactory} from \"./SpeakerInfoStore\";\nimport {ViewStoreFactory} from \"./ViewStore\";\n// Reducers\n// const {\n//     // AuthStoreFactory,\n//     // CalendarStoreFactory,\n//     // CompanyDataStoreFactory,\n//     // DashboardStoreFactory,\n//     DialogStoreFactory,\n//     DisplayDataStoreFactory,\n//     EventStoreFactory,\n//     JobBoardStoreFactory,\n//     LoadingStoreFactory,\n//     MessageStoreFactory,\n//     NavStoreFactory,\n//     OverlayStoreFactory,\n//     PushStoreFactory,\n//     SearchStoreFactory,\n//     SpeakerInfoStoreFactory,\n//     ViewStoreFactory\n// } = require('./');\n\n/******************************************************************************\n *\n * Private Members\n *\n *****************************************************************************/\n\n/**************************************\n * Components\n *************************************/\n\nconst auth = AuthStoreFactory();\nconst browser = responsiveStateReducer;\nconst calendar = CalendarStoreFactory();\nconst companyData = CompanyDataStoreFactory();\nconst dashboard = DashboardStoreFactory();\nconst dialog = DialogStoreFactory();\nconst displayData = DisplayDataStoreFactory();\nconst event = EventStoreFactory();\nconst jobBoard = JobBoardStoreFactory();\nconst loading = LoadingStoreFactory();\nconst messages = MessageStoreFactory();\nconst nav = NavStoreFactory();\nconst overlay = OverlayStoreFactory();\nconst push = PushStoreFactory();\nconst search = SearchStoreFactory();\nconst speakerInfo = SpeakerInfoStoreFactory();\nconst view = ViewStoreFactory();\n\n/******************************************************************************\n *\n * Exports/Public Interface\n *\n *****************************************************************************/\n\nexport default combineReducers({\n    auth,\n    browser,\n    calendar,\n    companyData,\n    dashboard,\n    dialog,\n    displayData,\n    event,\n    jobBoard,\n    loading,\n    messages,\n    nav,\n    overlay,\n    push,\n    search,\n    speakerInfo,\n    view\n});","/**\n * Creates an CalendarStore.  Handles all state changes to the calendar\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst CalendarStoreFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const moment = require('moment');\n    const {fromJS} = require('immutable');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Models\n    const CalendarModel = require('./models/CalendarModel').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    const _initialState = () => {\n        return new CalendarModel({\n            selectedYear: moment().year(),\n            selectedMonth: moment().month() + 1\n        });\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _clearData;\n    let _mergeCalendarData;\n    let _nextMonth;\n    let _prevMonth;\n    let _selectDay;\n    let _updatePeriod;\n    let _updateStore;\n\n    /**\n     *\n     * @param {CalendarModel} auth\n     * @returns {CalendarModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|CalendarModel} calendar\n     * @returns {CalendarModel}\n     * @private\n     */\n    _mergeCalendarData = (payload, calendar) => {\n        const selectedMonth = calendar.get('selectedMonth');\n        const selectedYear = calendar.get('selectedYear');\n\n        const calendarData = calendar.get('calendarData');\n\n        return calendar.set('calendarData', calendarData.set(`${selectedYear}-${selectedMonth}`, fromJS(payload)));\n    };\n\n    /**\n     *\n     * @param {Record|CalendarModel} calendar\n     * @returns {CalendarModel}\n     * @private\n     */\n    _nextMonth = (calendar) => {\n        const selectedMonth = calendar.get('selectedMonth');\n        const selectedYear = calendar.get('selectedYear');\n\n        let newMonth = selectedMonth + 1;\n        let newYear = selectedYear;\n\n        if (newMonth > 12) {\n            newMonth = 1;\n            newYear += 1;\n        }\n\n        return calendar.set('selectedMonth', newMonth).set('selectedYear', newYear);\n    };\n\n    /**\n     *\n     * @param {Record|CalendarModel} calendar\n     * @returns {CalendarModel}\n     * @private\n     */\n    _prevMonth = (calendar) => {\n        const selectedMonth = calendar.get('selectedMonth');\n        const selectedYear = calendar.get('selectedYear');\n\n        let newMonth = selectedMonth - 1;\n        let newYear = selectedYear;\n\n        if (newMonth < 1) {\n            newMonth = 12;\n            newYear -= 1;\n        }\n\n        return calendar.set('selectedMonth', newMonth).set('selectedYear', newYear);\n    };\n\n    /**\n     *\n     * @param {number} payload\n     * @param {Record|CalendarModel} calendar\n     * @returns {Record|CalendarModel}\n     * @private\n     */\n    _selectDay = (payload, calendar) => {\n        return calendar.set('selectedDay', payload);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|CalendarModel} calendar\n     * @returns {Record|CalendarModel}\n     * @private\n     */\n    _updatePeriod = (payload, calendar) => {\n        return calendar\n            .set('selectedYear', payload.selectedYear)\n            .set('selectedMonth', payload.selectedMonth);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|CalendarModel} calendar\n     * @returns {Record|CalendarModel}\n     * @private\n     */\n    _updateStore = (payload, calendar) => {\n        let updatedModel = calendar;\n\n        if (_.has(payload, 'selectedYear')) {\n            updatedModel = updatedModel.set('selectedYear', payload.selectedYear);\n        }\n\n        if (_.has(payload, 'selectedMonth')) {\n            updatedModel = updatedModel.set('selectedMonth', payload.selectedMonth);\n        }\n\n        if (_.has(payload, 'selectorYear')) {\n            updatedModel = updatedModel.set('selectorYear', payload.selectorYear);\n        }\n\n        if (_.has(payload, 'calendarData')) {\n            updatedModel = updatedModel.set('calendarData', calendar.get('calendarData').merge(payload.calendarData));\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|CalendarModel} calendar\n     * @param {object} action\n     * @returns {Record|CalendarModel}\n     */\n    return (calendar, action) => {\n        if (!calendar) {\n            calendar = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.CALENDAR_STORE_UPDATE:\n                return _updateStore(payload, calendar);\n            case RADIOS.stores.CALENDAR_STORE_MERGE_CALENDAR_DATA:\n                return _mergeCalendarData(payload, calendar);\n            case RADIOS.stores.CALENDAR_STORE_NEXT_MONTH:\n                return _nextMonth(calendar);\n            case RADIOS.stores.CALENDAR_STORE_PREV_MONTH:\n                return _prevMonth(calendar);\n            case RADIOS.stores.CALENDAR_STORE_SELECT_DAY:\n                return _selectDay(payload, calendar);\n            case RADIOS.stores.CALENDAR_STORE_UPDATE_CALENDAR_PERIOD:\n                return _updatePeriod(payload, calendar);\n            case RADIOS.stores.CLEAR_SPEAKER_DATA:\n            case RADIOS.stores.REFRESH_DATA:\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        return calendar;\n    };\n}\n\nexport {\n    CalendarStoreFactory\n};","/**\n * Creates an DialogStore.  Handles all state changes to the dialog\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst DialogStoreFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const {fromJS} = require('immutable');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Models\n    const DialogModel = require('./models/DialogModel').default;\n    const DialogItemModel = require('./models/DialogItemModel').default;\n\n    // Utils\n    const {log} = require('../util/DevTools').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Variables\n    //---------------------------------\n\n    /**\n     *\n     * @returns {Record|DialogModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new DialogModel();\n    };\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _closeDialog;\n    let _updateStore;\n\n    /**\n     *\n     * @returns {Record|DialogModel}\n     * @private\n     */\n    _closeDialog = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|DialogModel} dialog\n     * @return {Record|DialogModel}\n     * @private\n     */\n    _updateStore = (payload, dialog) => {\n        let updatedModel = dialog;\n\n        if (_.has(payload, 'undoConfirmation')) {\n            updatedModel = updatedModel.set('undoConfirmation', new DialogItemModel(payload.undoConfirmation));\n        }\n\n        if (_.has(payload, 'exitDirtyConfirmation')) {\n            updatedModel = updatedModel.set('exitDirtyConfirmation', new DialogItemModel(payload.exitDirtyConfirmation));\n        }\n\n        if (_.has(payload, 'deleteConfirmation')) {\n            updatedModel = updatedModel.set('deleteConfirmation', new DialogItemModel(payload.deleteConfirmation));\n        }\n\n        if (_.has(payload, 'copyEventConfirmation')) {\n            updatedModel = updatedModel.set('copyEventConfirmation', new DialogItemModel(payload.copyEventConfirmation));\n        }\n\n        if (_.has(payload, 'showLegend')) {\n            updatedModel = updatedModel.set('showLegend', payload.showLegend);\n        }\n\n        if (_.has(payload, 'showSpeakerSelector')) {\n            updatedModel = updatedModel.set('showSpeakerSelector', new DialogItemModel(payload.showSpeakerSelector));\n        }\n\n        if (_.has(payload, 'confirmedEventsDialog')) {\n            updatedModel = updatedModel.set('confirmedEventsDialog', new DialogItemModel(payload.confirmedEventsDialog));\n        }\n\n        return updatedModel;\n    };\n\n    //=========================================================================\n    //\n    // Public Interface\n    //\n    //=========================================================================\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|DialogModel} dialog\n     * @param {object} action\n     * @returns {Record|DialogModel}\n     */\n    return (dialog, action) => {\n        if (!dialog) {\n            dialog = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.DIALOG_STORE_UPDATE:\n                return _updateStore(payload, dialog);\n            case RADIOS.stores.DIALOG_STORE_CLOSE_DIALOG:\n                return _closeDialog(payload, dialog);\n        }\n\n        return dialog;\n    };\n}\n\nexport {\n    DialogStoreFactory\n};","/**\n * Creates an JobBoardStore.  Handles all state changes to the dashboard\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst JobBoardStoreFactory = (spec = {}) => {\n    //=========================================================================\n    //\n    // Imports\n    //\n    //=========================================================================\n\n    // Node Modules\n    const _ = require('lodash');\n    const {fromJS} = require('immutable');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n\n    // Models\n    const JobBoardModel = require('./models/JobBoardModel').default;\n    const JobModel = require('./models/JobModel').default;\n\n    //=========================================================================\n    //\n    // Private Members\n    //\n    //=========================================================================\n\n    //---------------------------------\n    // Variables\n    //---------------------------------\n\n    const _initialState = () => {\n        return new JobBoardModel();\n    };\n\n    //---------------------------------\n    // Methods\n    //---------------------------------\n\n    let _clearData = undefined;\n    let _selectJob = undefined;\n    let _updateJobAgreement = undefined;\n    let _updateJobDetail = undefined;\n    let _updateJobMessages = undefined;\n    let _updateStore = undefined;\n\n    /**\n     * @returns {Record|JobBoardModel}\n     * @private\n     */\n    _clearData = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {object|Record|Map} payload\n     * @param {Record|JobBoardModel} jobBoard\n     * @returns {Record|JobBoardModel}\n     * @private\n     */\n    _selectJob = (payload, jobBoard) => {\n        return jobBoard.set('selectedJob', JobModel({\n            jobSummary: payload\n        }));\n    };\n\n    _updateJobAgreement = (payload, jobBoard) => {\n        if (jobBoard.selectedJob) {\n            return jobBoard.set('selectedJob', jobBoard.selectedJob.set('agreement'), fromJS(payload));\n        }\n        return jobBoard;\n    };\n\n    _updateJobDetail = (payload, jobBoard) => {\n        if (jobBoard.selectedJob) {\n            return jobBoard.set('selectedJob', jobBoard.selectedJob.set('jobDetail', fromJS(payload)));\n        }\n        return jobBoard;\n    };\n\n    _updateJobMessages = (payload, jobBoard) => {\n        let updateModel = jobBoard;\n\n        if (jobBoard.selectedJob) {\n            updateModel = updateModel.set('selectedJob', jobBoard.selectedJob.set('messages', fromJS(payload.messages)));\n        }\n\n        let updateObj = {};\n        updateObj[payload.sid] = {};\n        updateObj[payload.sid][payload.event_id] = {\n            n_unread: 0\n        };\n\n        // set our messages to be read\n        updateModel = updateModel.set('per_sid', updateModel.per_sid.mergeDeep(updateObj));\n\n        return updateModel;\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|JobBoardModel} jobBoard\n     * @returns {Record|JobBoardModel}\n     * @private\n     */\n    _updateStore = (payload, jobBoard) => {\n        let updatedModel = jobBoard;\n\n        if (_.has(payload, 'sids_connected_to_stripe')) {\n            updatedModel = updatedModel.set('sids_connected_to_stripe', fromJS(payload.sids_connected_to_stripe));\n        }\n\n        if (_.has(payload, 'per_sid')) {\n            updatedModel = updatedModel.set('per_sid', fromJS(payload.per_sid));\n        }\n\n        if (_.has(payload, 'jobs')) {\n            updatedModel = updatedModel.set('jobs', fromJS(payload.jobs));\n        }\n\n        if (_.has(payload, 'lastUpdated')) {\n            updatedModel = updatedModel.set('lastUpdated', payload.lastUpdated);\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|JobBoardModel} jobboard\n     * @param {object} action\n     * @return {Record|JobBoardModel}\n     */\n    return (jobBoard, action) => {\n        if (!jobBoard) {\n            jobBoard = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.JOB_BOARD_STORE_UPDATE:\n                return _updateStore(payload, jobBoard);\n            case RADIOS.stores.JOB_BOARD_SELECT_JOB:\n                return _selectJob(payload, jobBoard);\n            case RADIOS.stores.JOB_BOARD_UPDATE_AGREEMENT:\n                return _updateJobAgreement(payload, jobBoard);\n            case RADIOS.stores.JOB_BOARD_UPDATE_JOB_DETAIL:\n                return _updateJobDetail(payload, jobBoard);\n            case RADIOS.stores.JOB_BOARD_UPDATE_JOB_MESSAGES:\n                return _updateJobMessages(payload, jobBoard);\n            case RADIOS.stores.CLEAR_EVENT_ASSOCIATED_DATA:\n            case RADIOS.stores.CLEAR_SPEAKER_DATA:\n            case RADIOS.stores.REFRESH_DATA:\n            case RADIOS.stores.LOGOUT:\n                return _clearData();\n        }\n\n        return jobBoard;\n    };\n}\n\nexport {\n    JobBoardStoreFactory\n};","/**\n * Creates an NavStore.  Handles all state changes to the nav\n * area of the state\n *\n * @param spec\n * @returns {object}\n * @constructor\n */\nconst NavStoreFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const { List } = require('immutable');\n\n    // Enums\n    const RADIOS = require('../enums/RADIOS').default;\n    const VIEWS = require('../enums/VIEWS').default;\n\n    // Models\n    const NavModel = require('./models/NavModel').default;\n\n    // Utils\n    const {isSolutionTree} = require('../util/Platform').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Variables\n     *********************************/\n\n    /**\n     *\n     * @returns {Record|NavModel}\n     * @private\n     */\n    const _initialState = () => {\n        return new NavModel({\n            mainView: VIEWS.mainViews.CALENDAR_VIEW\n        });\n    };\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _addSubView;\n    let _changeEventView;\n    let _changeMainView;\n    let _clearSubView;\n    let _navigateToEvent;\n    let _nextEventView;\n    let _popSubView;\n    let _prevEventView;\n    let _reset;\n    let _setSubView;\n    let _toggleDrawer;\n    let _updateStore;\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|NavModel} nav\n     * @returns {Record|NavModel}\n     * @private\n     * @see Record\n     * @see NavModel\n     */\n    _addSubView = (payload, nav) => {\n        return nav.set('subView', nav.get('subView').push(payload));\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|NavModel} nav\n     * @returns {Record|NavModel}\n     * @private\n     * @see Record\n     * @see NavModel\n     */\n    _changeEventView = (payload, nav) => {\n        return nav.set('eventView', payload);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @returns {Record|NavModel}\n     * @private\n     * @see Record\n     * @see NavModel\n     */\n    _changeMainView = (payload) => {\n        // We want to clear any event or sub view when you select a new main view\n        return _initialState().set('mainView', payload);\n    };\n\n    /**\n     *\n     * @param {Record|NavModel} nav\n     * @returns {Record|NavModel}\n     * @private\n     * @see Record\n     * @see NavModel\n     */\n    _clearSubView = (nav) => {\n        return nav.set('subView', nav.get('subView').clear());\n    };\n\n    /**\n     *\n     * @param {object|NavModel|Record} payload\n     * @param {Record|NavModel} nav\n     * @returns {Record|NavModel}\n     * @private\n     * @see Record\n     * @see NavModel\n     */\n    _setSubView = (payload, nav) => {\n        return nav.set('subView', List(payload));\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {NavItemModel|Record} payload.view\n     * @param {function|null} payload.onReturn\n     * @param {NavModel|Record} nav\n     * @returns {NavModel|Record}\n     * @private\n     */\n    _navigateToEvent = (payload, nav) => {\n        let {\n            view,\n            onReturn\n        } = payload;\n\n        // When you save an event we navigate to it again, so this gets overridden so the event view is the previous view\n        if (!onReturn && !nav.get('eventView') && nav.get('mainView') !== VIEWS.mainViews.NEW_EVENT_VIEW) {\n            onReturn = () => {\n                return {\n                    type: RADIOS.stores.NAV_STORE_UPDATE,\n                    payload: {\n                        mainView: nav.get('mainView'),\n                        subView: nav.get('subView'),\n                        eventView: nav.get('eventView')\n                    }\n                };\n            };\n        } else {\n            onReturn = nav.get('onReturn');\n        }\n\n        return nav.set('mainView', null).set('subView', List()).set('eventView', view).set('onReturn', onReturn);\n    };\n\n    /**\n     *\n     * @param {NavModel|Record} nav\n     * @returns {NavModel|Record}\n     * @private\n     */\n    _nextEventView = (nav) => {\n        const currentEventView = nav.get('eventView');\n        let nextEventView = null;\n        let eventViews = VIEWS.eventViews;\n\n        if (isSolutionTree()) {\n            eventViews = VIEWS.getSolutionTreeEventViews();\n        }\n\n        _.map(eventViews, (view) => {\n            if(view.get('order') - currentEventView.get('order') === 1) {\n                nextEventView = view;\n            } else if (currentEventView.get('order') === _.keys(eventViews).length && view.get('order') === 1) {\n                nextEventView = view;\n            }\n\n            return view;\n        });\n\n        if(nextEventView) {\n            return nav.set('eventView', nextEventView);\n        }\n\n        return nav;\n    };\n\n    /**\n     *\n     * @param {NavModel|Record} nav\n     * @returns {NavModel|Record}\n     * @private\n     */\n    _popSubView = (nav) => {\n        return nav.set('subView', nav.get('subView').pop());\n    };\n\n    /**\n     *\n     * @param {NavModel|Record} nav\n     * @returns {NavModel|Record}\n     * @private\n     */\n    _prevEventView = (nav) => {\n        const currentEventView = nav.get('eventView');\n        let prevEventView = null;\n        let eventViews = VIEWS.eventViews;\n\n        if (isSolutionTree()) {\n            eventViews = VIEWS.getSolutionTreeEventViews();\n        }\n\n        _.map(eventViews, (view) => {\n            if(view.get('order') - currentEventView.get('order') === -1) {\n                prevEventView = view;\n            } else if (currentEventView.get('order') === 1 && view.get('order') === _.keys(eventViews).length) {\n                prevEventView = view;\n            }\n\n            return view;\n        });\n\n        if(prevEventView) {\n            return nav.set('eventView', prevEventView);\n        }\n\n        return nav;\n    };\n\n    /**\n     *\n     * @returns {Record|NavModel}\n     * @private\n     * @see Record\n     * @see NavModel\n     */\n    _reset = () => {\n        return _initialState();\n    };\n\n    /**\n     *\n     * @param {bool} payload\n     * @param {Record|NavModel} nav\n     * @returns {Record|NavModel}\n     * @private\n     */\n    _toggleDrawer = (payload, nav) => {\n        return nav.set('showDrawer', payload);\n    };\n\n    /**\n     *\n     * @param {object} payload\n     * @param {Record|NavModel} nav\n     * @returns {Record|NavModel}\n     * @private\n     * @see Record\n     * @see NavModel\n     */\n    _updateStore = (payload, nav) => {\n        let updatedModel = nav;\n\n        if (_.has(payload, 'mainView')) {\n            updatedModel = updatedModel.set('mainView', payload.mainView);\n        }\n\n        if (_.has(payload, 'eventView')) {\n            updatedModel = updatedModel.set('eventView', payload.eventView);\n        }\n\n        if (_.has(payload, 'subView')) {\n            updatedModel = updatedModel.set('subView', payload.subView);\n        }\n\n        if (_.has(payload, 'changeStamp')) {\n            updatedModel = updatedModel.set('changeStamp', payload.changeStamp);\n        }\n\n        return updatedModel;\n    };\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    /**\n     * Handles all store based radio calls and determines an action to take\n     * if any.\n     *\n     * @param {null|Record|NavModel} nav\n     * @param {object} action\n     *\n     * @returns {Record|NavModel}\n     */\n    return (nav, action) => {\n        if (!nav) {\n            nav = _initialState();\n        }\n\n        const {payload} = action;\n\n        switch (action.type) {\n            case RADIOS.stores.NAV_STORE_UPDATE:\n                return _updateStore(payload, nav);\n            case RADIOS.stores.NAV_CHANGE_EVENT_VIEW:\n                return _changeEventView(payload, nav);\n            case RADIOS.stores.NAV_CHANGE_MAIN_VIEW:\n                return _changeMainView(payload, nav);\n            case RADIOS.stores.NAV_SET_SUB_VIEW:\n                return _setSubView(payload, nav);\n            case RADIOS.stores.NAV_CLEAR_SUB_VIEW:\n                return _clearSubView(nav);\n            case RADIOS.stores.NAV_ADD_SUB_VIEW:\n                return _addSubView(payload, nav);\n            case RADIOS.stores.NAV_POP_SUB_VIEW:\n                return _popSubView(nav);\n            case RADIOS.stores.NAV_NEXT_EVENT_VIEW:\n                return _nextEventView(nav);\n            case RADIOS.stores.NAV_PREV_EVENT_VIEW:\n                return _prevEventView(nav);\n            case RADIOS.stores.NAV_TOGGLE_DRAWER:\n                return _toggleDrawer(payload, nav);\n            case RADIOS.stores.EVENT_STORE_SELECT_EVENT:\n                return _navigateToEvent(payload, nav);\n            case RADIOS.stores.CLEAR_EVENT_DATA:\n            case RADIOS.stores.NAV_STORE_RESET:\n            case RADIOS.stores.LOGOUT:\n                return _reset();\n        }\n\n        return nav;\n    };\n}\n\nexport {\n    NavStoreFactory\n};","/**\n * Generates a MUICheckbox component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst MUICheckboxFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     **************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const Checkbox = require('material-ui/Checkbox').default;\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {log} = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _onChange;\n\n    /**\n     * Handles checkbox onChange event.  Triggers Form onChange.\n     *\n     * @param {bool} isChecked\n     * @param {object} inst\n     * @private\n     */\n    _onChange = (isChecked, inst) => {\n        const {onChange} = inst.props;\n\n        if (_.isFunction(onChange)) {\n            onChange(isChecked);\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onChange: PropTypes.func.isRequired,\n            field: PropTypes.object.isRequired,\n            value: PropTypes.bool\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used for debug messaging\n         */\n        displayName: 'MUICheckbox',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getValue() {\n            // TODO: this won't work\n            const {field} = this.props;\n\n            return this.refs[`mui-check-${field.name}`].checked;\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            let {field, value} = this.props;\n\n            return <Checkbox label={field.label}\n                             checked={value || false}\n                             labelPosition=\"left\"\n                             style={{\n                                 marginTop: '20px',\n                                 marginBottom: '20px',\n                                 paddingLeft: (field.noIcon ? 0 : '48px')\n                             }}\n                             labelStyle={{\n                                 width: `calc(100% - 46px - ${field.noIcon ? '0px' : '48px'})`\n                             }}\n                             onCheck={(event, isChecked) => {\n                                 _onChange(isChecked, this);\n                             }}\n                             {..._.pick(field, 'disabled')}/>;\n        }\n    });\n}\n\nconst component = MUICheckboxFactory({});\n\nexport default {\n    component,\n    MUICheckboxFactory\n}","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst React = require('react');\nconst createClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst moment = require('moment');\n\n// components\nconst DatePicker = require('material-ui/DatePicker').default;\n\nconst {MUIIconInputFactory} = require('./MUIIconInput').default;\n\nconst DateToolsFactory = require('../../util/DateTools').default;\n\nconst {\n    AutoShouldUpdateMixinFactory\n} = require('../../mixins');\n\n/**\n * Generates a MUIDate component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst MUIDateFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const DateTools = DateToolsFactory({});\n    const MUIIconInput = MUIIconInputFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _dateFormatter;\n    let _onChange;\n\n    /**\n     *\n     * @param val\n     * @returns {string}\n     * @private\n     */\n    _dateFormatter = (val) => {\n        return moment(val).format(DateTools.masks.DATE_STRING);\n    };\n\n    /**\n     * Handles Text onChange event.  Dispatches the Form's onChange.\n     *\n     * @param {event} e\n     * @private\n     */\n    _onChange = (val, inst) => {\n        const {onChange} = inst.props;\n\n        onChange(val);\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onChange: PropTypes.func.isRequired,\n            field: PropTypes.object.isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.object\n            ])\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIDate',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            let {field, value} = this.props;\n\n            if (_.isString(value)) {\n                value = moment(value, DateTools.masks.DATE_STRING).toDate();\n            }\n\n            return (\n                <MUIIconInput\n                    field={field}>\n                    <DatePicker mode=\"portrait\"\n                                firstDayOfWeek={0}\n                                ref={field.name}\n                                id={field.name}\n                                name={field.name}\n                                value={value}\n                                formatDate={_dateFormatter}\n                                autoOk={false}\n                                floatingLabelText={field.placeholder || field.label}\n                                errorText={field.error}\n                                fullWidth={field.fullWidth || true}\n                                onChange={(nil, val) => {\n                                    _onChange(val, this);\n                                }}\n                                dialogContainerStyle={{\n                                    marginTop: '-36px'\n                                }}\n                                className='mui-date-picker'\n                                {..._.pick(field, ['disabled', 'minDate', 'maxDate'])}/>\n                </MUIIconInput>\n            );\n        }\n    });\n}\n\nconst component = MUIDateFactory({});\n\nexport default {\n    component,\n    MUIDateFactory\n }","/**\n * Generates a MUIText component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst MUITextFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // components\n    const TextField = require('material-ui/TextField').default;\n\n    const {MUIIconInputFactory} = require('./MUIIconInput').default;\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const MUIIconInput = MUIIconInputFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _onChange;\n\n    /**\n     * Handles Text onChange event.  Dispatches the Form's onChange.\n     *\n     * @param {event} e\n     * @private\n     */\n    _onChange = (val, inst) => {\n        const {onChange} = inst.props;\n\n        onChange(val);\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            field: PropTypes.object.isRequired,\n            value: PropTypes.string\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIText',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Invoked once before the component is mounted. The return value\n         * will be used as the initial value of this.state.\n         *\n         * @returns {object}\n         */\n        getInitialState() {\n            return {\n                hasFocus: undefined\n            };\n        },\n\n        /**\n         * Invoked when a component is receiving new props. This method\n         * is not called for the initial render.\n         *\n         * @param {object} nextProps\n         */\n        componentWillReceiveProps(nextProps) {\n            const currentField = this.props.field;\n            const nextField = nextProps.field;\n            let {hasFocus} = this.state;\n\n            hasFocus = undefined;\n\n            if (currentField.autoFocus !== nextField.autoFocus\n                || (!currentField.focusStamp && nextField.focusStamp)\n                || (currentField.focusStamp && !currentField.focusStamp.isSame(nextField.focusStamp))) {\n                hasFocus = nextField.autoFocus;\n            }\n\n            this.setState({\n                hasFocus\n            });\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {field, value} = this.props;\n            const {hasFocus} = this.state;\n\n            let p = _.assign({}, {\n                type: field.type || 'text',\n                onChange: (e, val) => {\n                    _onChange(val, this);\n                }\n            });\n\n            if (field.error) {\n                p['errorText'] = field.error;\n            }\n\n            p['floatingLabelText'] = field.label;\n\n            let ref = (input) => {\n                if(!input)\n                    return;\n\n                if (hasFocus === true) {\n                    input.focus();\n                } else if (hasFocus === false) {\n                    input.blur();\n                }\n            };\n\n            const helperTextStyle = {\n                fontSize: 'smaller',\n                color: 'grey'\n            };\n\n            return (\n                <MUIIconInput field={field}>\n                    <div>\n                        <TextField {...p}\n                                   ref={ref}\n                                   id={field.name}\n                                   name={field.name}\n                                   value={value || ''}\n                                   fullWidth={field.fullWidth || true}\n                                   multiLine={field.type === 'textarea'}\n                                   {..._.pick(field, ['disabled', 'placeholder', 'hintText'])}\n                                   {...field.overrides}/>\n                        {!_.isEmpty(field.helperText) ? <div style={helperTextStyle}>{field.helperText}</div> : null}\n                    </div>\n                </MUIIconInput>\n            );\n        }\n    });\n}\n\nconst component = MUITextFactory({});\n\nexport default {\n    component,\n    MUITextFactory\n}","/**\n * Generates a MUIRadioGroup component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst MUIRadioGroupFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // components\n    const {RadioButton, RadioButtonGroup} = require('material-ui/RadioButton');\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _onChange;\n    let _showDescription;\n\n    /**\n     * Handles RadioGroup onChange event.  Dispatches the Form's onChange.\n     *\n     * @param {string} val\n     * @param {object} inst\n     * @private\n     */\n    _onChange = (val, inst) => {\n        const {onChange} = inst.props;\n\n        onChange(val);\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {null|XML}\n     * @private\n     */\n    _showDescription = (inst) => {\n        const {field, value} = inst.props;\n\n        let selected;\n\n        _.map(field.options, (option) => {\n            if (!selected && value === option.value) {\n                selected = option;\n            }\n\n            return option;\n        });\n\n        if (selected && selected.description) {\n            return <div style={{paddingTop: '10px'}}>{selected.description}</div>;\n        }\n\n        return null;\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            field: PropTypes.object.isRequired,\n            value: PropTypes.string\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIRadioGroup',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {field, value} = this.props;\n\n            return (\n                <div>\n                    <RadioButtonGroup\n                        name={field.name}\n                        valueSelected={value}\n                        onChange={(event, value) => {\n                            _onChange(value, this);\n                        }}>\n\n                        {_.map(field.options, (option, i) => {\n                            return <RadioButton\n                                key={`radio-btn-${i}`}\n                                style={{paddingTop: '5px', paddingBottom: '5px'}}\n                                label={option.label}\n                                value={option.value}/>;\n                        })}\n\n                    </RadioButtonGroup>\n\n                    {_showDescription(this)}\n                </div>\n            );\n        }\n    });\n}\n\nconst component = MUIRadioGroupFactory({});\n\nexport default {\n    component,\n    MUIRadioGroupFactory\n }","/**\n * Generates a MUISelect component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst MUISelectFactory = (spec) => {\n\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // components\n    const SelectField = require('material-ui/SelectField').default;\n    const MenuItem = require('material-ui/MenuItem').default;\n\n    const {MUIIconInputFactory} = require('./MUIIconInput').default;\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {log} = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const MUIIconInput = MUIIconInputFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _selectHandler;\n\n    /**\n     * Handles component's onSelect/onChange.  Triggers FormsMixin onChange\n     *\n     * @param {string} value\n     * @param {object} rInst\n     * @private\n     */\n    _selectHandler = (value, rInst) => {\n        const {onChange} = rInst.props;\n\n        onChange((value === false ? '' : value));\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onChange: PropTypes.func.isRequired,\n            field: PropTypes.object.isRequired,\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUISelect',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTMl\n         *\n         * @returns {*}\n         */\n        render() {\n            const {field, value} = this.props;\n\n            const allowClear = _.has(field, 'allowClear') ? field.allowClear : true;\n            const options = field.options;\n\n            if (allowClear && _.isArray(options)) {\n                options.unshift(\n                    {\n                        text: getText('-- Clear Selection --'),\n                        value: false\n                    }\n                );\n            }\n\n            return (\n                <MUIIconInput field={field}>\n                    <SelectField\n                        floatingLabelText={field.placeholder || field.label}\n                        value={value}\n                        fullWidth={field.fullWidth || true}\n                        onChange={(event, index, value) => {\n                            _selectHandler(value, this);\n                        }}\n                        {..._.pick(field, ['disabled'])}>\n\n                        {_.map(field.options, (option, i) => {\n                            return <MenuItem\n                                key={`${option.value}-${i}`}\n                                value={option.value}\n                                primaryText={option.text}/>;\n                        })}\n                    </SelectField>\n                </MUIIconInput>\n            );\n        }\n    });\n}\n\nconst component = MUISelectFactory({});\n\nexport default {\n    component,\n    MUISelectFactory\n }","/**\n * Generates a MUITime component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst MUITimeFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // components\n    const TimePicker = require('material-ui/TimePicker').default;\n\n    const {MUIIconInputFactory} = require('./MUIIconInput').default;\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    const MUIIconInput = MUIIconInputFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _dateFormatter;\n    let _onChange;\n\n    /**\n     *\n     * @param val\n     * @returns {string}\n     * @private\n     */\n    _dateFormatter = (val) => {\n        // return moment(val).format(DateTools.masks.TIME_STRING);\n    };\n\n    /**\n     * Handles Text onChange event.  Dispatches the Form's onChange.\n     *\n     * @param {event} e\n     * @private\n     */\n    _onChange = (val, inst) => {\n        const {onChange} = inst.props;\n\n        onChange(val);\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onChange: PropTypes.func.isRequired,\n            field: PropTypes.object.isRequired,\n            value: PropTypes.object\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUITime',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {field, value} = this.props;\n\n            return (\n                <MUIIconInput field={field}>\n                    <TimePicker mode=\"portrait\"\n                                ref={field.name}\n                                id={field.name}\n                                name={field.name}\n                                value={value}\n                                autoOk={false}\n                                floatingLabelText={field.placeholder || field.label}\n                                errorText={field.error}\n                                fullWidth={field.fullWidth || true}\n                                onChange={(nil, val) => {\n                                    _onChange(val, this);\n                                }}\n                                dialogBodyStyle={{\n                                    minHeight: '400px',\n                                    maxHeight: 'inherit'\n                                }}\n                                dialogStyle={{\n                                    paddingTop: 0,\n                                    marginTop: '-48px'\n                                }}\n                                dialogContainerStyle={{\n                                    marginTop: '-36px'\n                                }}\n                                {..._.pick(field, ['disabled'])}/>\n                </MUIIconInput>\n            );\n        }\n    });\n}\n\nconst component = MUITimeFactory({});\n\nexport default {\n    component,\n    MUITimeFactory\n}","/**\n * Generates a MUIToggle component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst MUIToggleFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     **************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const Toggle = require('material-ui/Toggle').default;\n\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {log} = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Factories\n     *********************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _onChange;\n\n    /**\n     * Handles checkbox onChange event.  Triggers Form onChange.\n     *\n     * @param {bool} isToggled\n     * @param {object} inst\n     * @private\n     */\n    _onChange = (isToggled, inst) => {\n        const {onChange} = inst.props;\n\n        if (_.isFunction(onChange)) {\n            onChange(isToggled);\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onChange: PropTypes.func.isRequired,\n            field: PropTypes.object.isRequired,\n            value: PropTypes.bool\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used for debug messaging\n         */\n        displayName: 'MUIToggle',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getValue() {\n            // TODO: this won't work\n            const {field} = this.props;\n\n            return this.refs[`mui-toggle-${field.name}`].checked;\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            let {field, value} = this.props;\n\n            return <Toggle label={field.label}\n                           toggled={value || false}\n                           style={{\n                               marginTop: '20px',\n                               marginBottom: '20px',\n                               paddingLeft: (field.noIcon ? 0 : '48px')\n                           }}\n                           labelStyle={{\n                             width: `calc(100% - 46px - ${field.noIcon ? '0px' : '48px'})`\n                           }}\n                           onToggle={(event, isToggled) => {\n                               _onChange(isToggled, this);\n                           }}\n                           {..._.pick(field, 'disabled')}/>;\n        }\n    });\n}\n\nconst component = MUIToggleFactory({});\n\nexport default {\n    component,\n    MUIToggleFactory\n }","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// Node Modules\nconst _ = require('lodash');\nconst React = require('react');\nconst createClass = require('create-react-class');\nconst PropTypes = require('prop-types');\n\n// components\nconst AutoComplete = require('material-ui/AutoComplete').default;\n\nconst {\n    AutoShouldUpdateMixinFactory\n} = require('../../mixins');\n\n/**\n * Generates a MUIAutoComplete component\n *\n * @param {object} spec - Container for named parameters\n * @returns {*} - React Component\n * @constructor\n */\nconst MUIAutoCompleteFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _onChange;\n\n    /**\n     * Handles Text onChange event.  Dispatches the Form's onChange.\n     *\n     * @param {object|string} selectedItem - Drop down item selected or string entered\n     * @param {number} index - Index of selectedItem or -1 if text was entered\n     * @param {object} inst\n     * @private\n     */\n    _onChange = (selectedItem, index, inst) => {\n        const {onChange} = inst.props;\n\n        if (index !== -1) {\n            onChange(selectedItem.value);\n        }\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            onChange: PropTypes.func.isRequired,\n            field: PropTypes.object.isRequired,\n            value: PropTypes.string\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIAutoComplete',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {field, value} = this.props;\n\n            let searchText = '';\n\n            _.map(field.options, (opt, i) => {\n                if (opt.value.toString() === value.toString()) {\n                    searchText = opt.text;\n                }\n            });\n\n            return <AutoComplete\n                ref={field.name}\n                id={field.name}\n                name={field.name}\n                anchorOrigin={{vertical: 'top', horizontal: 'left',}}\n                targetOrigin={{vertical: 'bottom', horizontal: 'left',}}\n                hintText={field.hintText || 'Type to filter'}\n                disabled={field.read_only || field.disabled}\n                errorText={field.error}\n                openOnFocus={field.openOnFocus || true}\n                floatingLabelText={field.placeholder || field.label}\n                maxSearchResults={10}\n                dataSource={field.options}\n                searchText={searchText}\n                fullWidth={field.fullWidth || true}\n                onNewRequest={(selectedItem, index) => {\n                    _onChange(selectedItem, index, this);\n                }}/>;\n\n        }\n    });\n}\n\nconst component = MUIAutoCompleteFactory({});\n\nexport default {\n    component,\n    MUIAutoCompleteFactory\n}","const MUIFilteredSelectFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n\n    // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Material UI\n    const TextField = require('material-ui/TextField').default;\n    const Dialog = require('material-ui/Dialog').default;\n    const FlatButton = require('material-ui/FlatButton').default;\n    const {List, ListItem} = require('material-ui/List');\n    const Divider = require('material-ui/Divider').default;\n\n    const {MUIIconInputFactory} = require('./MUIIconInput').default;\n\n    // Mixins\n    const {AutoShouldUpdateMixinFactory} = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const MUIIconInput = MUIIconInputFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _buildFilteredOptions;\n    let _closeHandler;\n    let _filterChangeHandler;\n    let _getValueFromOptions;\n    let _selectHandler;\n    let _showDialog;\n\n    /**\n     *\n     * @param inst\n     * @returns {Array}\n     * @private\n     */\n    _buildFilteredOptions = (inst) => {\n        const {dialogShown, filterTerm, storedOptions} = inst.state;\n        let count = 0;\n        let found = false;\n\n        if (!dialogShown)\n            return [];\n\n        return _.filter(storedOptions, (opts) => {\n            found = false;\n\n            // Only return the first 20 results\n            if (count >= 20)\n                return found;\n\n            found = ((!filterTerm || !filterTerm.length)\n            || opts.text.toString().indexOf(filterTerm) !== -1\n            || opts.value.toString().indexOf(filterTerm) !== -1);\n\n            if (found) {\n                count += 1;\n            }\n\n            return found;\n        });\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _closeHandler = (inst) => {\n        inst.setState({\n            dialogShown: false\n        });\n    };\n\n    /**\n     *\n     * @param val\n     * @param inst\n     * @private\n     */\n    _filterChangeHandler = (val, inst) => {\n        inst.setState({\n            filterTerm: val\n        });\n    };\n\n    /**\n     *\n     * @param inst\n     * @returns {*}\n     * @private\n     */\n    _getValueFromOptions = (inst) => {\n        const {value} = inst.props;\n        const {storedOptions} = inst.state;\n        let retVal = '';\n\n        _.map(storedOptions, (opt) => {\n\n            if (opt.value.toString() === value.toString()) {\n                retVal = opt.text;\n            }\n\n            return opt;\n        });\n\n        return retVal;\n    };\n\n    /**\n     *\n     * @param opt\n     * @param inst\n     * @private\n     */\n    _selectHandler = (opt, inst) => {\n        const {onChange} = inst.props;\n\n        onChange(opt.value);\n\n        inst.setState({\n            dialogShown: false\n        });\n    };\n\n    /**\n     *\n     * @param inst\n     * @private\n     */\n    _showDialog = (inst) => {\n        inst.setState({\n            dialogShown: true\n        });\n    };\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            field: PropTypes.shape({\n                options: PropTypes.array,\n                label: PropTypes.string,\n                optionMap: PropTypes.object.isRequired,\n                optionBuilder: PropTypes.func\n            }).isRequired,\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            onChange: PropTypes.func.isRequired\n        },\n        compareState: true\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messaging\n         */\n        displayName: 'MUIFilteredSelect',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        getInitialState() {\n            return {\n                dialogShown: false,\n                filterTerm: '',\n                storedOptions: []\n            };\n        },\n\n        componentDidUpdate() {\n            const {field} = this.props;\n\n            let {options, optionBuilder} = field;\n            const {dialogShown, storedOptions} = this.state;\n\n            if (!dialogShown)\n                return;\n\n            if (!storedOptions || !storedOptions.length) {\n                this.setState({\n                    storedOptions: options || optionBuilder() || []\n                });\n            }\n        },\n\n        /**\n         * Generates the virtual DOM/HTML\n         *\n         * @returns {*}\n         */\n        render() {\n            const {field, value} = this.props;\n            const {dialogShown} = this.state;\n            const {optionMap} = field;\n\n            const filteredOptions = _buildFilteredOptions(this);\n\n            return (\n                <div>\n                    <MUIIconInput field={field}>\n                        <TextField\n                            id={`${field.name}-filter-display`}\n                            name={`${field.name}-filter-display`}\n                            ref={`${field.name}-filter-display`}\n                            value={optionMap.get(_.toString(value)) || ''}\n                            floatingLabelText={field.label}\n                            fullWidth={true}\n                            onFocus={() => {\n                                if (!dialogShown)\n                                    _showDialog(this);\n                            }}\n                            {..._.pick(field, ['disabled'])}/>\n                    </MUIIconInput>\n\n                    <Dialog\n                        title={[<TextField\n                            key={`${field.name}-filter-input`}\n                            id={`${field.name}-filter-input`}\n                            ref={`${field.name}-filter-input`}\n                            name={`${field.name}-filter-input`}\n                            floatingLabelText={field.label}\n                            fullWidth={true}\n                            floatingLabelFixed={true}\n                            multiLine={false}\n                            style={{\n                                paddingLeft: '15px',\n                                width: '85%'\n                            }}\n                            autoFocus={dialogShown}\n                            hintText={_getValueFromOptions(this)}\n                            onChange={(e, val) => {\n                                _filterChangeHandler(val, this);\n                            }}/>]}\n                        onRequestClose={() => {\n                            _closeHandler(this);\n                        }}\n                        autoScrollBodyContent={true}\n                        open={dialogShown}\n                        contentStyle={{\n                            width: '85%'\n                        }}>\n\n                        <List>\n                            {_.map(filteredOptions, (opt, i) => {\n                                return (\n                                    <div key={`${field.name}-filtered-option-${i}`}>\n                                        <ListItem\n                                            primaryText={opt.text}\n                                            onClick={(e) => {\n                                                stopProp(e);\n\n                                                _selectHandler(opt, this);\n                                            }}/>\n                                    </div>\n                                );\n                            })}\n\n                            {!filteredOptions.length ? <ListItem\n                                primaryText=\"No Matching Bureaus\"\n                                style={{\n                                    color: 'rgb(0, 0, 0, 0.75)'\n                                }}\n                            /> : null}\n                        </List>\n\n                    </Dialog>\n                </div>\n            );\n        }\n    });\n}\n\nconst component = MUIFilteredSelectFactory({});\n\nexport default {\n    component,\n    MUIFilteredSelectFactory\n }","import checkbox from \"./inputs/MUICheckbox\";\nimport date from \"./inputs/MUIDate\";\nimport hidden from \"./inputs/MUIText\";\nimport number from \"./inputs/MUIText\";\nimport radioGroup from \"./inputs/MUIRadioGroup\";\nimport select from \"./inputs/MUISelect\";\nimport label from \"./inputs/MUIStatic\";\nimport text from \"./inputs/MUIText\";\nimport textarea from \"./inputs/MUIText\";\nimport time from \"./inputs/MUITime\";\nimport toggle from \"./inputs/MUIToggle\";\nimport autocomplete from \"./inputs/MUIAutoComplete\";\nimport filteredSelect from \"./inputs/MUIFilteredSelect\";\n\nconst types = {\n  \"checkbox\": checkbox,\n  \"date\": date,\n  \"hidden\": hidden,\n  \"number\": number,\n  \"radioGroup\": radioGroup,\n  \"select\": select,\n  \"label\": label,\n  \"text\": text,\n  \"textarea\": textarea,\n  \"time\": time,\n  \"toggle\": toggle,\n  \"autocomplete\": autocomplete,\n  \"filteredSelect\": filteredSelect,\n  \"static\": label\n}\n\nconst install = function (InputTypes) {\n  Object.keys(types).forEach((type) => {\n    InputTypes.setInputType(type, types[type]);\n  });\n}\n\nexport default {\n  types,\n  install\n}","/**\n * Creates an AddNoteView component\n *\n * @param {object} spec\n * @returns {*} - React Component\n * @constructor\n * @mixes ViewMixin\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst AddNoteViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Forms\n    const {\n        AddNoteFormFactory\n    } = require('../../forms');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NoteActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        saveNote\n    } = NoteActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     *\n     * @param form\n     * @param inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            auth,\n            dispatch,\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n        const authedUserSession = auth.get('authedUserSession');\n        const username = authedUserSession.get('MY_USERNAME');\n        const selectedNote = event.get('selectedNote');\n        const notesList = modifiedEvent.get('Note');\n\n        let existingNote = undefined;\n\n        if (selectedNote) {\n            notesList.map((note) => {\n                if (note.get('id') === selectedNote.get('id')) {\n                    existingNote = note;\n                }\n            });\n        }\n\n        dispatch(saveNote(_.assign({\n            id: 0,\n            eid: modifiedEvent.get('eid'),\n            content: form.content,\n            datetime: new Date(),\n            enteredby: username\n        }, (existingNote ? {\n            id: existingNote.get('id'),\n            datetime: existingNote.get('datetime'),\n            enteredby: existingNote.get('enteredby')\n        } : null))));\n        dispatch(toggleEventDirty(true));\n        dispatch(toggleViewDirty(false));\n        dispatch(popSubView());\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const AddNoteForm = AddNoteFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            auth: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'event',\n            'auth'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'AddNoteView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return <AddNoteForm\n            ref = \"addNotForm\"\n            onSubmit = {\n                (form) => {\n                    _submitHandler(form, this);\n                }\n            }/>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { AddNoteViewFactory }","/**\n *\n * @param spec\n * @returns {XML}\n * @constructor\n * @mixes AutoShouldUpdateMixin\n */\nconst CalendarEventsViewFactory = (spec) => {\n    /**************************************************************************\n     *\n     * Imports\n     *\n     *************************************************************************/\n\n    const _ = require('lodash');\n    const moment = require('moment');\n\n        // React\n    const React = require('react');\n    const createClass = require('create-react-class');\n\t\tconst PropTypes = require('prop-types');\n\n    // Redux\n    const {connect} = require('react-redux');\n\n    // Components\n    const {\n        CalendarEventListFactory\n    } = require('../../components/list');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const CalendarEventList = CalendarEventListFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            calendar: PropTypes.object.isRequired\n        }\n    });\n\n    const ViewMixin = ViewMixinFactory({});\n\n    /**************************************************************************\n     *\n     * Public Interface\n     *\n     *************************************************************************/\n\n    let component = createClass(_.assign({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'CalendarEventsView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {XML}\n         */\n        render() {\n            const {calendar} = this.props;\n            return (\n                <div>\n                    <CalendarEventList calendar={calendar} />\n                </div>\n            );\n        }\n    }, ViewMixin, {\n        getHeaderText() {\n            const {\n                calendar\n            } = this.props;\n\n            const selectedYear = calendar.get('selectedYear');\n            const selectedMonth = calendar.get('selectedMonth');\n            const selectedDay = calendar.get('selectedDay');\n\n            const fullDate = moment(`${selectedYear}-${selectedMonth}-${selectedDay}`, 'YYYY-MM-DD');\n            const formattedDate = fullDate.format('MMM Do, dddd');\n            return formattedDate;\n        }\n    }));\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { CalendarEventsViewFactory }","/**\n * Creates an ContactView component\n *\n * @param {object} spec\n * @returns {*} - React Component\n * @constructor\n * @mixes ViewMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst ContactViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Forms\n    const {\n        ContactFormFactory\n    } = require('../../forms');\n\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        ContactActionsFactory,\n        EventActionsFactory,\n        NavActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        extractSelectedContact,\n        saveContact\n    } = ContactActionsFactory({});\n    const {\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     *\n     * @param form\n     * @param inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n\n        const selectedContact = extractSelectedContact(event);\n\n        dispatch(saveContact(_.assign({\n                id: '0'\n            },\n            (selectedContact ? selectedContact.toJS() : {}),\n            _.pick(form, [\n                'cname',\n                'title',\n                'company',\n                'phone',\n                'email',\n                'contnotes',\n                'fax',\n                'mobile',\n                'address',\n                'city',\n                'st',\n                'country',\n                'zip'\n            ]), {\n                groupcodes: [form.groupcodes]\n            })));\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(toggleViewDirty(false));\n\n        dispatch(popSubView());\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const ContactForm = ContactFormFactory({});\n    const FormLoading = FormLoadingFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ContactView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <ContactForm\n                        ref='editContactForm'\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }\n                    />\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ContactViewFactory }","/**\n * Creates an EmailCoworkersView component\n *\n * @param {object} spec\n * @returns {*} - React Component\n * @constructor\n * @mixes ViewMixin\n * @mixes RadioServiceMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst EmailCoworkersViewFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Enums\n    const RADIOS = require('../../enums/RADIOS').default;\n\n    // Forms\n    const {\n        EmailCoworkersFormFactory\n    } = require('../../forms');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory,\n        ViewMixinFactory\n    } = require('../../mixins');\n    const {\n        RadioServiceMixin\n    } = require('react-pubsub-via-radio.js');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        LoadingActionsFactory,\n        MessageActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        emailCoworkers\n    } = EventActionsFactory({});\n    const {\n        showLoading,\n        hideLoading\n    } = LoadingActionsFactory({});\n    const {\n        setMessage\n    } = MessageActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     *\n     * @param form\n     * @param inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            event\n        } = inst.props;\n\n        const selectedEvent = event.get('selectedEvent');\n        let coworkers = [];\n\n        _.map(form, (value, key) => {\n            if (key !== 'subject' && key !== 'note') {\n                coworkers.push(key);\n            }\n        });\n\n        emailCoworkers({\n            eid: selectedEvent.get('eid'),\n            subject: form.subject,\n            note: form.note,\n            coworkers: coworkers\n        });\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const EmailCoworkersForm = EmailCoworkersFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'EmailCoworkersView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin, RadioServiceMixin],\n        /**\n         * Sets up the Service Radio channels we are interacting with\n         *\n         * @returns {object}\n         */\n        RadioService_setup() {\n            const {\n                dispatch\n            } = this.props;\n            let radios = {};\n\n            radios[RADIOS.services.EMAIL_COWORKERS] = {\n                key() {\n                    const {\n                        event\n                    } = this.props;\n                    const selectedEvent = event.get('selectedEvent');\n\n                    return `${RADIOS.services.EMAIL_COWORKERS}-${selectedEvent.get('eid')}`;\n                },\n                on: {\n                    waiting() {\n                        dispatch(showLoading());\n                    },\n                    succeeded() {\n                        dispatch(hideLoading());\n\n                        dispatch(toggleViewDirty(false));\n\n                        dispatch(popSubView());\n\n                        dispatch(setMessage({\n                            type: 'success',\n                            text: getText('Email(s) Sent')\n                        }));\n                    },\n                    failed(error) {\n                        dispatch(hideLoading());\n\n                        dispatch(setMessage({\n                            type: 'error',\n                            text: error\n                        }));\n                    }\n                }\n            };\n\n            return radios;\n        },\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return <EmailCoworkersForm\n            ref = 'emailCoworkersForm'\n            onSubmit = {\n                (form) => {\n                    _submitHandler(form, this);\n                }\n            }\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { EmailCoworkersViewFactory }","/**\n * Creates an ProductView component\n *\n * @param {object} spec\n * @returns {*} - React Component\n * @constructor\n * @mixes ViewMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst ProductViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Forms\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {\n        ProductFormFactory\n    } = require('../../forms');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        ProductActionsFactory,\n        NavActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        extractSelectedProduct,\n        saveProduct\n    } = ProductActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     *\n     * @param form\n     * @param inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n\n        const selectedProduct = extractSelectedProduct(event);\n\n        dispatch(saveProduct(_.assign({\n                id: '0'\n            },\n            (selectedProduct ? selectedProduct.toJS() : {}),\n            _.pick(form, [\n                'groupcode',\n                'qtysold',\n                'description',\n                'qtyshipped',\n                'priceeach'\n            ]))));\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(toggleViewDirty(false));\n\n        dispatch(popSubView());\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const FormLoading = FormLoadingFactory({});\n    const ProductForm = ProductFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ProductView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <ProductForm\n                        ref='editProductForm'\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }\n                    />\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ProductViewFactory }","/**\n * Creates an ServiceView component\n *\n * @param {object} spec\n * @returns {*} - React Component\n * @constructor\n * @mixes ViewMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst ServiceViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Forms\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {\n        ServiceFormFactory\n    } = require('../../forms');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Models\n    const ServiceFlagsModel = require('../../stores/models/ServiceFlagsModel').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        ServiceActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const esUtils = require('ES/utils/esUtils');\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        extractSelectedService,\n        saveService\n    } = ServiceActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     *\n     * @param form\n     * @param inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n\n        const selectedService = extractSelectedService(event);\n\n        let amount = form.amount;\n        let flags = selectedService.get('flags');\n        let flagsAsMap = selectedService.get('flags_as_map');\n\n        if (!flagsAsMap || !flagsAsMap.size) {\n            flagsAsMap = new ServiceFlagsModel();\n        }\n\n        let updatedFlagMap = flagsAsMap;\n\n        updatedFlagMap.map((flag, key) => {\n            if ('free' === key.toString()) {\n                return flag.set('is_set', 'free' === form.amountType);\n            }\n            else if ('bill_later' === key.toString()) {\n                return flag.set('is_set', 'bill_later' === form.amountType);\n            }\n\n            return flag;\n        });\n\n        // Now that we've update our flags, we need to iterate over them to create the\n        // flag property\n        flags = 0;\n\n        // Using iterator because using map just to iterate was wiping out the properties for some reason\n        let updateFlagMapIterator = updatedFlagMap.values();\n        let currentFlag = updateFlagMapIterator.next();\n\n        while (!currentFlag.done) {\n            if (currentFlag.value && currentFlag.value.get('is_set')) {\n                flags += currentFlag.value.get('intval');\n            }\n\n            currentFlag = updateFlagMapIterator.next();\n        }\n\n        let due;\n\n        if (_.isDate(form.due)) {\n            due = form.due;\n        } else if (_.isString(form.due) && form.due.length) {\n            due = DateTools.toDate(form.due);\n        }\n\n        dispatch(saveService(_.assign({\n                id: '0'\n            },\n            (selectedService ? selectedService.toJS() : {}),\n            _.pick(form, [\n                'groupcode',\n                'description'\n            ]), {\n                fee: amount,\n                flags: flags,\n                flags_as_map: updatedFlagMap.toJS(),\n                due: due,\n                due_ISO8601: (due && _.isDate(due) ? esUtils.returnISO8601(due) : null) // esUtils.convertJSEventToBalboa3Event doesn't include Services so we need to do it manually\n            }\n        )));\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(toggleViewDirty(false));\n\n        dispatch(popSubView());\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const FormLoading = FormLoadingFactory({});\n    const ServiceForm = ServiceFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'ServiceView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <ServiceForm\n                        ref='editServiceForm'\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }\n                    />\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { ServiceViewFactory }","/**\n * Creates an StageTimeView component\n *\n * @param {object} spec\n * @returns {*} - React Component\n * @constructor\n * @mixes ViewMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst StageTimeViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Forms\n    const {FormLoadingFactory} = require('../../components/FormLoading');\n    const {\n        StageTimeFormFactory\n    } = require('../../forms');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        VenueActionsFactory,\n        DialogActionsFactory,\n        NavActionsFactory,\n        StageTimeActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const DateToolsFactory = require('../../util/DateTools').default;\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        extractSelectedVenue,\n        saveVenue\n    } = VenueActionsFactory({});\n    const {\n        extractSelectedStageTime,\n        saveStageTime\n    } = StageTimeActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     *\n     * @param form\n     * @param inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n\n        const selectedStageTime = extractSelectedStageTime(event);\n        const selectedVenue = extractSelectedVenue(event, form.venueId);\n\n        dispatch(saveStageTime(_.assign({\n                id: '0'\n            },\n            (selectedStageTime ? selectedStageTime.toJS() : {}), {\n                starttime: DateTools.mergeDate(form.startDate, form.startTime),\n                stoptime: DateTools.mergeDate(form.stopDate, form.stopTime),\n                avchecktime: DateTools.mergeDate(form.avcheckdate, form.avchecktime)\n            }, _.pick(form, ['venueid', 'description', 'room']))));\n\n        dispatch(saveVenue(_.assign({\n                id: '0'\n            },\n            (selectedVenue ? selectedVenue.toJS() : {\n                id: form.venueid || '0'\n            }), {},\n            _.pick(form, ['building',\n                'city',\n                'st',\n                'country',\n                'address',\n                'phone',\n                'fax',\n                'zip',\n                'timezone'\n            ]))));\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(toggleViewDirty(false));\n\n        dispatch(popSubView());\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const FormLoading = FormLoadingFactory({});\n    const StageTimeForm = StageTimeFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'StageTimeView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return (\n                <FormLoading>\n                    <StageTimeForm\n                        ref='editStageTimeForm'\n                        onSubmit={\n                            (form) => {\n                                _submitHandler(form, this);\n                            }\n                        }/>\n                </FormLoading>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { StageTimeViewFactory }","/**\n * Creates an TodoView component\n *\n * @param {object} spec\n * @returns {*} - React Component\n * @constructor\n * @mixes ViewMixin\n * @mixes AutoShouldUpdateMixin\n */\nconst TodoViewFactory = (spec) => {\n\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n    // Node Modules\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n\n    // Forms\n    const {\n        TodoFormFactory\n    } = require('../../forms');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TodoActionsFactory,\n        NavActionsFactory,\n        TranslateActionsFactory,\n        ViewActionsFactory\n    } = require('../../actions');\n\n    // Utils\n    const {\n        log\n    } = require('../../util/DevTools').default;\n    const DateToolsFactory = require('../../util/DateTools').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        toggleEventDirty\n    } = EventActionsFactory({});\n    const {\n        extractSelectedTodo,\n        saveTodo\n    } = TodoActionsFactory({});\n    const {\n        popSubView\n    } = NavActionsFactory({});\n    const {\n        getText\n    } = TranslateActionsFactory({});\n    const {\n        toggleViewDirty\n    } = ViewActionsFactory({});\n\n    const DateTools = DateToolsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _submitHandler;\n\n    /**\n     *\n     * @param form\n     * @param inst\n     * @private\n     */\n    _submitHandler = (form, inst) => {\n        const {\n            dispatch,\n            event\n        } = inst.props;\n\n        const modifiedEvent = event.get('modifiedEvent');\n\n        const selectedTodo = extractSelectedTodo(event);\n\n        let statusdate = null;\n\n        if (_.isDate(form.statusdate)) {\n            statusdate = form.statusdate;\n        } else if (_.isString(form.statusdate)) {\n            statusdate = DateTools.toDate(form.statusdate);\n        }\n\n        dispatch(saveTodo(_.assign({\n                id: '0'\n            },\n            (selectedTodo ? selectedTodo.toJS() : {}), {\n                statusdate: statusdate\n            },\n            {\n                status: (form.status === true ? 1 : 0)\n            },\n            _.pick(form, [\n                'description',\n                'assignedto'\n            ]))));\n\n        dispatch(toggleEventDirty(true));\n\n        dispatch(toggleViewDirty(false));\n\n        dispatch(popSubView());\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const TodoForm = TodoFormFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            event: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'TodoView',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * The render() method is required. Generates the virtual DOM/HTML.\n         * @returns {*}\n         */\n        render() {\n            return <TodoForm\n            ref = \"editTodoForm\"\n            onSubmit = {\n                (form) => {\n                    _submitHandler(form, this);\n                }\n            }\n            />;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport { TodoViewFactory }","/**\n * Creates a EventMobileLayout component\n *\n * @param {object} spec\n * @constructor\n * @returns {*}\n * @mixes AutoShouldUpdateMixin\n */\nconst EventMobileLayoutFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     ******************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {\n        connect\n    } = require('react-redux');\n    // const Hammer = require('react-hammerjs');\n\n    // Components\n    const {\n        HeaderFactory,\n        FooterNavFactory\n    } = require('../components');\n\n    const {MUIDrawerFactory} = require('../components/mui/MUIDrawer');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        EventActionsFactory,\n        NavActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getCurrentSubView,\n        // nextEventView,\n        // prevEventView\n    } = NavActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _determineShowDrawer;\n    // let _swipeHandler;\n\n    /**\n     * Determines if we should show the Drawer navigation\n     *\n     * @param {object} inst\n     * @returns {boolean}\n     * @private\n     */\n    _determineShowDrawer = (inst) => {\n        const {\n            event,\n            nav\n        } = inst.props;\n\n        const selectedEvent = event.get('selectedEvent');\n        const subView = getCurrentSubView(nav);\n\n        return (selectedEvent && !subView);\n    };\n\n    // /**\n    //  *\n    //  * @param event\n    //  * @param inst\n    //  * @private\n    //  */\n    // _swipeHandler = (event, inst) => {\n    //     const {\n    //         dispatch\n    //     } = inst.props;\n    //\n    //     if (event.deltaX < -50) {\n    //         dispatch(nextEventView());\n    //     } else if (event.deltaX > 50) {\n    //         dispatch(prevEventView());\n    //     }\n    // };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Header = HeaderFactory({});\n    const FooterNav = FooterNavFactory({});\n\n    const MUIDrawer = MUIDrawerFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            children: PropTypes.object.isRequired,\n            event: PropTypes.object.isRequired,\n            nav: PropTypes.object.isRequired\n        },\n        propsPriority: [\n            'nav',\n            'children',\n            'event'\n        ]\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    let component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'EventMobileLayout',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Builds the virtual DOM/HTml\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                children\n            } = this.props;\n\n            return (\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%'\n                }}>\n\n                    {(_determineShowDrawer(this) ?\n                      <MUIDrawer/> : null)}\n\n                    <div style={{\n                        order: 1,\n                        flexBasis: 'auto',\n                        flexShrink: 0,\n                        flexGrow: 0\n                    }}>\n                        <Header/>\n                    </div>\n\n                    <div style={{\n                        order: 2,\n                        overflowY: 'scroll',\n                        overflowX: 'hidden',\n                        height: '100%'\n                    }}>\n\n                        <div>\n                            {children}\n\n                            <div style={{height: '48px'}}></div>\n                        </div>\n                    </div>\n\n                    <div\n                        className='hider'\n                        onClick={(e) => {\n                            stopProp(e);\n\n                            this.refs.drawerNav.close();\n                        }}/>\n\n                    <div\n                         style={{\n                            order: 3,\n                            flexBasis: 'auto',\n                            flexShrink: 0,\n                            flexGrow: 0\n                    }}>\n                        <FooterNav includeSearch={true}/>\n                    </div>\n                </div>\n            );\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport default EventMobileLayoutFactory;\n","/**\n * Creates a EventTabletLayout component\n *\n * @param {object} spec\n * @constructor\n * @returns {*}\n * @mixes AutoShouldUpdateMixin\n */\nconst EventTabletLayoutFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     ******************************************************************************/\n\n        // NPM\n    const _ = require('lodash');\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n    const {connect} = require('react-redux');\n    const Hammer = require('react-hammerjs');\n\n    // Theme\n    const mainTheme = require('../theme/mainTheme').default;\n\n    // Components\n    const {\n        HeaderFactory,\n        FooterNavFactory\n    } = require('../components');\n\n    const {MUIDrawerFactory} = require('../components/mui/MUIDrawer');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    // Actions\n    const {\n        NavActionsFactory\n    } = require('../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n        //---------------------------------\n        // Actions\n        //---------------------------------\n\n    const {\n            nextEventView,\n            prevEventView\n        } = NavActionsFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    let _swipeHandler;\n\n    /**\n     *\n     * @param event\n     * @param inst\n     * @private\n     */\n    _swipeHandler = (event, inst) => {\n        const {\n            dispatch\n        } = inst.props;\n\n        if (event.deltaX < -50) {\n            dispatch(nextEventView());\n        } else if (event.deltaX > 50) {\n            dispatch(prevEventView());\n        }\n    };\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Header = HeaderFactory({});\n    const FooterNav = FooterNavFactory({});\n\n    const MUIDrawer = MUIDrawerFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            children: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    const component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'EventMobileLayout',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Builds the virtual DOM/HTml\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                children\n            } = this.props;\n\n            return (\n                <div style={{\n                    height: '100%'\n                }}>\n\n                    {/* Header */}\n\n                    <div style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0\n                    }}>\n                        <Header includeDrawer={false}/>\n                    </div>\n\n                    {/* Content */}\n\n                    <div style={{\n                        position: 'absolute',\n                        top: '56px',\n                        left: 0,\n                        right: 0,\n                        bottom: '56px'\n                    }}>\n\n                        {/* Left Content */}\n\n                        <div style={{\n                            position: 'absolute',\n                            top: 0,\n                            bottom: 0,\n                            left: 0,\n                            overflowX: 'hidden',\n                            overflowY: 'scroll',\n                            width: '256px',\n                            borderRight: `1px solid ${mainTheme.backgroundColor}`,\n                            height: '100%'\n                        }}>\n\n                            <MUIDrawer staticLayout={true}/>\n\n                        </div>\n\n                        {/* Right Content */}\n\n                        <div style={{\n                            position: 'absolute',\n                            top: 0,\n                            bottom: 0,\n                            left: '258px',\n                            right: 0,\n                            height: '100%',\n                            overflowX: 'hidden',\n                            overflowY: 'scroll'\n                        }}>\n                            <div>\n                                <Hammer onSwipe={(e) => {\n                                    _swipeHandler(e, this);\n                                }}>\n\n                                    {children}\n\n                                </Hammer>\n\n                                <div style={{height: '48px'}}></div>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    {/* Footer */}\n                    <div style={{\n                        position: 'absolute',\n                        bottom: 0,\n                        left: 0,\n                        right: 0\n                    }}>\n                        <FooterNav includeSearch={false}/>\n                    </div>\n\n                </div>\n            );\n        }\n    });\n\n    return connect()(component);\n}\n\nexport default EventTabletLayoutFactory;\n","/**\n * Creates a MainMobileLayout component\n *\n * @param {object} spec\n * @constructor\n * @returns {*}\n * @mixes AutoShouldUpdateMixin\n */\nconst MainMobileLayoutFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     ******************************************************************************/\n\n        // NPM\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    const {connect} = require('react-redux');\n\n    // Components\n    const {\n        HeaderFactory,\n        FooterNavFactory\n    } = require('../components');\n\n    // Mixins\n    const AutoShouldUpdateMixinFactory = require('../mixins/AutoShouldUpdateMixin').default;\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Header = HeaderFactory({});\n    const FooterNav = FooterNavFactory({});\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            children: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    const component = createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MainMobileLayout',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Builds the virtual DOM/Html\n         *\n         * @returns {*|XML|JSX}\n         */\n        render() {\n            const {\n                children\n            } = this.props;\n\n            return <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: '100%',\n                height: '100%'\n            }}>\n                <div style={{\n                    order: 1,\n                    flexBasis: 'auto',\n                    flexShrink: 0,\n                    flexGrow: 0\n                }}>\n                    <Header includeDrawer={false}/>\n                </div>\n\n                <div style={{\n                    order: 2,\n                    overflowY: 'scroll',\n                    overflowX: 'hidden',\n                    flexGrow: 1,\n                    flexShrink: 1,\n                    flexBasis: '0px',\n                    height: '100%'\n                }}>\n                    {children}\n                </div>\n\n                <div style={{\n                    order: 3,\n                    flexBasis: 'auto',\n                    flexShrink: 0,\n                    flexGrow: 0\n                }}>\n                    <FooterNav includeSearch={true}/>\n                </div>\n            </div>;\n        }\n    });\n\n    return connect(AutoShouldUpdateMixin.mapStateToProps)(component);\n}\n\nexport default MainMobileLayoutFactory;\n","/**\n * Creates a MainTabletLayout component\n *\n * @param {object} spec\n * @constructor\n * @returns {*}\n * @mixes AutoShouldUpdateMixin\n */\nconst MainTabletLayoutFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     ******************************************************************************/\n\n        // NPM\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Components\n    const {\n        HeaderFactory,\n        FooterNavFactory\n    } = require('../components');\n\n    // Theme\n    const mainTheme = require('../theme/mainTheme').default;\n\n    // Views\n    const {\n        SearchViewFactory\n    } = require('../views');\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../mixins');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const Header = HeaderFactory({});\n    const FooterNav = FooterNavFactory({});\n\n    const SearchView = SearchViewFactory({\n        noHeader: true\n    });\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            children: PropTypes.object.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * Public Interface / React Component\n     *\n     *************************************************************************/\n\n    return createClass({\n        /**\n         * Used in debug messages\n         */\n        displayName: 'MainMobileLayout',\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n        /**\n         * Builds the virtual DOM/HTml\n         *\n         * @returns {*}\n         */\n        render() {\n            const {\n                hide_search = false,\n                children\n            } = this.props;\n\n            return (\n                <div style={{\n                    height: '100%'\n                }}>\n\n                    {/* Header */}\n\n                    <div style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0\n                    }}>\n                        <Header includeDrawer={false}/>\n                    </div>\n\n                    {/* Content */}\n\n                    <div style={{\n                        position: 'absolute',\n                        top: '56px',\n                        left: 0,\n                        right: 0,\n                        bottom: '56px'\n                    }}>\n\n                        {/* Left Content */}\n                        {!hide_search &&\n                        <div style={{\n                            position: 'absolute',\n                            top: 0,\n                            bottom: 0,\n                            left: 0,\n                            overflowX: 'hidden',\n                            overflowY: 'scroll',\n                            width: '256px',\n                            borderRight: `1px solid ${mainTheme.backgroundColor}`,\n                            height: '100%'\n                        }}>\n\n                            <SearchView isTablet={true}/>\n\n                        </div>\n                        }\n\n                        {/* Right Content */}\n\n                        <div style={{\n                            position: 'absolute',\n                            top: 0,\n                            bottom: 0,\n                            left: (hide_search ? '0px' : '258px'),\n                            right: 0,\n                            height: '100%',\n                            overflowX: 'hidden',\n                            overflowY: 'scroll'\n                        }}>\n                            {children}\n                        </div>\n\n                    </div>\n\n                    {/* Footer */}\n                    <div style={{\n                        position: 'absolute',\n                        bottom: 0,\n                        left: 0,\n                        right: 0\n                    }}>\n                        <FooterNav includeSearch={false}/>\n                    </div>\n\n                </div>\n            );\n        }\n    });\n}\n\nexport default MainTabletLayoutFactory;\n","const Immutable = require('immutable');\n\nexport default Immutable.Record({\n    is_set: false,\n    intval: 0\n});","/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\nconst {List, Record} = require('immutable');\n\n\n/**************************************************************************\n *\n * Public Interface\n *\n *************************************************************************/\n// TODO: refactor this to be flattend up on EventModel with the other \"selected\" items\nexport default  Record({\n    selected: undefined,\n    selectedVenue: undefined\n});","/* global navigator */\n\n/******************************************************************************\n *\n * Imports\n *\n *****************************************************************************/\n\n// For some reason React doesn't pick this up even though it is perfectly set\n// You have to manually set it again first thing.  Amazing.\n\n// Node Modules\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst _ = require('lodash');\nconst {createResponsiveStoreEnhancer} = require('redux-responsive');\nimport { Iterable } from 'immutable';\n\nconst Platform = require('./util/Platform').default;\n\n// if (!Platform.isProduction()) {\n//     /* global global */\n//     // Perf\n//     global.Perf = require('react-addons-perf');\n// }\n\n// Redux\nconst {Provider} = require('react-redux');\nconst {applyMiddleware, compose, createStore} = require('redux');\n\nconst AppStore = require('./stores/AppStore').default;\n\nconst ArrayDispatchMiddleware = require('./mixins/ArrayDispatchMiddleware').default;\nconst {createLogger} = require(\"redux-logger\");\n\n// Factories\nconst MainViewFactory = require('./views/MainView').default;\n\n// Utilities\nconst {log} = require('./util/DevTools').default;\n\nimport \"./app.less\";\n\n/**************************************\n * Components\n *************************************/\nlet store;\nconst hasDevTools = _.isFunction(window.__REDUX_DEVTOOLS_EXTENSION__);\nconst responsiveStoreEnhancer = createResponsiveStoreEnhancer({performanceMode: false});\nconst middlewares = [ArrayDispatchMiddleware];\nif (!hasDevTools || Platform.isProduction()) {\n    store = createStore(AppStore,\n        compose(\n            responsiveStoreEnhancer,\n            applyMiddleware(...middlewares)\n        )\n    );\n} else {\n    // add logger for development mode\n    const logger = createLogger({\n        level: \"error\",\n        collapsed: (getState, action, logEntry) => !logEntry.error,\n        duration: true,\n        colors: {\n            title: false,\n            prevState: false,\n            action: false,\n            nextState: false,\n            error: false\n        },\n        stateTransformer: (state) => {\n            let newState = {};\n\n            for (var i of Object.keys(state)) {\n                if (Iterable.isIterable(state[i])) {\n                    newState[i] = JSON.stringify(state[i].toJS());\n                } else {\n                    newState[i] = JSON.stringify(state[i]);\n                }\n            };\n\n            return newState;\n        }\n    });\n    middlewares.push(logger);\n\n    store = createStore(AppStore,\n        compose(\n            responsiveStoreEnhancer,\n            applyMiddleware(...middlewares),\n            window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    );\n}\n\nconst MainView = MainViewFactory({});\n\n// If we are testing on local webserver/Chrome, then render the app right away.\n// if (hasDevTools || (!Platform.isProduction() && !Platform.isPhoneGap())) {\n//     document.renderApp();\n// } else {\n//     document.renderApp();\n// }\nReactDOM.render(<Provider store={store}><MainView /></Provider>, document.getElementById('espeakers-mobile'));\n\n// If we are testing on local webserver/Chrome, then render the app right away.\n// ReactDOM.render(<Provider store={store}><MainView/></Provider>, document.getElementById('espeakers-mobile'));","export default __webpack_public_path__ + \"static/media/app.d42f88ea.less\";","/**\n * Generates a CalendarLegendDialog component\n *\n * @param {object} spec - Container for named parameters\n * @constructor\n * @returns {*} - React Component\n * @mixes AutoShouldUpdateMixin\n */\nconst CalendarLegendDialogFactory = (spec) => {\n    /******************************************************************************\n     *\n     * Imports\n     *\n     *****************************************************************************/\n\n        // Node Modules\n    const React = require('react');\n    const createClass = require('create-react-class');\n    const PropTypes = require('prop-types');\n\n    // Components\n    const Dialog = require('material-ui/Dialog').default;\n    const FlatButton = require('material-ui/FlatButton').default;\n    const {LegendCardFactory} = require('../cards/LegendCard');\n\n    // Theme\n    const mainTheme = require('../../theme/mainTheme').default;\n\n    // Mixins\n    const {\n        AutoShouldUpdateMixinFactory\n    } = require('../../mixins');\n\n    // Utilities\n    const {\n        log\n    } = require('../../util/DevTools').default;\n\n    // Actions\n    const {\n        EventActionsFactory,\n        TranslateActionsFactory\n    } = require('../../actions');\n\n    /**************************************************************************\n     *\n     * Private Members\n     *\n     *************************************************************************/\n\n    /**********************************\n     * Actions\n     *********************************/\n\n    const {\n        stopProp\n    } = EventActionsFactory({});\n\n    const {\n        getText\n    } = TranslateActionsFactory({});\n\n    /**********************************\n     * Components\n     *********************************/\n\n    const LegendCard = LegendCardFactory({});\n\n    /**********************************\n     * Methods\n     *********************************/\n\n    /**********************************\n     * Mixins\n     *********************************/\n\n    const AutoShouldUpdateMixin = AutoShouldUpdateMixinFactory({\n        propTypes: {\n            widgetId: PropTypes.string.isRequired,\n            showWidget: PropTypes.bool.isRequired,\n            onClose: PropTypes.func.isRequired\n        }\n    });\n\n    /**************************************************************************\n     *\n     * React / Public Interface\n     *\n     *************************************************************************/\n\n    return createClass({\n\n        /**\n         * Used for debug messages\n         */\n        displayName: 'CalendarLegendDialog',\n\n        /**\n         * Allows you to use mixins to share behavior among multiple components.\n         */\n        mixins: [AutoShouldUpdateMixin],\n\n        /**\n         * Generates HTML/DOM\n         *\n         * @return {XML}\n         */\n        render() {\n            const {\n                widgetId,\n                showWidget,\n                onClose\n            } = this.props;\n\n            const decoratorSize = 10;\n            const eventSize = 20;\n\n            const actions = [\n                <FlatButton\n                    label={getText(\"Close\")}\n                    primary={true}\n                    onClick={(e) => {\n                        stopProp(e);\n\n                        onClose();\n                    }}\n                />\n            ];\n\n            return (\n                <Dialog\n                    open={showWidget}\n                    title={getText(\"Calendar Legend\")}\n                    actions={actions}\n                    autoScrollBodyContent={true}\n                    onRequestClose={() => {\n                        onClose();\n                    }}>\n                    <div style={{\n                        paddingTop: '10px'\n                    }}>\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.confirmedColor\n                            }}\n                            avatarSize={eventSize}\n                            primaryText={getText(\"Confirmed\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.heldColor\n                            }}\n                            avatarSize={eventSize}\n                            primaryText={getText(\"Held\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.leadColor\n                            }}\n                            avatarSize={eventSize}\n                            primaryText={getText(\"Lead\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.postponedColor\n                            }}\n                            avatarSize={eventSize}\n                            primaryText={getText(\"Postponed\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.closedColor\n                            }}\n                            avatarSize={eventSize}\n                            primaryText={getText(\"Closed\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.travelColor\n                            }}\n                            avatarSize={decoratorSize}\n                            primaryText={getText(\"Travel\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.dailyColor\n                            }}\n                            avatarSize={decoratorSize}\n                            primaryText={getText(\"Daily\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.callColor\n                            }}\n                            avatarSize={decoratorSize}\n                            primaryText={getText(\"Call\")}/>\n\n                        <LegendCard\n                            avatarStyle={{\n                                backgroundColor: mainTheme.coachingColor\n                            }}\n                            avatarSize={decoratorSize}\n                            primaryText={getText(\"Coaching\")}/>\n                    </div>\n                </Dialog>\n            );\n        }\n    });\n}\n\nexport { CalendarLegendDialogFactory }"],"sourceRoot":""}